using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Transactions;
using System.Configuration;
using System.Web;
namespace VesselStopOverData
{
    public class VSOMAccessors : VsomMarchal
    {
        VSOMClassesDataContext dcAcc; //= new VSOMClassesDataContext();
        //private string sap_svr = string.Empty; // "192.168.0.30";
        //private string sap_licence = string.Empty; //"192.168.0.30";
        //private string sap_db_name = string.Empty; //"SOCOMAR_PRODUCTION";
        //private string sap_db_usr = string.Empty;
        //private string sap_db_pwd = string.Empty;
       // VsomParameters vsp = new VsomParameters();
       // VsomMarchal vsm = new VsomMarchal();

        public VSOMAccessors():base()
        { 
            dcAcc = new VSOMClassesDataContext();
        }

        public VSOMAccessors(VSOMClassesDataContext dc)
            : base(dc)
        {
            dcAcc = dc;
        }
        
        #region Escale
        
        /// <summary>
        ///  enregistre un escaleavec date d'arrivée réelle
        /// </summary>
        /// <param name="numEsc"> numero escale</param>
        /// <param name="numVoySCR">numero voyage socomar</param>
        /// <param name="numVoyDIT"> numero voyage dit</param>
        /// <param name="nomCpt">?unknow</param>
        /// <param name="dateDepart">date depart</param>
        /// <param name="datePrevArr">date arrivee prevu</param>
        /// <param name="dateEffArr">date arrivee efective</param>
        /// <param name="dateDech">date dechrgement</param>
        /// <param name="numSydonia">num sydonia</param>
        /// <param name="nbPrevMan">nbr prevu de manif</param>
        /// <param name="roleGesParc">socmar est gest parc</param>
        /// <param name="roleRep">socomar est representant</param>
        /// <param name="roleAcc">socomar est acconier</param>
        /// <param name="roleCons">socomar est consignataire</param>
        /// <param name="autresInfos"></param>
        /// <param name="idNav">id navire</param>
        /// <param name="idArm">id amarteur</param>
        /// <param name="idAcc">id acconier</param>
        /// <param name="idUser">id user action</param>
        /// <returns>objet escale cree</returns>
        public ESCALE InsertEscale(int numEsc, string numVoySCR, string numVoyDIT, string nomCpt, DateTime dateDepart, DateTime datePrevArr, DateTime dateEffArr, DateTime dateDech, string numSydonia, short nbPrevMan, string roleGesParc, string roleRep, string roleAcc, string roleCons, string autresInfos, int idNav, int idArm, int idAcc, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).SingleOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Escale : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer une nouvelle escale. Veuillez contacter un administrateur");
                }

                var matchedNavire = (from nav in dcAcc.GetTable<NAVIRE>()
                                     where nav.IdNav == idNav
                                     select nav).SingleOrDefault<NAVIRE>();

                if (matchedNavire == null)
                {
                    throw new EnregistrementInexistant("Le navire auquel vous faites référence n'existe pas");
                }

                var matchedArmateur = (from arm in dcAcc.GetTable<ARMATEUR>()
                                       where arm.IdArm == idArm
                                       select arm).SingleOrDefault<ARMATEUR>();

                if (matchedArmateur == null)
                {
                    throw new EnregistrementInexistant("L'armateur auquel vous faites référence n'existe pas");
                }

                var matchedAcconier = (from acc in dcAcc.GetTable<ACCONIER>()
                                       where acc.IdAcc == idAcc
                                       select acc).SingleOrDefault<ACCONIER>();

                if (matchedAcconier == null)
                {
                    throw new EnregistrementInexistant("L'acconier auquel vous faites référence n'existe pas");
                }

                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.NumEsc == numEsc
                                     select esc).SingleOrDefault<ESCALE>();

                if (matchedEscale != null)
                {
                    throw new EscaleException("Ce numéro d'escale a déjà été attribué au voyage " + matchedEscale.NumVoySCR + " à la date du " + matchedEscale.DCEsc);
                }

                // Création de l'escale
                ESCALE escale = new ESCALE();

                escale.NumEsc = numEsc;
                escale.NumVoySCR = numVoySCR;
                escale.NumVoyDIT = numVoyDIT;
                escale.NomCpt = nomCpt;
                escale.DDEsc = dateDepart;
                escale.DPAEsc = datePrevArr;
                escale.DRAEsc = dateEffArr;
                escale.DDechEsc = dateDech;
                escale.DCEsc = DateTime.Now;
                escale.NbrePManEsc = nbPrevMan;
                escale.RGPEsc = roleGesParc;
                escale.RCEsc = roleCons;
                escale.RREsc = roleRep;
                escale.RAEsc = roleAcc;
                escale.AIEsc = autresInfos;
                escale.IdNav = idNav;
                escale.IdAcc = idAcc;
                escale.IdArm = idArm;
                escale.NumManifestSydonia = numSydonia;
                escale.SOP = "O";
                escale.StatEsc = "En cours";

                dcAcc.ESCALE.InsertOnSubmit(escale);
                dcAcc.ESCALE.Context.SubmitChanges();

                // Mise à jour des opérations liées au Summary of Operations
                List<TYPE_OPERATION> typeOpArm = (from type in dcAcc.GetTable<TYPE_OPERATION>()
                                                  where type.EltTypeOp == "A" && type.IdArm == escale.IdArm
                                                  select type).ToList<TYPE_OPERATION>();

                foreach (TYPE_OPERATION typeOp in typeOpArm)
                {
                    OPERATION_ARMATEUR opArm = new OPERATION_ARMATEUR();
                    opArm.IdEsc = escale.IdEsc;
                    opArm.IdTypeOp = typeOp.IdTypeOp;
                    dcAcc.OPERATION_ARMATEUR.InsertOnSubmit(opArm);
                }
                dcAcc.OPERATION_ARMATEUR.Context.SubmitChanges();

                // Insertion des éléments liés au statut de l'escale
                List<TYPE_OPERATION> typeOpEsc = (from type in dcAcc.GetTable<TYPE_OPERATION>()
                                                  where type.EltTypeOp == "E"
                                                  select type).ToList<TYPE_OPERATION>();

                foreach (TYPE_OPERATION typeOp in typeOpEsc)
                {
                    OPERATION_ESCALE opEsc = new OPERATION_ESCALE();
                    opEsc.IdEsc = escale.IdEsc;
                    opEsc.IdTypeOp = typeOp.IdTypeOp;
                    dcAcc.OPERATION_ESCALE.InsertOnSubmit(opEsc);
                }
                dcAcc.OPERATION_ESCALE.Context.SubmitChanges();

                // Les lignes de facturation armateur sont calculées pour les escales dont Socomar est acconier
                if (escale.RAEsc == "Y")
                {
                    if (escale.IdArm == 1)
                    {
                        // Insertion de l'élément de facturation Agency Fees
                        DateTime dte = DateTime.Now;

                        /*AH ARTICLE articleAgencyFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                     from par in dcAcc.GetTable<PARAMETRE>()
                                                     where art.CodeArticle == par.CodeAF && par.NomAF == "Agency fees"
                                                     select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleAgencyFees = (from art in dcAcc.GetTable<ARTICLE>() 
                                                     where  art.CodeArticle == 2203
                                                     select art).FirstOrDefault<ARTICLE>();
                        LIGNE_PRIX lpAgencyFees = articleAgencyFees.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == idArm.ToString());

                        ELEMENT_FACTURATION eltAgencyFees = new ELEMENT_FACTURATION();

                        eltAgencyFees.DestEF = "A";
                        eltAgencyFees.StatutEF = "En cours";
                        eltAgencyFees.DateJEF = DateTime.Now;
                        eltAgencyFees.CCArticle = articleAgencyFees.CCArticle;
                        eltAgencyFees.CCCP = escale.ARMATEUR.CCArm;
                        eltAgencyFees.EltFacture = "Arm";
                        eltAgencyFees.LibEF = articleAgencyFees.LibArticle + " - Escale " + escale.NumEsc; //AH "Agency fees - Escale " + escale.NumEsc;
                        eltAgencyFees.IdLP = lpAgencyFees.IdLP;
                        eltAgencyFees.PUEF = lpAgencyFees.PU1LP;
                        eltAgencyFees.IdEsc = escale.IdEsc;
                        eltAgencyFees.QTEEF = 1;
                        eltAgencyFees.UnitEF = "U";
                        eltAgencyFees.CodeTVA = articleAgencyFees.CodeTVA; //"TVAAP";
                        eltAgencyFees.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleAgencyFees.CodeTVA).TauxTVA;
                        eltAgencyFees.CodeArticle = articleAgencyFees.CodeArticle.ToString();

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltAgencyFees);
                        dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();

                        /* AH ARTICLE articleISPSFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                   from par in dcAcc.GetTable<PARAMETRE>()
                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "ISPS Security fees"
                                                   select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleISPSFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                   //from par in dcAcc.GetTable<PARAMETRE>()
                                                   where art.CodeArticle == 2204
                                                   select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpISPSFees = articleISPSFees.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == idArm.ToString());

                        ELEMENT_FACTURATION eltISPSFees = new ELEMENT_FACTURATION();

                        eltISPSFees.DestEF = "A";
                        eltISPSFees.StatutEF = "En cours";
                        eltISPSFees.DateJEF = DateTime.Now;
                        eltISPSFees.CCArticle = articleISPSFees.CCArticle;
                        eltISPSFees.CCCP = escale.ARMATEUR.CCArm;
                        eltISPSFees.EltFacture = "Arm";
                        eltISPSFees.LibEF = articleISPSFees.LibArticle + " - Escale " + escale.NumEsc; //AH "ISPS Security fees - Escale " + escale.NumEsc;
                        eltISPSFees.IdLP = lpISPSFees.IdLP;
                        eltISPSFees.PUEF = lpISPSFees.PU1LP;
                        eltISPSFees.IdEsc = escale.IdEsc;
                        eltISPSFees.QTEEF = 1;
                        eltISPSFees.UnitEF = "U";
                        eltISPSFees.CodeTVA = articleISPSFees.CodeTVA; //"TVAAP";
                        eltISPSFees.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleISPSFees.CodeTVA).TauxTVA;
                        eltISPSFees.CodeArticle = articleISPSFees.CodeArticle.ToString();

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltISPSFees);
                        dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                    }
                    else if (escale.IdArm == 2)
                    {
                        DateTime dte = DateTime.Now;

                       /* ARTICLE articleCommunication = (from art in dcAcc.GetTable<ARTICLE>()
                                                        from par in dcAcc.GetTable<PARAMETRE>()
                                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Reporting, communication, courrier services"
                                                        select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleCommunication = (from art in dcAcc.GetTable<ARTICLE>()
                                                        where art.CodeArticle == 2205
                                                        select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpCommunication = articleCommunication.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        ELEMENT_FACTURATION eltCommunication = new ELEMENT_FACTURATION();

                        eltCommunication.DestEF = "A";
                        eltCommunication.StatutEF = "En cours";
                        eltCommunication.DateJEF = DateTime.Now;
                        eltCommunication.CCArticle = articleCommunication.CCArticle;
                        eltCommunication.CCCP = escale.ARMATEUR.CCArm;
                        eltCommunication.EltFacture = "Arm";
                        eltCommunication.LibEF = string.Format("{0} - Escale {1} ",articleCommunication.LibArticle,escale.NumEsc);//AH Reporting, communication, courrier services - Escale " + escale.NumEsc;
                        eltCommunication.IdLP = lpCommunication.IdLP;
                        eltCommunication.PUEF = lpCommunication.PU1LP;
                        eltCommunication.IdEsc = escale.IdEsc;
                        eltCommunication.QTEEF = 1;
                        eltCommunication.UnitEF = "U";
                        eltCommunication.CodeTVA = articleCommunication.CodeTVA;//"TVAAP";
                        eltCommunication.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleCommunication.CodeTVA).TauxTVA;
                        eltCommunication.CodeArticle = articleCommunication.CodeArticle.ToString();

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltCommunication);
                        dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                    }
                }

                transaction.Complete();
                return escale;
            }
        }

   
         
        /// <summary>
        ///  insertion escale sans date d'arrivée réelle : pas d'enregistrement liés à l'armateur
        /// </summary>
        /// <param name="numEsc">numero escale</param>
        /// <param name="numVoySCR">numero voyage socomar</param>
        /// <param name="numVoyDIT">numero voyage dit</param>
        /// <param name="nomCpt">?unknow</param>
        /// <param name="dateDepart">date depart</param>
        /// <param name="datePrevArr">date arrivee prevue</param>
        /// <param name="numSydonia">num sydonia</param>
        /// <param name="nbPrevMan">nbr manif prevu</param>
        /// <param name="roleGesParc">socomar est ges parc</param>
        /// <param name="roleRep">socomar est representant</param>
        /// <param name="roleAcc">socomar est acconier</param>
        /// <param name="roleCons">socomar est consignataire</param>
        /// <param name="autresInfos"></param>
        /// <param name="idNav">id navire</param>
        /// <param name="idArm">id armateur</param>
        /// <param name="idAcc">id acconier</param>
        /// <param name="idUser">id user</param>
        /// <returns></returns>
        public ESCALE InsertEscale(int numEsc, string numVoySCR, string numVoyDIT, string nomCpt, DateTime dateDepart, DateTime datePrevArr, string numSydonia, short nbPrevMan, string roleGesParc, string roleRep, string roleAcc, string roleCons, string autresInfos, int idNav, int idArm, int idAcc, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).SingleOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Escale : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer une nouvelle escale. Veuillez contacter un administrateur");
                }

                var matchedNavire = (from nav in dcAcc.GetTable<NAVIRE>()
                                     where nav.IdNav == idNav
                                     select nav).SingleOrDefault<NAVIRE>();

                if (matchedNavire == null)
                {
                    throw new EnregistrementInexistant("Le navire auquel vous faites référence n'existe pas");
                }

                var matchedArmateur = (from arm in dcAcc.GetTable<ARMATEUR>()
                                       where arm.IdArm == idArm
                                       select arm).SingleOrDefault<ARMATEUR>();

                if (matchedArmateur == null)
                {
                    throw new EnregistrementInexistant("L'armateur auquel vous faites référence n'existe pas");
                }

                var matchedAcconier = (from acc in dcAcc.GetTable<ACCONIER>()
                                       where acc.IdAcc == idAcc
                                       select acc).SingleOrDefault<ACCONIER>();

                if (matchedAcconier == null)
                {
                    throw new EnregistrementInexistant("L'acconier auquel vous faites référence n'existe pas");
                }

                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.NumEsc == numEsc
                                     select esc).SingleOrDefault<ESCALE>();

                if (matchedEscale != null)
                {
                    throw new EscaleException("Ce numéro d'escale a déjà été attribué au voyage " + matchedEscale.NumVoySCR + " à la date du " + matchedEscale.DCEsc);
                }

                // Création de l'escale
                ESCALE escale = new ESCALE();

                escale.NumEsc = numEsc;
                escale.NumVoySCR = numVoySCR;
                escale.NumVoyDIT = numVoyDIT;
                escale.NomCpt = nomCpt;
                escale.DDEsc = dateDepart;
                escale.DPAEsc = datePrevArr;
                escale.DCEsc = DateTime.Now;
                escale.NbrePManEsc = nbPrevMan;
                escale.RGPEsc = roleGesParc;
                escale.RCEsc = roleCons;
                escale.RREsc = roleRep;
                escale.RAEsc = roleAcc;
                escale.AIEsc = autresInfos;
                escale.IdNav = idNav;
                escale.IdAcc = idAcc;
                escale.NumManifestSydonia = numSydonia;
                escale.IdArm = idArm;
                escale.SOP = "O";
                escale.StatEsc = "En cours";

                dcAcc.ESCALE.InsertOnSubmit(escale);
                dcAcc.ESCALE.Context.SubmitChanges();

                // Insertion des éléments liés au statut de l'escale
                List<TYPE_OPERATION> typeOpEsc = (from type in dcAcc.GetTable<TYPE_OPERATION>()
                                                  where type.EltTypeOp == "E"
                                                  select type).ToList<TYPE_OPERATION>();

                foreach (TYPE_OPERATION typeOp in typeOpEsc)
                {
                    OPERATION_ESCALE opEsc = new OPERATION_ESCALE();
                    opEsc.IdEsc = escale.IdEsc;
                    opEsc.IdTypeOp = typeOp.IdTypeOp;
                    dcAcc.OPERATION_ESCALE.InsertOnSubmit(opEsc);
                }
                dcAcc.OPERATION_ESCALE.Context.SubmitChanges();

                transaction.Complete();
                return escale;
            }
        }

        
        /// <summary>
        /// MAJ escale avec date d'arrivée réelle
        /// </summary>
        /// <param name="idEsc"></param>
        /// <param name="numEsc"></param>
        /// <param name="numVoySCR"></param>
        /// <param name="numVoyDIT"></param>
        /// <param name="nomCpt"></param>
        /// <param name="dateDepart"></param>
        /// <param name="datePrevArr"></param>
        /// <param name="dateEffArr"></param>
        /// <param name="dateDech"></param>
        /// <param name="numSydonia"></param>
        /// <param name="nbPrevMan"></param>
        /// <param name="roleGesParc"></param>
        /// <param name="roleRep"></param>
        /// <param name="roleAcc"></param>
        /// <param name="roleCons"></param>
        /// <param name="autresInfos"></param>
        /// <param name="idNav"></param>
        /// <param name="idArm"></param>
        /// <param name="idAcc"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public ESCALE UpdateEscale(int idEsc, int numEsc, string numVoySCR, string numVoyDIT, string nomCpt, DateTime dateDepart, DateTime datePrevArr, DateTime dateEffArr, DateTime dateDech, string numSydonia, short nbPrevMan, string roleGesParc, string roleRep, string roleAcc, string roleCons, string autresInfos, int idNav, int idArm, int idAcc, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).SingleOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Escale : Modification des informations sur un élément existant").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour une escale. Veuillez contacter un administrateur");
                }

                var matchedNavire = (from nav in dcAcc.GetTable<NAVIRE>()
                                     where nav.IdNav == idNav
                                     select nav).SingleOrDefault<NAVIRE>();

                if (matchedNavire == null)
                {
                    throw new EnregistrementInexistant("Le navire auquel vous faites référence n'existe pas");
                }

                var matchedArmateur = (from arm in dcAcc.GetTable<ARMATEUR>()
                                       where arm.IdArm == idArm
                                       select arm).SingleOrDefault<ARMATEUR>();

                if (matchedArmateur == null)
                {
                    throw new EnregistrementInexistant("L'armateur auquel vous faites référence n'existe pas");
                }

                var matchedAcconier = (from acc in dcAcc.GetTable<ACCONIER>()
                                       where acc.IdAcc == idAcc
                                       select acc).SingleOrDefault<ACCONIER>();

                if (matchedAcconier == null)
                {
                    throw new EnregistrementInexistant("L'acconier auquel vous faites référence n'existe pas");
                }

                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.IdEsc == idEsc
                                     select esc).FirstOrDefault<ESCALE>();

                if (matchedEscale == null)
                {
                    throw new EnregistrementInexistant("L'escale à laquelle vous faites référence n'existe pas");
                }

                // Vérification qu'il n'existe pas d'autre escale portant le même numéro d'escale : cas de mise à jour du numéro de voyage
                var escaleExist = (from esc in dcAcc.GetTable<ESCALE>()
                                   where esc.NumEsc == numEsc && esc.IdEsc != idEsc
                                   select esc).FirstOrDefault<ESCALE>();

                if (escaleExist != null)
                {
                    throw new EscaleException("Ce numéro d'escale a déjà été attribué au voyage " + escaleExist.NumVoySCR + " à la date du " + escaleExist.DCEsc);
                }

                // Mise à jour de l'escale
                matchedEscale.NumVoySCR = numVoySCR;
                matchedEscale.NumVoyDIT = numVoyDIT;
                matchedEscale.NumEsc = numEsc;
                matchedEscale.NomCpt = nomCpt;
                matchedEscale.DDEsc = dateDepart;
                matchedEscale.DPAEsc = datePrevArr;
                matchedEscale.DRAEsc = dateEffArr;
                matchedEscale.DDechEsc = dateDech;
                matchedEscale.NbrePManEsc = nbPrevMan;
                matchedEscale.RGPEsc = roleGesParc;
                matchedEscale.RCEsc = roleCons;
                matchedEscale.RREsc = roleRep;
                matchedEscale.RAEsc = roleAcc;
                matchedEscale.AIEsc = autresInfos;
                matchedEscale.IdNav = idNav;
                matchedEscale.IdAcc = idAcc;
                matchedEscale.IdArm = idArm;
                matchedEscale.NumManifestSydonia = numSydonia;

                dcAcc.ESCALE.Context.SubmitChanges();

                // Mise à jour des éléments du Summary of Operations
                List<OPERATION_ARMATEUR> listOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                                      where opArm.IdEsc == matchedEscale.IdEsc
                                                      select opArm).ToList<OPERATION_ARMATEUR>();

                if (listOpArm != null && listOpArm.Count(op => !op.Poids.HasValue && !op.Volume.HasValue && !op.QTE.HasValue) == listOpArm.Count)
                {
                    dcAcc.OPERATION_ARMATEUR.DeleteAllOnSubmit<OPERATION_ARMATEUR>(listOpArm);
                    dcAcc.OPERATION_ARMATEUR.Context.SubmitChanges();

                    List<TYPE_OPERATION> typeOpArm = (from type in dcAcc.GetTable<TYPE_OPERATION>()
                                                      where type.EltTypeOp == "A" && type.IdArm == matchedEscale.IdArm
                                                      select type).ToList<TYPE_OPERATION>();

                    foreach (TYPE_OPERATION typeOp in typeOpArm)
                    {
                        OPERATION_ARMATEUR opArm = new OPERATION_ARMATEUR();
                        opArm.IdEsc = matchedEscale.IdEsc;
                        opArm.IdTypeOp = typeOp.IdTypeOp;
                        dcAcc.OPERATION_ARMATEUR.InsertOnSubmit(opArm);
                    }
                    dcAcc.OPERATION_ARMATEUR.Context.SubmitChanges();
                }
                
                
                //if (listOpArm.Count == 0)
                //{
                //    List<TYPE_OPERATION> typeOpArm = (from type in dcAcc.GetTable<TYPE_OPERATION>()
                //                                      where type.EltTypeOp == "A" && type.IdArm == matchedEscale.IdArm
                //                                      select type).ToList<TYPE_OPERATION>();

                //    foreach (TYPE_OPERATION typeOp in typeOpArm)
                //    {
                //        OPERATION_ARMATEUR opArm = new OPERATION_ARMATEUR();
                //        opArm.IdEsc = matchedEscale.IdEsc;
                //        opArm.IdTypeOp = typeOp.IdTypeOp;
                //        dcAcc.OPERATION_ARMATEUR.InsertOnSubmit(opArm);
                //    }
                //    dcAcc.OPERATION_ARMATEUR.Context.SubmitChanges();
                //}

                // Les lignes de facturation armateur sont calculées pour les escales dont Socomar est acconier
                if (matchedEscale.RAEsc == "Y")
                {
                    //si armateur grimaldi 
                    if (matchedEscale.IdArm == 1)
                    {
                        // Mise à jour de l'élément de facturation armateur Agency Fees
                        DateTime dte = DateTime.Now;

                        /*AH ARTICLE articleAgencyFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                     from par in dcAcc.GetTable<PARAMETRE>()
                                                     where art.CodeArticle == par.CodeAF && par.NomAF == "Agency fees"
                                                     select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleAgencyFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                     where art.CodeArticle == 2203
                                                     select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpAgencyFees = articleAgencyFees.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == idArm.ToString());

                        /*AH var matchedEltAgencyFees = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                    where ef.IdEsc == matchedEscale.IdEsc && ef.LibEF.Contains("Agency fees - Escale")
                                                    select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                        */
                        var matchedEltAgencyFees = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                    where ef.IdEsc == matchedEscale.IdEsc && ef.CodeArticle=="2203"
                                                    select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                        if (matchedEltAgencyFees != null)
                        {
                            matchedEltAgencyFees.DestEF = "A";
                            matchedEltAgencyFees.DateJEF = DateTime.Now;
                            matchedEltAgencyFees.CCArticle = articleAgencyFees.CCArticle;
                            matchedEltAgencyFees.CCCP = matchedEscale.ARMATEUR.CCArm;
                            matchedEltAgencyFees.EltFacture = "Arm";
                            matchedEltAgencyFees.LibEF = string.Format("{0} - Escale {1}", articleAgencyFees.LibArticle, matchedEscale.NumEsc); //AH "Agency fees - Escale " + matchedEscale.NumEsc;
                            matchedEltAgencyFees.IdLP = lpAgencyFees.IdLP;
                            matchedEltAgencyFees.PUEF = lpAgencyFees.PU1LP;
                            matchedEltAgencyFees.QTEEF = 1;
                            matchedEltAgencyFees.UnitEF = "U";
                            matchedEltAgencyFees.CodeTVA = articleAgencyFees.CodeTVA; //"TVAAP";
                            matchedEltAgencyFees.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleAgencyFees.CodeTVA).TauxTVA;

                            dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                        }
                        else
                        {
                            if (lpAgencyFees != null)
                            {
                                ELEMENT_FACTURATION eltAgencyFees = new ELEMENT_FACTURATION();

                                eltAgencyFees.DestEF = "A";
                                eltAgencyFees.StatutEF = "En cours";
                                eltAgencyFees.DateJEF = DateTime.Now;
                                eltAgencyFees.CCArticle = articleAgencyFees.CCArticle;
                                eltAgencyFees.CCCP = matchedEscale.ARMATEUR.CCArm;
                                eltAgencyFees.EltFacture = "Arm";
                                eltAgencyFees.LibEF = string.Format("{0} - Escale {1}", articleAgencyFees.LibArticle, matchedEscale.NumEsc); //AH "Agency fees - Escale " + matchedEscale.NumEsc;
                                eltAgencyFees.IdLP = lpAgencyFees.IdLP;
                                eltAgencyFees.PUEF = lpAgencyFees.PU1LP;
                                eltAgencyFees.IdEsc = matchedEscale.IdEsc;
                                eltAgencyFees.QTEEF = 1;
                                eltAgencyFees.UnitEF = "U";
                                eltAgencyFees.CodeTVA = articleAgencyFees.CodeTVA; //"TVAAP";
                                eltAgencyFees.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleAgencyFees.CodeTVA).TauxTVA;

                                dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltAgencyFees);
                                dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                            }
                        }

                        // ISPS
                       /*AH ARTICLE articleISPSFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                   from par in dcAcc.GetTable<PARAMETRE>()
                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "ISPS Security fees"
                                                   select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleISPSFees = (from art in dcAcc.GetTable<ARTICLE>()
                                                   where art.CodeArticle == 2204
                                                   select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpISPSFees = articleISPSFees.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == idArm.ToString());

                        var matchedEltISPSFees = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                  where ef.IdEsc == matchedEscale.IdEsc && ef.CodeArticle=="2204"
                                                  select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                        if (matchedEltISPSFees != null)
                        {
                            matchedEltISPSFees.DestEF = "A";
                            matchedEltISPSFees.DateJEF = DateTime.Now;
                            matchedEltISPSFees.CCArticle = articleISPSFees.CCArticle;
                            matchedEltISPSFees.CCCP = matchedEscale.ARMATEUR.CCArm;
                            matchedEltISPSFees.EltFacture = "Arm";
                            matchedEltISPSFees.LibEF =string.Format("{0} - Escale {1}",articleISPSFees.LibArticle,matchedEscale.NumEsc); //AH "ISPS Security fees - Escale " + matchedEscale.NumEsc;
                            matchedEltISPSFees.IdLP = lpISPSFees.IdLP;
                            matchedEltISPSFees.PUEF = lpISPSFees.PU1LP;
                            matchedEltISPSFees.QTEEF = 1;
                            matchedEltISPSFees.UnitEF = "U";
                            matchedEltISPSFees.CodeTVA = articleISPSFees.CodeTVA;//"TVAAP";
                            matchedEltISPSFees.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleISPSFees.CodeTVA).TauxTVA;

                            dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                        }
                        else
                        {
                            if (lpISPSFees != null)
                            {
                                ELEMENT_FACTURATION eltISPSFees = new ELEMENT_FACTURATION();

                                eltISPSFees.DestEF = "A";
                                eltISPSFees.StatutEF = "En cours";
                                eltISPSFees.DateJEF = DateTime.Now;
                                eltISPSFees.CCArticle = articleISPSFees.CCArticle;
                                eltISPSFees.CCCP = matchedEscale.ARMATEUR.CCArm;
                                eltISPSFees.EltFacture = "Arm";
                                eltISPSFees.LibEF = string.Format("{0} - Escale {1}", articleISPSFees.LibArticle, matchedEscale.NumEsc); //"ISPS Security fees - Escale " + matchedEscale.NumEsc;
                                eltISPSFees.IdLP = lpISPSFees.IdLP;
                                eltISPSFees.PUEF = lpISPSFees.PU1LP;
                                eltISPSFees.IdEsc = matchedEscale.IdEsc;
                                eltISPSFees.QTEEF = 1;
                                eltISPSFees.UnitEF = "U";
                                eltISPSFees.CodeTVA = articleISPSFees.CodeTVA; //"TVAAP";
                                eltISPSFees.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleISPSFees.CodeTVA).TauxTVA;

                                dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltISPSFees);
                                dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                            }
                        }
                    }
                    else if (matchedEscale.IdArm == 2)// || matchedEscale.IdArm == 24)
                    {
                        DateTime dte = DateTime.Now;

                       /*AH ARTICLE articleCommunication = (from art in dcAcc.GetTable<ARTICLE>()
                                                        from par in dcAcc.GetTable<PARAMETRE>()
                                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Reporting, communication, courrier services"
                                                        select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleCommunication = (from art in dcAcc.GetTable<ARTICLE>() where art.CodeArticle == 2205
                                                        select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpCommunication = articleCommunication.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == matchedEscale.IdArm.ToString());

                        var matchedEltCommunication = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                       where ef.IdEsc == matchedEscale.IdEsc && ef.CodeArticle == "2205"
                                                       select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                        if (matchedEltCommunication != null)
                        {
                            matchedEltCommunication.DestEF = "A";
                            matchedEltCommunication.DateJEF = DateTime.Now;
                            matchedEltCommunication.CCArticle = articleCommunication.CCArticle;
                            matchedEltCommunication.CCCP = matchedEscale.ARMATEUR.CCArm;
                            matchedEltCommunication.EltFacture = "Arm";
                            matchedEltCommunication.LibEF = string.Format("{0} - Escale {1}", articleCommunication.LibArticle, matchedEscale.NumEsc); //AH "Reporting, communication, courrier services - Escale " + matchedEscale.NumEsc;
                            matchedEltCommunication.IdLP = lpCommunication.IdLP;
                            matchedEltCommunication.PUEF = lpCommunication.PU1LP;
                            matchedEltCommunication.QTEEF = 1;
                            matchedEltCommunication.UnitEF = "U";
                            matchedEltCommunication.CodeTVA = articleCommunication.CodeTVA; //"TVAAP";
                            matchedEltCommunication.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleCommunication.CodeTVA).TauxTVA;

                            dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                        }
                        else
                        {
                            if (lpCommunication != null)
                            {
                                ELEMENT_FACTURATION eltCommunication = new ELEMENT_FACTURATION();

                                eltCommunication.DestEF = "A";
                                eltCommunication.StatutEF = "En cours";
                                eltCommunication.DateJEF = DateTime.Now;
                                eltCommunication.CCArticle = articleCommunication.CCArticle;
                                eltCommunication.CCCP = matchedEscale.ARMATEUR.CCArm;
                                eltCommunication.EltFacture = "Arm";
                                eltCommunication.LibEF = string.Format("{0} - Escale {1}", articleCommunication.LibArticle, matchedEscale.NumEsc);
                                eltCommunication.IdLP = lpCommunication.IdLP;
                                eltCommunication.PUEF = lpCommunication.PU1LP;
                                eltCommunication.IdEsc = matchedEscale.IdEsc;
                                eltCommunication.QTEEF = 1;
                                eltCommunication.UnitEF = "U";
                                eltCommunication.CodeTVA = articleCommunication.CodeTVA; //"TVAAP";
                                eltCommunication.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == articleCommunication.CodeTVA).TauxTVA;

                                dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltCommunication);
                                dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                            }
                        }
                    }
                }

                // Mise à jour des dates de fin de séjour et de fin de franchise de tous les véhicules de l'escale
                foreach (VEHICULE v in matchedEscale.VEHICULE)
                {
                    var matchedVeh = (from veh in dcAcc.GetTable<VEHICULE>()
                                      where veh.IdVeh == v.IdVeh && !veh.FSVeh.HasValue
                                      select veh).SingleOrDefault<VEHICULE>();

                    if (matchedVeh != null)
                    {
                        matchedVeh.FFVeh = v.ESCALE.DRAEsc.Value.AddDays(11);
                        matchedVeh.FSVeh = v.ESCALE.DRAEsc.Value.AddDays(11);
                    }
                }

                // Mise à jour des dates de fin de séjour, de fin de franchise et des surestaries de tous les conteneurs de l'escale
                foreach (CONTENEUR c in matchedEscale.CONTENEUR)
                {
                    var matchedCtr = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                      where ctr.IdCtr == c.IdCtr && !ctr.FSCtr.HasValue
                                      select ctr).SingleOrDefault<CONTENEUR>();

                    if (matchedCtr != null)
                    {
                        matchedCtr.NbDet = matchedCtr.NbDet.HasValue ? matchedCtr.NbDet.Value : 2;
                        matchedCtr.FFCtr = c.ESCALE.DDechEsc.Value.AddDays(9);
                        matchedCtr.FSCtr = c.ESCALE.DDechEsc.Value.AddDays(9);
                        matchedCtr.FFSCtr = ((Int32)c.ESCALE.DDechEsc.Value.DayOfWeek) > 2 ? c.ESCALE.DDechEsc.Value.AddDays(11) : c.ESCALE.DDechEsc.Value.AddDays(10);
                    }
                }

                // Mise à jour des dates de fin de séjour, de fin de franchise et des surestaries de tous les mafis de l'escale
                foreach (MAFI m in matchedEscale.MAFI)
                {
                    var matchedMafi = (from ctr in dcAcc.GetTable<MAFI>()
                                      where ctr.IdMafi == m.IdMafi && !ctr.FSMafi.HasValue
                                      select ctr).SingleOrDefault<MAFI>();

                    if (matchedMafi != null)
                    {
                        matchedMafi.FFMafi = m.ESCALE.DDechEsc.Value.AddDays(10);
                        matchedMafi.FSMafi = m.ESCALE.DDechEsc.Value.AddDays(10);
                        matchedMafi.FFSMafi = m.ESCALE.DDechEsc.Value.AddDays(11);
                    }
                }

                // Mise à jour des dates de fin de séjour et de fin de franchise de tous les conventionnels de l'escale
                foreach (CONVENTIONNEL c in matchedEscale.CONVENTIONNEL)
                {
                    var matchedConv = (from conv in dcAcc.GetTable<CONVENTIONNEL>()
                                       where conv.IdGC == c.IdGC && !conv.FSGC.HasValue
                                       select conv).SingleOrDefault<CONVENTIONNEL>();

                    if (matchedConv != null)
                    {
                        matchedConv.FFGC = c.ESCALE.DRAEsc.Value.AddDays(11);
                        matchedConv.FSGC = c.ESCALE.DRAEsc.Value.AddDays(11);
                    }
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedEscale;
            }
        }
         
        /// <summary>
        /// MAJ sans date d'arrivée réelle : pas de mise à jour liée à l'armateur
        /// </summary>
        /// <param name="idEsc"></param>
        /// <param name="numEsc"></param>
        /// <param name="numVoySCR"></param>
        /// <param name="numVoyDIT"></param>
        /// <param name="nomCpt"></param>
        /// <param name="dateDepart"></param>
        /// <param name="datePrevArr"></param>
        /// <param name="numSydonia"></param>
        /// <param name="nbPrevMan"></param>
        /// <param name="roleGesParc"></param>
        /// <param name="roleRep"></param>
        /// <param name="roleAcc"></param>
        /// <param name="roleCons"></param>
        /// <param name="autresInfos"></param>
        /// <param name="idNav"></param>
        /// <param name="idArm"></param>
        /// <param name="idAcc"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public ESCALE UpdateEscale(int idEsc, int numEsc, string numVoySCR, string numVoyDIT, string nomCpt, DateTime dateDepart, DateTime datePrevArr, string numSydonia, short nbPrevMan, string roleGesParc, string roleRep, string roleAcc, string roleCons, string autresInfos, int idNav, int idArm, int idAcc, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).SingleOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Escale : Modification des informations sur un élément existant").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour une escale. Veuillez contacter un administrateur");
                }

                var matchedNavire = (from nav in dcAcc.GetTable<NAVIRE>()
                                     where nav.IdNav == idNav
                                     select nav).SingleOrDefault<NAVIRE>();

                if (matchedNavire == null)
                {
                    throw new EnregistrementInexistant("Le navire auquel vous faites référence n'existe pas");
                }

                var matchedArmateur = (from arm in dcAcc.GetTable<ARMATEUR>()
                                       where arm.IdArm == idArm
                                       select arm).SingleOrDefault<ARMATEUR>();

                if (matchedArmateur == null)
                {
                    throw new EnregistrementInexistant("L'armateur auquel vous faites référence n'existe pas");
                }

                var matchedAcconier = (from acc in dcAcc.GetTable<ACCONIER>()
                                       where acc.IdAcc == idAcc
                                       select acc).SingleOrDefault<ACCONIER>();

                if (matchedAcconier == null)
                {
                    throw new EnregistrementInexistant("L'acconier auquel vous faites référence n'existe pas");
                }

                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.IdEsc == idEsc
                                     select esc).FirstOrDefault<ESCALE>();

                if (matchedEscale == null)
                {
                    throw new EnregistrementInexistant("L'escale à laquelle vous faites référence n'existe pas");
                }

                // Vérification qu'il n'existe pas d'autre escale portant le même numéro d'escale : cas de mise à jour du numéro de voyage
                var escaleExist = (from esc in dcAcc.GetTable<ESCALE>()
                                   where esc.NumEsc == numEsc && esc.IdEsc != idEsc
                                   select esc).FirstOrDefault<ESCALE>();

                if (escaleExist != null)
                {
                    throw new EscaleException("Ce numéro d'escale a déjà été attribué au voyage " + escaleExist.NumVoySCR + " à la date du " + escaleExist.DCEsc);
                }

                matchedEscale.NumVoySCR = numVoySCR;
                matchedEscale.NumVoyDIT = numVoyDIT;
                matchedEscale.NumEsc = numEsc;
                matchedEscale.NomCpt = nomCpt;
                matchedEscale.DDEsc = dateDepart;
                matchedEscale.DPAEsc = datePrevArr;
                matchedEscale.NbrePManEsc = nbPrevMan;
                matchedEscale.RGPEsc = roleGesParc;
                matchedEscale.RCEsc = roleCons;
                matchedEscale.RREsc = roleRep;
                matchedEscale.RAEsc = roleAcc;
                matchedEscale.AIEsc = autresInfos;
                matchedEscale.IdNav = idNav;
                matchedEscale.IdAcc = idAcc;
                matchedEscale.IdArm = idArm;
                matchedEscale.NumManifestSydonia = numSydonia;

                dcAcc.ESCALE.Context.SubmitChanges();
                transaction.Complete();
                return matchedEscale;
            }
        }

        /// <summary>
        /// cloture SOP
        /// </summary>
        /// <param name="idEsc"></param>
        /// <param name="sailingDate"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public ESCALE CloturerSummaryOperations(int idEsc, DateTime sailingDate, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.IdEsc == idEsc
                                     select esc).FirstOrDefault<ESCALE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Escale : Clôture Summary of Operations").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour le summary of operations. Veuillez contacter un administrateur");
                }

                if (matchedEscale == null)
                {
                    throw new EnregistrementInexistant("Escale inexistante");
                }

                if (!matchedEscale.DRAEsc.HasValue)
                {
                    throw new ApplicationException("Echec de la clôture : Le navire n'est pas encore arrivé");
                }

                if (matchedEscale.SOP == "C")
                {
                    throw new ApplicationException("Le summary of operations est déjà clôturé sur cette escale");
                }

                matchedEscale.SOP = "C";
                matchedEscale.SailingDate = sailingDate;

                if (matchedEscale.RAEsc == "Y")
                {
                    // Mise à jour de l'élément de facturation stevedoring operations
                    DateTime dte = DateTime.Now;
                     

                   VsomParameters vsparam = new VsomParameters(dcAcc);
                   foreach (OPERATION_ARMATEUR opArm in vsparam.GetOperationArmOfEscale(matchedEscale.IdEsc).Where(op => op.QTE.HasValue))
                    {

                        //ARTICLE articleStevedoringOperations = (from art in dcAcc.GetTable<ARTICLE>()
                        //                                        from par in dcAcc.GetTable<PARAMETRE>()
                        //                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Stevedoring operations"
                        //                                        select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpArticleStevedoring = vsparam.GetLignePrixOpArm(matchedEscale.IdArm.Value, opArm.IdTypeOp);

                        ELEMENT_FACTURATION eltStevedoringOperations = new ELEMENT_FACTURATION();

                        eltStevedoringOperations.DestEF = "A";
                        eltStevedoringOperations.StatutEF = "En cours";
                        eltStevedoringOperations.DateJEF = DateTime.Now;
                        eltStevedoringOperations.CCArticle = lpArticleStevedoring.ARTICLE.CCArticle;
                        eltStevedoringOperations.CCCP = matchedEscale.ARMATEUR.CCArm;
                        eltStevedoringOperations.EltFacture = lpArticleStevedoring.LP2;
                        eltStevedoringOperations.LibEF = "SOP : " + lpArticleStevedoring.ARTICLE.LibArticle + "- Escale - " + matchedEscale.NumEsc; //AH "SOP : " + lpArticleStevedoring.DescLP + "- Escale - " + matchedEscale.NumEsc;
                        eltStevedoringOperations.IdLP = lpArticleStevedoring.IdLP;
                        eltStevedoringOperations.CodeArticle = lpArticleStevedoring.ARTICLE.CodeArticle.ToString();

                        if (opArm.IdTypeOp == 164)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Volume.HasValue ? opArm.Volume.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 163)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Poids.HasValue ? opArm.Poids.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 105)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Poids.HasValue ? opArm.Poids.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 106)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Poids.HasValue ? opArm.Poids.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 224)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Volume.HasValue ? opArm.Volume.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 225)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Volume.HasValue ? opArm.Volume.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 234)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Poids.HasValue ? opArm.Poids.Value : 0;
                        }
                        else if (opArm.IdTypeOp == 259)
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.Poids.HasValue ? opArm.Poids.Value : 0;
                        }
                        else
                        {
                            eltStevedoringOperations.PUEF = lpArticleStevedoring.PU1LP;
                            eltStevedoringOperations.QTEEF = opArm.QTE.Value;
                        }

                        eltStevedoringOperations.IdEsc = matchedEscale.IdEsc;
                        //eltStevedoringOperations.QTEEF = 1;
                        eltStevedoringOperations.UnitEF = "U";
                        eltStevedoringOperations.CodeTVA = lpArticleStevedoring.ARTICLE.CodeTVA; //AH "TVAAP";
                        eltStevedoringOperations.TauxTVA = lpArticleStevedoring.ARTICLE.CODE_TVA.TauxTVA; //AH dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA;

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltStevedoringOperations);
                    }

                    //ARTICLE articleStevedoringOperations = (from art in dcAcc.GetTable<ARTICLE>()
                    //                                        from par in dcAcc.GetTable<PARAMETRE>()
                    //                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Stevedoring operations"
                    //                                        select art).FirstOrDefault<ARTICLE>();

                    //LIGNE_PRIX lpStevedoringOperations = articleStevedoringOperations.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    //ELEMENT_FACTURATION eltStevedoringOperations = new ELEMENT_FACTURATION();

                    //eltStevedoringOperations.DestEF = "A";
                    //eltStevedoringOperations.StatutEF = "En cours";
                    //eltStevedoringOperations.DateJEF = DateTime.Now;
                    //eltStevedoringOperations.CCArticle = articleStevedoringOperations.CCArticle;
                    //eltStevedoringOperations.CCCP = matchedEscale.ARMATEUR.CCArm;
                    //eltStevedoringOperations.EltFacture = "Arm";
                    //eltStevedoringOperations.LibEF = "Stevedoring operations - Escale - " + matchedEscale.NumEsc;
                    //eltStevedoringOperations.IdLP = lpStevedoringOperations.IdLP;
                    //eltStevedoringOperations.PUEF = GetOperationArmOfEscale(matchedEscale.IdEsc).Where(op => op.QTE.HasValue && op.IdTypeOp != 106 && op.IdTypeOp != 163 && op.IdTypeOp != 164).Sum(op => op.QTE * GetLignePrixOpArm(matchedEscale.IdArm.Value, op.IdTypeOp).PU1LP);
                    //eltStevedoringOperations.PUEF += GetOperationArmOfEscale(matchedEscale.IdEsc).Where(op => op.Volume.HasValue && op.IdTypeOp == 164).Sum(op => op.Volume * GetLignePrixOpArm(matchedEscale.IdArm.Value, op.IdTypeOp).PU1LP);
                    //eltStevedoringOperations.PUEF += GetOperationArmOfEscale(matchedEscale.IdEsc).Where(op => op.Poids.HasValue && (op.IdTypeOp == 106 || op.IdTypeOp == 163)).Sum(op => op.Poids * GetLignePrixOpArm(matchedEscale.IdArm.Value, op.IdTypeOp).PU1LP);
                    //eltStevedoringOperations.PUEF = Math.Round(eltStevedoringOperations.PUEF.Value, 0, MidpointRounding.AwayFromZero);
                    //eltStevedoringOperations.IdEsc = matchedEscale.IdEsc;
                    //eltStevedoringOperations.QTEEF = 1;
                    //eltStevedoringOperations.UnitEF = "U";
                    //eltStevedoringOperations.CodeTVA = "TVAAP";
                    //eltStevedoringOperations.TauxTVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA;

                    //dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltStevedoringOperations);
                    //dcAcc.ELEMENT_FACTURATION.Context.SubmitChanges();
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedEscale;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="idEsc"></param>
        /// <param name="eltFactureArmateur"></param>
        /// <param name="autresInfos"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public ESCALE FacturerArmateur(int idEsc, List<ElementFacturation> eltFactureArmateur, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.IdEsc == idEsc
                                     select esc).FirstOrDefault<ESCALE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Escale : Facturer Armateur").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour facturer l'armateur. Veuillez contacter un administrateur");
                }

                if (matchedEscale == null)
                {
                    throw new EnregistrementInexistant("Escale inexistante");
                }

                if (!matchedEscale.DRAEsc.HasValue)
                {
                    throw new ApplicationException("Echec de la clôture : Le navire n'est pas encore arrivé");
                }

                //if (matchedEscale.SOP != "C")
                //{
                //    throw new ApplicationException("Facturation de l'armateur impossible : Le summary of operations est n'est pas encore clôturé sur cette escale");
                //}

                DateTime datetime = DateTime.Today.AddDays(-4); DateTime today = DateTime.Today;
                matchedEscale.DateFArm = datetime;

                FACTURE_ARMATEUR factArm = new FACTURE_ARMATEUR();
                factArm.DCFArm = datetime;
                factArm.AIFArm = autresInfos;
                factArm.IdEsc = idEsc;
                factArm.IdU = idUser;
                factArm.MHT = Convert.ToInt32(eltFactureArmateur.Sum(elt => elt.MontantHT));
                factArm.MTVA = Convert.ToInt32(eltFactureArmateur.Sum(elt => elt.MontantTVA));
                factArm.MTTC = factArm.MHT + factArm.MTVA;

                dcAcc.GetTable<FACTURE_ARMATEUR>().InsertOnSubmit(factArm);

                dcAcc.SubmitChanges();

                foreach (ElementFacturation elt in eltFactureArmateur)
                {
                    LIGNE_FACTURE_ARMATEUR ligne = new LIGNE_FACTURE_ARMATEUR();
                    ligne.IdJEF = elt.IdElt;
                    ligne.IdFArm = factArm.IdFArm;
                    ligne.StatutLP = "O";

                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    matchedElt.StatutEF = "Facturé";
                    dcAcc.GetTable<LIGNE_FACTURE_ARMATEUR>().InsertOnSubmit(ligne);
                }

                factArm.IdDocSAP = factArm.IdFArm;

                dcAcc.SubmitChanges();

                //Intégration à SAP

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               where elt.IdEsc == matchedEscale.IdEsc && !elt.IdBL.HasValue
                                               select elt).ToList<ELEMENT_FACTURATION>();

                List<Int32> idJEFs = new List<int>();
                foreach (ElementFacturation e in eltFactureArmateur)
                {
                    idJEFs.Add(e.IdElt);
                }

                //List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                //                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                //                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                //                          orderby art.LibArticle ascending
                //                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                List<LigneEcriture> elts = (from eltFact in matchedElementsFactures.Where(el => idJEFs.Contains(el.IdJEF))
                                            select new LigneEcriture
                                            {
                                                CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                AccountCode = eltFact.CCArticle,
                                                CodeTVA = eltFact.CodeTVA,
                                                PrixUnitaire = Math.Round(eltFact.PUEF.Value, 3),
                                                Qte = eltFact.QTEEF.Value
                                            }).ToList<LigneEcriture>();

                //foreach(ELEMENT_FACTURATION elt in matchedElementsFactures.Where(el => idJEFs.Contains(el.IdJEF)))
                //{
                //    elt.StatutEF = "Facturé";
                //}

                //appel de la methode sap 
                string date = matchedEscale.DateFArm.Value.Year.ToString() + "-" + FormatChiffre(matchedEscale.DateFArm.Value.Month) + "-" + FormatChiffre(matchedEscale.DateFArm.Value.Day);
                
                #region arret integration SAP
                //string idDocSAP = (new VsomSAP()).FactureArmateur(elts, date, matchedEscale.ARMATEUR.CCArm.Trim(), matchedEscale.NumEsc.ToString());
                //int result;
                //int idFArm = Int32.TryParse(idDocSAP, out result) ? result : -1;


                //if (idFArm == -1)
                //{
                //    throw new ApplicationException("Echec du transfert des données à l'ERP");
                //}

                //factArm.IdDocSAP = idFArm; 
                #endregion

                //element detail facture armateur
                List<TRANSACTIONS> _listTrans = new List<TRANSACTIONS>();
                foreach (LigneEcriture le in elts)
                {
                    _listTrans.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = "",
                        CMPTGEN = le.AccountCode,
                        CMPTTYP = "G",
                        CODE_TVA = le.CodeTVA ,
                        DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", datetime),
                        LIB = "Arm-" + matchedEscale.NumEsc+"-"+le.CodeArticle,
                        MONTANT = (le.PrixUnitaire * le.Qte).ToString(),
                        PAYMOD = "S",
                        REF = "FC"+factArm.IdDocSAP,
                        SENS = "C",
                        TAUX = le.CodeTVA == "TVAEX" ? "0" : "19,25",
                        TPIECE = "FC",
                        TYPE = "N"
                    });
                }
                //ecriture au debit du compte armateur
                _listTrans.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = matchedEscale.ARMATEUR.CCArm,
                    CMPTGEN = "4111104", 
                    CMPTTYP = "X",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "Arm-" + matchedEscale.NumEsc ,
                    MONTANT = factArm.MTTC.ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factArm.IdDocSAP,
                    SENS = "D",
                    TAUX = "0",
                    TPIECE = "FC",
                    TYPE = "N"
                });

                dcAcc.TRANSACTIONS.InsertAllOnSubmit(_listTrans);
                dcAcc.SubmitChanges();

                //StringBuilder sbNote = new StringBuilder();
                //foreach (ElementFacturation e in eltFactureArmateur)
                //{
                //    sbNote.Append(e.PrixUnitaire).Append("x").Append(e.Qte).Append(Environment.NewLine);
                //}

                NOTE noteValid = new NOTE();
                noteValid.IdEsc = matchedEscale.IdEsc;
                noteValid.DateNote =datetime;
                noteValid.IdU = idUser;
                noteValid.TitreNote = "Facture armateur N° " + factArm.IdDocSAP.ToString();
                noteValid.DescNote = autresInfos;

                dcAcc.NOTE.InsertOnSubmit(noteValid);

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedEscale;
            }
        }

        public ESCALE FacturerSocomar(int idesc, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedEsc = (from esc in dcAcc.GetTable<ESCALE>()
                                  where esc.IdEsc == idesc
                                  select esc).SingleOrDefault<ESCALE>();

                if (matchedEsc == null)
                {
                    throw new EnregistrementInexistant("L'escale à laquelle vous faites référence n'existe pas");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }
                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Escale : Facturer Armateur").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour facturer Socomar. Veuillez contacter un administrateur");
                }

                /*
                 * la facturation socomar consiste:  1-a recuperer les lignes SOP, agencess fees, isps et les porter au compte co390
                 * 2- ecrire sur le compte 4711106 les ligne SOP agencess fees et isps
                 */

                matchedEsc.FIntern = "Y";
                matchedEsc.IdUserFIntern = idUser;

                //recupère la liste des element de facturation de l'escale

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               where elt.IdEsc == matchedEsc.IdEsc && !elt.IdBL.HasValue
                                               select elt).ToList<ELEMENT_FACTURATION>();

                //filtre les element qui concerne la facturation socomar
                //on prend ici les element de facturation qui conserne uniquement les SOP, Export Freight, Agency Fee, et ISPS Security

                DateTime datetime = DateTime.Today; DateTime today = DateTime.Today;
                double _debit = 0; 

                #region facture socomar

                var elementFactureSocomar = (from elt in matchedElementsFactures.Where(el => (el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2201" ||
                                                                                                  (el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2202" &&
                                                                                                   el.LIGNE_PRIX.IdLP != 254 && el.LIGNE_PRIX.IdLP != 255 &&
                                                                                                   el.LIGNE_PRIX.IdLP != 273 && el.LIGNE_PRIX.IdLP != 274 &&
                                                                                                   el.LIGNE_PRIX.IdLP != 275 && el.LIGNE_PRIX.IdLP != 276) ||
                                                                                                   el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2203" ||
                                                                                                   el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2204"))
                                             select new ElementFacturation
                                             {
                                                 IdElt = elt.IdJEF,
                                                 CodeArticle = elt.LIGNE_PRIX.CodeArticle.Value,
                                                 LibArticle = elt.LibEF,
                                                 Qte = elt.QTEEF.Value,
                                                 Unite = elt.UnitEF,
                                                 PrixUnitaire = elt.PUEF.Value,
                                                 MontantHT = Math.Round(elt.PUEF.Value * elt.QTEEF.Value, 0, MidpointRounding.AwayFromZero),
                                                 MontantTVA = Math.Round((elt.PUEF * elt.QTEEF * elt.TauxTVA / 100).Value, 0, MidpointRounding.AwayFromZero),
                                                 MontantTTC = Math.Round((elt.PUEF * elt.QTEEF * (1 + elt.TauxTVA / 100)).Value, 0, MidpointRounding.AwayFromZero),
                                                 IsProforma = elt.LIGNE_PROFORMA.Count != 0 ? true : false,
                                                 IsFacture = elt.IdFD != null ? true : false,
                                                 IsNew = (elt.LIGNE_PROFORMA.Count == 0 && elt.IdFD == null) ? true : false,
                                                 Statut = elt.StatutEF
                                             }).ToList<ElementFacturation>();


                /*var elementFactureSocomarold = (from elt in matchedElementsFactures.Where(el => (el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2201" ||
                                                                                             el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2202"  ||
                                                                                           el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2203" ||
                                                                                           el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2204"))
                                             select new ElementFacturation
                                             {
                                                 IdElt = elt.IdJEF,
                                                 CodeArticle = elt.LIGNE_PRIX.CodeArticle.Value,
                                                 LibArticle = elt.LibEF,
                                                 Qte = elt.QTEEF.Value,
                                                 Unite = elt.UnitEF,
                                                 PrixUnitaire = elt.PUEF.Value,
                                                 MontantHT = Math.Round(elt.PUEF.Value * elt.QTEEF.Value, 0, MidpointRounding.AwayFromZero),
                                                 MontantTVA = Math.Round((elt.PUEF * elt.QTEEF * elt.TauxTVA / 100).Value, 0, MidpointRounding.AwayFromZero),
                                                 MontantTTC = Math.Round((elt.PUEF * elt.QTEEF * (1 + elt.TauxTVA / 100)).Value, 0, MidpointRounding.AwayFromZero),
                                                 IsProforma = elt.LIGNE_PROFORMA.Count != 0 ? true : false,
                                                 IsFacture = elt.IdFD != null ? true : false,
                                                 IsNew = (elt.LIGNE_PROFORMA.Count == 0 && elt.IdFD == null) ? true : false,
                                                 Statut = elt.StatutEF
                                             }).ToList<ElementFacturation>();*/


                //enregistrement de la facture et des details factures socomar

                FACTURE_SOCOMAR factSoc = new FACTURE_SOCOMAR();
                factSoc.DCFSoc = datetime;
                factSoc.AIFSoc = "";
                factSoc.IdEsc = idesc;
                factSoc.IdU = idUser;
                factSoc.MHT = Convert.ToInt32(elementFactureSocomar.Sum(elt => elt.MontantHT));
                factSoc.MTVA = Convert.ToInt32(elementFactureSocomar.Sum(elt => elt.MontantTVA));
                factSoc.MTTC = factSoc.MHT + factSoc.MTVA;
                factSoc.Statut = "En cours";
                factSoc.FType = "Socomar";
                dcAcc.GetTable<FACTURE_SOCOMAR>().InsertOnSubmit(factSoc);

                dcAcc.SubmitChanges();


                foreach (ElementFacturation elt in elementFactureSocomar)
                {
                    LIGNE_FACTURE_SOCOMAR ligne = new LIGNE_FACTURE_SOCOMAR();
                    ligne.IdJEF = elt.IdElt;
                    ligne.IdFSoc = factSoc.IdFSoc;
                    ligne.Statut = "O";

                    #region enregistrement element de facturation
                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    matchedElt.StatutEF = "Facturé";
                    #endregion

                    dcAcc.GetTable<LIGNE_FACTURE_SOCOMAR>().InsertOnSubmit(ligne);
                }

                //enregistrement ligne de facturation de la facture 
                var articl = (from m in dcAcc.GetTable<ARTICLE>() where m.CodeArticle.ToString() == "2206" select m).SingleOrDefault<ARTICLE>();

                if (articl == null)
                {
                    throw new EnregistrementInexistant("Aucun article associé à cette opération n'est trouvé.");
                }

                ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                eltFact.CCArticle = "4711106";//lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                eltFact.CodeTVA = "TVAEX";
                eltFact.TauxTVA = 0;//lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                eltFact.CCCP = matchedEsc.ARMATEUR.CCArm; //lg.ORDRE_SERVICE.ESCALE.ARMATEUR.CCArm;
                eltFact.EltFacture = "Arm";
                eltFact.LibEF = articl.LibArticle + " - Escale N°" + matchedEsc.NumEsc;
                eltFact.DateJEF = datetime; //DateTime.Now;
                eltFact.IdLP = articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                eltFact.QTEEF = 1; //Math.Round(lg.QLS.Value, 3);
                eltFact.UnitEF = "u";
                eltFact.PUEF = factSoc.MTTC;

                eltFact.IdEsc = matchedEsc.IdEsc;
                //eltFact.IdOS = lg.IdOS;
                eltFact.DestEF = "A";
                eltFact.StatutEF = "En cours";

                eltFact.IdFSoc = factSoc.IdFSoc;

                dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);

                //dcAcc.SubmitChanges();

                factSoc.IdDocSAP = factSoc.IdFSoc;
                //eltFact.IdFSoc = factSoc.IdFSoc;

                dcAcc.SubmitChanges();

                //Intégration à SAP  

                List<LigneEcriture> elts = new List<LigneEcriture>();
                var elementFactureSocomar2 = (from elt in matchedElementsFactures.Where(el => (el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2201" ||
                                                                                          (el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2202" &&
                                                                                           el.LIGNE_PRIX.IdLP != 254 && el.LIGNE_PRIX.IdLP != 255 &&
                                                                                           el.LIGNE_PRIX.IdLP != 273 && el.LIGNE_PRIX.IdLP != 274 &&
                                                                                           el.LIGNE_PRIX.IdLP != 275 && el.LIGNE_PRIX.IdLP != 276) ||
                                                                                           el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2203" ||
                                                                                           el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2204"))
                                              select elt).ToList<ELEMENT_FACTURATION>();
                foreach (ELEMENT_FACTURATION elt in elementFactureSocomar2)
                {
                    LigneEcriture le = new LigneEcriture();

                    le.CodeArticle = elt.LIGNE_PRIX.CodeArticle.Value;
                    le.AccountCode = elt.CCArticle;
                    le.CodeTVA = elt.CodeTVA;
                    le.PrixUnitaire = Math.Round(elt.PUEF.Value, 3);
                    le.Qte = elt.QTEEF.Value;
                    elts.Add(le);
                }

                // string date = DateTime.Now.Year.ToString() + "-" + FormatChiffre(DateTime.Now.Month) + "-" + FormatChiffre(DateTime.Now.Day);


                //appel de la methode erp
                //AH ARRET INTEGRATION SAP int idFSoc = (new VsomSAP()).FactureSOCOMAR(date, matchedEsc.NumEsc.ToString(),elts);

                //ECRITURE DANS TRANSACTIONS pour SAGE
                List<TRANSACTIONS> _lstTrans = new List<TRANSACTIONS>();
                //cree les ligneecriture de agency fees et isps et (export freight)
                foreach (LigneEcriture ligne in elts.Where(l => l.CodeArticle != 2202))
                {
                    _lstTrans.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = "",
                        CMPTGEN = ligne.AccountCode,
                        CMPTTYP = "G",
                        CODE_TVA = ligne.CodeTVA,
                        DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", datetime),
                        LIB = "SOC-" + matchedEsc.NumEsc,
                        MONTANT = Math.Round((ligne.Qte * ligne.PrixUnitaire), 0, MidpointRounding.AwayFromZero).ToString(),
                        PAYMOD = "S",
                        REF = "FC" + factSoc.IdFSoc,
                        SENS = "C",
                        TAUX = ligne.CodeTVA == "TVAAP" ? "19.25" : "0",
                        TPIECE = "FC",
                        TYPE = "N"
                    });

                }

                // cree une ligne pour les SOP
                if (elts.Count(e => e.CodeArticle == 2202) != 0)
                {

                    _lstTrans.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = "",
                        CMPTGEN = elts.FirstOrDefault(e => e.CodeArticle == 2202).AccountCode,
                        CMPTTYP = "G",
                        CODE_TVA = "TVAAP",
                        DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", datetime),
                        LIB = "SOC-" + matchedEsc.NumEsc + "-" + elts.FirstOrDefault(e => e.CodeArticle == 2202).CodeArticle.ToString(),
                        MONTANT = Math.Round(elts.Where(el => el.CodeArticle == 2202).Sum(e => e.PrixUnitaire * e.Qte), 0, MidpointRounding.AwayFromZero).ToString(),
                        PAYMOD = "S",
                        REF = "FC" + factSoc.IdFSoc,
                        SENS = "C",
                        TAUX = "19.25",
                        TPIECE = "FC",
                        TYPE = "N"
                    });
                }

                //ecriture debit au compte client
                _lstTrans.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = "C0390",
                    CMPTGEN = "4111100",
                    CMPTTYP = "X",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "SOC-" + matchedEsc.NumEsc,
                    MONTANT = factSoc.MTTC.ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factSoc.IdFSoc,
                    SENS = "D",
                    TAUX = null,
                    TPIECE = "FC",
                    TYPE = "N"
                });

                // contre ecriture comptable ecrit au credit de C0390 le montant de la facture et au debit de 4711106 le detail des element de la facture

                foreach (LigneEcriture ligne in elts)
                {
                    _debit += Math.Round(ligne.PrixUnitaire * ligne.Qte * ((ligne.CodeTVA == "TVAAP" || ligne.CodeTVA == "TVATI") ? 1.1925f : 1), 0, MidpointRounding.AwayFromZero);
                }
                _lstTrans.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = "",
                    CMPTGEN = "4711106",
                    CMPTTYP = "G",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "SOC-" + matchedEsc.NumEsc,
                    MONTANT = _debit.ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factSoc.IdFSoc,
                    SENS = "D",
                    TAUX = null,
                    TPIECE = "FC",
                    TYPE = "N"
                });
                _lstTrans.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = "C0390",
                    CMPTGEN = "4111100",
                    CMPTTYP = "X",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "SOC-" + matchedEsc.NumEsc,
                    MONTANT = elts.Sum(lg => Math.Round(lg.PrixUnitaire * lg.Qte * ((lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? 1.1925f : 1), 0, MidpointRounding.AwayFromZero)).ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factSoc.IdFSoc,
                    SENS = "C",
                    TAUX = null,
                    TPIECE = "FC",
                    TYPE = "N"
                });

                dcAcc.TRANSACTIONS.InsertAllOnSubmit(_lstTrans);
                //dcAcc.SubmitChanges();


                //NOTE noteValid = new NOTE();
                //noteValid.IdEsc = matchedEsc.IdEsc;
                //noteValid.DateNote = DateTime.Now;
                //noteValid.IdU = idUser;
                //noteValid.TitreNote = "Facture socomar N° " + idFSoc.ToString();
                //noteValid.DescNote = "";

                //dcAcc.NOTE.InsertOnSubmit(noteValid);

                dcAcc.SubmitChanges();
                #endregion

                _debit = 0; 

                #region facture compulsory

                var elementFactureCompulsory = (from elt in matchedElementsFactures.Where(el => (el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2202" &&
                                                                                           (el.LIGNE_PRIX.IdLP == 254 || el.LIGNE_PRIX.IdLP == 255 ||
                                                                                           el.LIGNE_PRIX.IdLP == 273 || el.LIGNE_PRIX.IdLP == 274 ||
                                                                                           el.LIGNE_PRIX.IdLP == 275 || el.LIGNE_PRIX.IdLP == 276 )))
                                             select new ElementFacturation
                                             {
                                                 IdElt = elt.IdJEF,
                                                 CodeArticle = elt.LIGNE_PRIX.CodeArticle.Value,
                                                 LibArticle = elt.LibEF,
                                                 Qte = elt.QTEEF.Value,
                                                 Unite = elt.UnitEF,
                                                 PrixUnitaire = elt.PUEF.Value,
                                                 MontantHT = Math.Round(elt.PUEF.Value * elt.QTEEF.Value, 0, MidpointRounding.AwayFromZero),
                                                 MontantTVA = Math.Round((elt.PUEF * elt.QTEEF * elt.TauxTVA / 100).Value, 0, MidpointRounding.AwayFromZero),
                                                 MontantTTC = Math.Round((elt.PUEF * elt.QTEEF * (1 + elt.TauxTVA / 100)).Value, 0, MidpointRounding.AwayFromZero),
                                                 IsProforma = elt.LIGNE_PROFORMA.Count != 0 ? true : false,
                                                 IsFacture = elt.IdFD != null ? true : false,
                                                 IsNew = (elt.LIGNE_PROFORMA.Count == 0 && elt.IdFD == null) ? true : false,
                                                 Statut = elt.StatutEF
                                             }).ToList<ElementFacturation>();
                 
                //enregistrement de la facture et des details factures compulsory

                FACTURE_SOCOMAR factComp = new FACTURE_SOCOMAR();
                factComp.DCFSoc = datetime;
                factComp.AIFSoc = "";
                factComp.IdEsc = idesc;
                factComp.IdU = idUser;
                factComp.MHT = Convert.ToInt32(elementFactureCompulsory.Sum(elt => elt.MontantHT));
                factComp.MTVA = Convert.ToInt32(elementFactureCompulsory.Sum(elt => elt.MontantTVA));
                factComp.MTTC = factComp.MHT + factComp.MTVA;
                factComp.Statut = "En cours";
                factComp.FType = "Compulsory";
                dcAcc.GetTable<FACTURE_SOCOMAR>().InsertOnSubmit(factComp);

                dcAcc.SubmitChanges();


                foreach (ElementFacturation elt in elementFactureCompulsory)
                {
                    LIGNE_FACTURE_SOCOMAR ligne = new LIGNE_FACTURE_SOCOMAR();
                    ligne.IdJEF = elt.IdElt;
                    ligne.IdFSoc = factComp.IdFSoc;
                    ligne.Statut = "O";

                    #region enregistrement element de facturation
                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    matchedElt.StatutEF = "Facturé";
                    #endregion

                    dcAcc.GetTable<LIGNE_FACTURE_SOCOMAR>().InsertOnSubmit(ligne);
                }

                //enregistrement ligne de facturation de la facture 
                var articlComp = (from m in dcAcc.GetTable<ARTICLE>() where m.CodeArticle.ToString() == "2207" select m).SingleOrDefault<ARTICLE>();

                if (articlComp == null)
                {
                    throw new EnregistrementInexistant("Aucun article associé à  l'opération Facture Compulsory n'est trouvé.");
                }

                ELEMENT_FACTURATION eltFactComp = new ELEMENT_FACTURATION();

                eltFactComp.CCArticle = "4711106";//lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                eltFactComp.CodeTVA = "TVAEX";
                eltFactComp.TauxTVA = 0;//lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                eltFactComp.CCCP = matchedEsc.ARMATEUR.CCArm; //lg.ORDRE_SERVICE.ESCALE.ARMATEUR.CCArm;
                eltFactComp.EltFacture = "Arm";
                eltFactComp.LibEF = articlComp.LibArticle + " - Escale N°" + matchedEsc.NumEsc;
                eltFactComp.DateJEF =datetime; //DateTime.Now;
                eltFactComp.IdLP = articlComp.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                eltFactComp.QTEEF = 1; //Math.Round(lg.QLS.Value, 3);
                eltFactComp.UnitEF = "u";
                eltFactComp.PUEF = factComp.MTTC;

                eltFactComp.IdEsc = matchedEsc.IdEsc;
                //eltFact.IdOS = lg.IdOS;
                eltFactComp.DestEF = "A";
                eltFactComp.StatutEF = "En cours";

                eltFactComp.IdFSoc = factComp.IdFSoc;

                dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFactComp);

                //dcAcc.SubmitChanges();

                factComp.IdDocSAP = factComp.IdFSoc;
                //eltFact.IdFSoc = factSoc.IdFSoc;

                dcAcc.SubmitChanges();

                //Intégration à SAP  

                List<LigneEcriture> eltsComp = new List<LigneEcriture>();
                var elementFactureSocomar2Comp = (from elt in matchedElementsFactures.Where(el => (
                                                                                          el.LIGNE_PRIX.CodeArticle.Value.ToString() == "2202" &&
                                                                                          ( el.LIGNE_PRIX.IdLP == 254 || el.LIGNE_PRIX.IdLP == 255 ||
                                                                                           el.LIGNE_PRIX.IdLP == 273 || el.LIGNE_PRIX.IdLP == 274 ||
                                                                                           el.LIGNE_PRIX.IdLP == 275 && el.LIGNE_PRIX.IdLP == 276) ))
                                              select elt).ToList<ELEMENT_FACTURATION>();
                foreach (ELEMENT_FACTURATION elt in elementFactureSocomar2Comp)
                {
                    LigneEcriture le = new LigneEcriture();

                    le.CodeArticle = elt.LIGNE_PRIX.CodeArticle.Value;
                    le.AccountCode = elt.CCArticle;
                    le.CodeTVA = elt.CodeTVA;
                    le.PrixUnitaire = Math.Round(elt.PUEF.Value, 3);
                    le.Qte = elt.QTEEF.Value;
                    eltsComp.Add(le);
                }

               // string date = DateTime.Now.Year.ToString() + "-" + FormatChiffre(DateTime.Now.Month) + "-" + FormatChiffre(DateTime.Now.Day);


                //appel de la methode erp
                //AH ARRET INTEGRATION SAP int idFSoc = (new VsomSAP()).FactureSOCOMAR(date, matchedEsc.NumEsc.ToString(),elts);

                //ECRITURE DANS TRANSACTIONS pour SAGE
                List<TRANSACTIONS> _lstTransComp = new List<TRANSACTIONS>();
                //cree les ligneecriture de agency fees et isps et (export freight)
                foreach (LigneEcriture ligne in eltsComp.Where(l => l.CodeArticle != 2202))
                {
                    _lstTransComp.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = "",
                        CMPTGEN = ligne.AccountCode,
                        CMPTTYP = "G",
                        CODE_TVA = ligne.CodeTVA,
                        DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", datetime),
                        LIB = "SOC-" + matchedEsc.NumEsc,
                        MONTANT = Math.Round((ligne.Qte * ligne.PrixUnitaire), 0, MidpointRounding.AwayFromZero).ToString(),
                        PAYMOD = "S",
                        REF = "FC" + factComp.IdFSoc,
                        SENS = "C",
                        TAUX = ligne.CodeTVA == "TVAAP" ? "19.25" : "0",
                        TPIECE = "FC",
                        TYPE = "N"
                    });

                }

                // cree une ligne pour les SOP
                if (eltsComp.Count(e => e.CodeArticle == 2202) != 0)
                {

                    _lstTransComp.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = "",
                        CMPTGEN = eltsComp.FirstOrDefault(e => e.CodeArticle == 2202).AccountCode,
                        CMPTTYP = "G",
                        CODE_TVA = "TVAAP",
                        DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", datetime),
                        LIB = "SOC-" + matchedEsc.NumEsc + "-" + eltsComp.FirstOrDefault(e => e.CodeArticle == 2202).CodeArticle.ToString(),
                        MONTANT = Math.Round(eltsComp.Where(el => el.CodeArticle == 2202).Sum(e => e.PrixUnitaire * e.Qte), 0, MidpointRounding.AwayFromZero).ToString(),
                        PAYMOD = "S",
                        REF = "FC" + factComp.IdFSoc,
                        SENS = "C",
                        TAUX = "19.25",
                        TPIECE = "FC",
                        TYPE = "N"
                    });
                }

                //ecriture debit au compte client
                _lstTransComp.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = "C0390",
                    CMPTGEN = "4111100",
                    CMPTTYP = "X",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "SOC-" + matchedEsc.NumEsc,
                    MONTANT = factComp.MTTC.ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factComp.IdFSoc,
                    SENS = "D",
                    TAUX = null,
                    TPIECE = "FC",
                    TYPE = "N"
                });

                // contre ecriture comptable ecrit au credit de C0390 le montant de la facture et au debit de 4711106 le detail des element de la facture
                 _debit = 0;
                 foreach (LigneEcriture ligne in eltsComp)
                {
                    _debit += Math.Round(ligne.PrixUnitaire * ligne.Qte * ((ligne.CodeTVA == "TVAAP" || ligne.CodeTVA == "TVATI") ? 1.1925f : 1), 0, MidpointRounding.AwayFromZero);
                }
                _lstTransComp.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = "",
                    CMPTGEN = "4711106",
                    CMPTTYP = "G",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "SOC-" + matchedEsc.NumEsc,
                    MONTANT = _debit.ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factComp.IdFSoc,
                    SENS = "D",
                    TAUX = null,
                    TPIECE = "FC",
                    TYPE = "N"
                });
                _lstTransComp.Add(new TRANSACTIONS
                {
                    CJ = "300",
                    CMPTAUX = "C0390",
                    CMPTGEN = "4111100",
                    CMPTTYP = "X",
                    CODE_TVA = null,
                    DATECH = string.Format("{0:ddMMyy}", datetime.AddDays(30)),
                    DPIECE = string.Format("{0:ddMMyy}", datetime),
                    LIB = "SOC-" + matchedEsc.NumEsc,
                    MONTANT = eltsComp.Sum(lg => Math.Round(lg.PrixUnitaire * lg.Qte * ((lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? 1.1925f : 1), 0, MidpointRounding.AwayFromZero)).ToString(),
                    PAYMOD = "S",
                    REF = "FC" + factComp.IdFSoc,
                    SENS = "C",
                    TAUX = null,
                    TPIECE = "FC",
                    TYPE = "N"
                });

                dcAcc.TRANSACTIONS.InsertAllOnSubmit(_lstTransComp); 
                dcAcc.SubmitChanges();
                #endregion

                transaction.Complete();
                return matchedEsc;
            }
        }

        #endregion

        #region Manifeste

      /// <summary>
      /// valide un manifesten met en place les element defacturaion (manut terre; prestation gestionnair parc auto, prest gest parc supplement volum chassi
      /// </summary>
      /// <param name="idMan"></param>
      /// <param name="infosValid"></param>
      /// <param name="idUser"></param>
      /// <returns></returns>
        public MANIFESTE ValiderManifeste(int idMan, string infosValid, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedManifeste = (from man in dcAcc.GetTable<MANIFESTE>()
                                        where man.IdMan == idMan
                                        select man).SingleOrDefault<MANIFESTE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Manifeste : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour valider un manifeste. Veuillez contacter un administrateur");
                }

                if (matchedManifeste == null)
                {
                    throw new EnregistrementInexistant("Le manifeste auquel vous faites référence n'existe pas");
                }

                //AH 17 juillet2016 oblige l'insertion du numero sydonia escal avant validation manifeste
               /* if (matchedManifeste.ESCALE.NumManifestSydonia.Length == 0)
                {
                    throw new ApplicationException("Le numéro SYDONIA de cet escale n'est pas disponible. Veuillez le renseigner préalablement.");
                }*/

                matchedManifeste.DVMan = DateTime.Now;

                if (infosValid.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdMan = matchedManifeste.IdMan;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = infosValid;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }


                if (matchedManifeste.ESCALE.ACCONIER.IdAcc == 1)
                {
                    matchedManifeste.StatutMan = "Initié";
                }
                else
                {
                    matchedManifeste.StatutMan = "Manifesté";
                }

                OPERATION_MANIFESTE matchedOpMan = (from op in dcAcc.GetTable<OPERATION_MANIFESTE>()
                                                    where op.IdMan == matchedManifeste.IdMan && op.IdTypeOp == 44
                                                    select op).SingleOrDefault<OPERATION_MANIFESTE>();

                matchedOpMan.DateOp = DateTime.Now;
                matchedOpMan.IdU = idUser;
                matchedOpMan.AIOp = "Manifeste initié";

                dcAcc.OPERATION_MANIFESTE.Context.SubmitChanges();

                OPERATION_ESCALE matchedOpEsc = (from op in dcAcc.GetTable<OPERATION_ESCALE>()
                                                 where op.IdEsc == matchedManifeste.IdEsc && op.IdTypeOp == 52
                                                 select op).SingleOrDefault<OPERATION_ESCALE>();

                matchedOpEsc.DateOp = DateTime.Now;
                matchedOpEsc.IdU = idUser;
                matchedOpEsc.AIOp = "Validé";

                dcAcc.OPERATION_ESCALE.Context.SubmitChanges();

                //selection des element de sinistre applicable a un conteneneur
                var typesSinCtr = (from type in dcAcc.GetTable<TYPE_SINISTRE>()
                                   where type.TypeMse == "C"
                                   orderby type.IdTypeSinistre ascending
                                   select type).ToList<TYPE_SINISTRE>();

                foreach (CONNAISSEMENT bl in matchedManifeste.CONNAISSEMENT)
                {
                    bl.StatutBL = "Initié";
                }
                foreach (VEHICULE veh in matchedManifeste.VEHICULE)
                {
                    veh.StatVeh = "Initié";
                }
                foreach (CONTENEUR cont in matchedManifeste.CONTENEUR)
                {
                    cont.StatCtr = "Initié";

                    foreach (TYPE_SINISTRE sin in typesSinCtr)
                    {
                        INTERCHANGE interchange = new INTERCHANGE();

                        interchange.IdCtr = cont.IdCtr;
                        interchange.IdTypeSinistre = sin.IdTypeSinistre;

                        dcAcc.GetTable<INTERCHANGE>().InsertOnSubmit(interchange);
                    }

                    // Création du conteneur TC

                    if(dcAcc.CONTENEUR_TC.FirstOrDefault<CONTENEUR_TC>(c => c.NumTC == cont.NumCtr && c.IdEscDébarquement == cont.IdEsc) == null)
                    {
                        CONTENEUR_TC ctrTC = new CONTENEUR_TC();

                        ctrTC.NumTC = cont.NumCtr;
                        ctrTC.TypeCtr = cont.TypeMCtr;
                        ctrTC.TypeCtr = ctrTC.TypeCtr.Replace("BX", "DV");
                        ctrTC.DateCréationTC = DateTime.Now;
                        ctrTC.IdEscDébarquement = cont.IdEsc;
                        ctrTC.IdBLDébarquement = cont.IdBL;
                        ctrTC.IdCtr = cont.IdCtr;
                        ctrTC.StatutTC = "Manifesté";
                        ctrTC.IsDoublon = "N";

                        dcAcc.GetTable<CONTENEUR_TC>().InsertOnSubmit(ctrTC);
                    }

                    dcAcc.SubmitChanges();
                }
                foreach (MAFI maf in matchedManifeste.MAFI)
                {
                    maf.StatMafi = "Initié";
                }
                foreach (CONVENTIONNEL conv in matchedManifeste.CONVENTIONNEL)
                {
                    conv.StatGC = "Initié";
                }

                if (matchedManifeste.ESCALE.ACCONIER.IdAcc != 1)
                {
                    DateTime dte = DateTime.Now;

                   /* ARTICLE articleManutTerre = (from art in dcAcc.GetTable<ARTICLE>()
                                                 from par in dcAcc.GetTable<PARAMETRE>()
                                                 where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre"
                                                 select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleManutTerre = (from art in dcAcc.GetTable<ARTICLE>() 
                                                 where art.CodeArticle == 1702
                                                 select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpManutTerre = articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == matchedManifeste.ESCALE.ACCONIER.IdAcc.ToString());


                    ARTICLE articleGestParcAuto = (from art in dcAcc.GetTable<ARTICLE>() 
                                                   where art.CodeArticle == 1820 select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpGestParcAuto = null;

                    /*AH avec le nouveau plan comptable tous les suplement volume de vehicule et mafis  seront utiliser avec le code 1703 supplement volume
                     * LIGNE_PRIX lpGestParcAutoSupplVol = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                    */
                    //il prend le supllment volume correspondant 
                     // chargement article suppllent volume 1703
                     ARTICLE articleSuplVol = (from m in dcAcc.GetTable<ARTICLE>() where m.CodeArticle==1703 select m).FirstOrDefault<ARTICLE>();
                     LIGNE_PRIX lpGestParcAutoSupplVol = articleSuplVol.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                    

                    foreach (VEHICULE veh in matchedManifeste.VEHICULE)
                    {

                        #region Element de facturation manutention terre Socomar
                        // Element de facturation manutention terre Socomar
                        ELEMENT_FACTURATION eltFactManutTerre = new ELEMENT_FACTURATION();

                        eltFactManutTerre.CCArticle = articleManutTerre.CCArticle;
                        eltFactManutTerre.CCCP = veh.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactManutTerre.EltFacture = "Veh";
                        eltFactManutTerre.LibEF = string.Format("{0} Chassis N° {1} ", articleManutTerre.LibArticle, veh.NumChassis); //AH Manutention Terre Chassis N° " + veh.NumChassis;
                        eltFactManutTerre.DateJEF = DateTime.Now;
                        eltFactManutTerre.IdLP = lpManutTerre.IdLP;
                        eltFactManutTerre.QTEEF = 1;
                        eltFactManutTerre.PUEF = lpManutTerre.PU1LP;
                        eltFactManutTerre.UnitEF = lpManutTerre.UniteLP;
                        eltFactManutTerre.IdEsc = veh.IdEsc;
                        eltFactManutTerre.IdMan = veh.IdMan;
                        eltFactManutTerre.IdBL = veh.CONNAISSEMENT.IdBL;
                        eltFactManutTerre.IdVeh = veh.IdVeh;
                        eltFactManutTerre.CodeTVA = articleManutTerre.CodeTVA;// "TVAAP";
                        eltFactManutTerre.TauxTVA = articleManutTerre.CODE_TVA.TauxTVA; //dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(t => t.CodeTVA == articleManutTerre.CodeTVA).TauxTVA;
                        eltFactManutTerre.DestEF = "P";
                        eltFactManutTerre.StatutEF = "En cours";
                        eltFactManutTerre.CodeArticle = articleManutTerre.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutTerre);

                        #endregion
                        
                        #region Element de gestionnaire parc auto
                        // Element de gestionnaire parc auto
                        ELEMENT_FACTURATION eltFactGestParcAuto = new ELEMENT_FACTURATION();

                        if (veh.StatutCVeh == "U" ||  veh.StatutCVeh == "u")
                        {
                            lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                        else if (veh.StatutCVeh == "N" || veh.StatutCVeh == "n")
                        {
                            lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }

                        eltFactGestParcAuto.CCCP = veh.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactGestParcAuto.EltFacture = "Veh";
                        eltFactGestParcAuto.LibEF = string.Format("{0} - Chassis N° {1}", articleGestParcAuto.LibArticle, veh.NumChassis); //AH "Prestation de gestionnaire parc auto - Chassis N° " + veh.NumChassis;
                        eltFactGestParcAuto.DateJEF = DateTime.Now;
                        eltFactGestParcAuto.IdLP = lpGestParcAuto.IdLP;
                        eltFactGestParcAuto.QTEEF = 1;
                        if (veh.VolCVeh < 16)
                        {
                            eltFactGestParcAuto.PUEF = lpGestParcAuto.PU1LP;
                        }
                        else if (veh.VolCVeh < 50)
                        {
                            eltFactGestParcAuto.PUEF = lpGestParcAuto.PU2LP;
                        }
                        else
                        {
                            eltFactGestParcAuto.PUEF = lpGestParcAuto.PU3LP;
                        }
                        if (veh.VolCVeh > 100)
                        {
                            eltFactGestParcAuto.PTDIT = Math.Round(veh.VolCVeh.Value * articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte).PU1LP.Value, 0, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            eltFactGestParcAuto.PTDIT = 0;
                        }
                        eltFactGestParcAuto.UnitEF = lpGestParcAuto.UniteLP;
                        eltFactGestParcAuto.IdEsc = veh.CONNAISSEMENT.IdEsc;
                        eltFactGestParcAuto.IdMan = veh.CONNAISSEMENT.IdMan;
                        eltFactGestParcAuto.IdBL = veh.CONNAISSEMENT.IdBL;
                        eltFactGestParcAuto.IdVeh = veh.IdVeh;
                        eltFactGestParcAuto.CodeTVA = veh.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (veh.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : veh.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactGestParcAuto.TauxTVA = eltFactGestParcAuto.CodeTVA == "TVAEX" ? 0 : veh.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : veh.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactGestParcAuto.CCArticle = eltFactGestParcAuto.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                        eltFactGestParcAuto.DestEF = "C";
                        eltFactGestParcAuto.StatutEF = "En cours";
                        eltFactGestParcAuto.CodeArticle = articleGestParcAuto.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactGestParcAuto);

                        #endregion

                        #region Element de facturation Gestionnaire parc auto supplement volume vehicule
                        // Element de facturation Gestionnaire parc auto supplement volume vehicule
                        ELEMENT_FACTURATION eltFactGestParcAutoSupplementVolumeVehicule = new ELEMENT_FACTURATION();

                        eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA = veh.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (veh.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : veh.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactGestParcAutoSupplementVolumeVehicule.TauxTVA = eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : veh.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : veh.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactGestParcAutoSupplementVolumeVehicule.CCArticle = eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                        eltFactGestParcAutoSupplementVolumeVehicule.CCCP = veh.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactGestParcAutoSupplementVolumeVehicule.EltFacture = "Veh";
                        eltFactGestParcAutoSupplementVolumeVehicule.LibEF = string.Format("{0} - Chassis {1}", lpGestParcAutoSupplVol.ARTICLE.LibArticle, veh.NumChassis); //AH "Prestation de gestionnaire Parc auto - Supplément volume Chassis N° " + veh.NumChassis;
                        eltFactGestParcAutoSupplementVolumeVehicule.DateJEF = DateTime.Now;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdLP = lpGestParcAutoSupplVol.IdLP;
                        eltFactGestParcAutoSupplementVolumeVehicule.QTEEF = veh.VolCVeh > 100 ? veh.VolCVeh - 100 : 0;
                        eltFactGestParcAutoSupplementVolumeVehicule.UnitEF = lpGestParcAutoSupplVol.UniteLP;
                        eltFactGestParcAutoSupplementVolumeVehicule.PUEF = lpGestParcAutoSupplVol.PU1LP;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdEsc = veh.IdEsc;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdMan = veh.IdMan;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdBL = veh.CONNAISSEMENT.IdBL;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdVeh = veh.IdVeh;
                        eltFactGestParcAutoSupplementVolumeVehicule.DestEF = "C";
                        eltFactGestParcAutoSupplementVolumeVehicule.StatutEF = "En cours";
                        eltFactGestParcAutoSupplementVolumeVehicule.CodeArticle = lpGestParcAutoSupplVol.ARTICLE.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactGestParcAutoSupplementVolumeVehicule);
                        
                        #endregion

                        if (veh != null)
                        {
                            if (veh.ESCALE.DRAEsc == null)
                            {
                                veh.StatVeh = "Manifesté";
                            }
                            else
                            {
                                veh.StatVeh = "Manifesté";
                                veh.FFVeh = veh.ESCALE.DRAEsc.Value.AddDays(11);
                                veh.FSVeh = veh.ESCALE.DRAEsc.Value.AddDays(11);
                            }
                        }
                    }
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedManifeste;
            }
        }
 
        #endregion


        #region Cubage

        public VEHICULE ValiderCubageVehicule(int idVeh, string autresInfos, double volume, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedCubageVehicule = (from veh in dcAcc.GetTable<CUBAGE_VEHICULE>()
                                             where veh.IdVeh == idVeh && !veh.CUBAGE.DateCloCubage.HasValue && !veh.DateVal.HasValue
                                             select veh).FirstOrDefault<CUBAGE_VEHICULE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Cubage : Clôture d'une opération existante").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour clôturer un projet de cubage. Veuillez contacter un administrateur");
                }

                if (matchedCubageVehicule == null)
                {
                    throw new EnregistrementInexistant("Ce véhicule n'existe dans aucun projet de cubage en cours");
                }

                if (matchedCubageVehicule.VolCVeh == 0)
                {
                    throw new CubageException("Veuillez cuber ce véhicule avant de procéder à la validation");
                }

                if (matchedCubageVehicule.DateVal.HasValue)
                {
                    throw new CubageException("Le cubage de ce véhicule a déjà été validé");
                }

                // inserer opération de cubage
                OPERATION_VEHICULE opVeh = new OPERATION_VEHICULE();
                opVeh.IdVeh = idVeh;
                opVeh.IdTypeOp = 2;
                opVeh.DateOp = DateTime.Now;
                opVeh.IdU = idUser;
                opVeh.AIOp = autresInfos;

                dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh);

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdVeh = matchedCubageVehicule.VEHICULE.IdVeh;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

                matchedCubageVehicule.DateVal = DateTime.Now;

                var matchedVehicule = (from veh in dcAcc.GetTable<VEHICULE>()
                                       where veh.IdVeh == idVeh
                                       select veh).SingleOrDefault<VEHICULE>();

                matchedVehicule.VolCVeh = Math.Round(volume, 3);
                matchedVehicule.HautCVeh = (float)Math.Round(matchedCubageVehicule.HautCVeh.Value, 3);
                matchedVehicule.LongCVeh = (float)Math.Round(matchedCubageVehicule.LongCVeh.Value, 3);
                matchedVehicule.LargCVeh = (float)Math.Round(matchedCubageVehicule.LargCVeh.Value, 3);
                matchedVehicule.TypeCVeh = matchedCubageVehicule.TypeCVeh;

                // Sélection des lignes de prix : Adaptée à partir de la routine de validation du manifeste
                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                DateTime dte = DateTime.Now;

                double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                // La génération des éléments de facturation à la clôture d'un projet de cubage ne se fait que sur les escales dont Socomar est acconier
                if (matchedVehicule.ESCALE.RAEsc == "Y")
                {
                    /*AH ARTICLE articleManutBord = (from art in articles
                                                from par in parametres
                                                where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Bord"
                                                select art).SingleOrDefault<ARTICLE>(); */
                    ARTICLE articleManutBord = (from art in articles 
                                                where art.CodeArticle ==1701 select art).SingleOrDefault<ARTICLE>();

                    LIGNE_PRIX lpManutBord = articleManutBord.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    /*AH ARTICLE articleManutTerreSupplementVolume = (from art in articles
                                                                 from par in parametres
                                                                 where art.CodeArticle == par.CodeAF && par.NomAF == "Supplément volume  - Véhicule"
                                                                 select art).SingleOrDefault<ARTICLE>();*/

                    ARTICLE articleManutTerreSupplementVolume = (from art in articles where art.CodeArticle == 1703  select art).SingleOrDefault<ARTICLE>();
                    
                    //AH je prend le suplement volume d'origine qui etait tjr utiliser
                    LIGNE_PRIX lpManutTerreSupplementVolume = articleManutTerreSupplementVolume.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP!="SP");

                    /*AH ARTICLE articleManutTerre = (from art in articles
                                                 from par in parametres
                                                 where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre"
                                                 select art).SingleOrDefault<ARTICLE>();
                    */
                    ARTICLE articleManutTerre = (from art in articles 
                                                 where art.CodeArticle ==1702
                                                 select art).SingleOrDefault<ARTICLE>();

                    LIGNE_PRIX lpManutTerre = articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    // Element de facturation manutention bord
                    /* AH var matchedEltManutBord = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               where ef.IdVeh == matchedVehicule.IdVeh && ef.LibEF.Contains("Manutention Bord Chassis") && ef.StatutEF != "Annule"
                                               select ef).SingleOrDefault<ELEMENT_FACTURATION>();
                    */
                    var matchedEltManutBord = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               where ef.IdVeh == matchedVehicule.IdVeh && ef.CodeArticle=="1701" && ef.StatutEF != "Annule"
                                               select ef).SingleOrDefault<ELEMENT_FACTURATION>();

                    if (matchedEltManutBord != null)
                    {
                        matchedEltManutBord.PUEF = matchedVehicule.VolCVeh <= 10 ? lpManutBord.PU1LP : lpManutBord.PU2LP;
                        matchedEltManutBord.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                        matchedEltManutBord.TauxTVA = matchedEltManutBord.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        matchedEltManutBord.CCArticle = matchedEltManutBord.CodeTVA == "TVAEX" ? articleManutBord.CCArticleEx : articleManutBord.CCArticle;
                        matchedEltManutBord.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                        matchedEltManutBord.QTEEF = matchedVehicule.VolCVeh;
                        matchedEltManutBord.UnitEF = lpManutBord.UniteLP;
                        if (matchedVehicule.CONNAISSEMENT.BLLT == "Y")
                        {
                            matchedEltManutBord.PUEF = 0;
                        }
                    }

                    // Element de facturation manutention terre - supplement volume
                    
                    /* AH
                     * article correspondant 1703 
                     * var matchedEltManutBordSupplementVolume = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                               where ef.IdVeh == matchedVehicule.IdVeh && ef.LibEF.Contains("Manutention Terre - Supplément volume Chassis") && ef.StatutEF != "Annule"
                                                               select ef).SingleOrDefault<ELEMENT_FACTURATION>();
                    */
                    //correspond  a lancienne ligne de manutention terre supplement volume utilise
                    var matchedEltManutBordSupplementVolume = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                               where ef.IdVeh == matchedVehicule.IdVeh && ef.CodeArticle == "1703" && ef.StatutEF != "Annule"
                                                               && ef.LIGNE_PRIX.LP!="SP"
                                                               select ef).SingleOrDefault<ELEMENT_FACTURATION>();

                    if (matchedEltManutBordSupplementVolume != null)
                    {
                        matchedEltManutBordSupplementVolume.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                        matchedEltManutBordSupplementVolume.TauxTVA = matchedEltManutBordSupplementVolume.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        matchedEltManutBordSupplementVolume.CCArticle = matchedEltManutBordSupplementVolume.CodeTVA == "TVAEX" ? articleManutTerreSupplementVolume.CCArticleEx : articleManutBord.CCArticle;
                        matchedEltManutBordSupplementVolume.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                        matchedEltManutBordSupplementVolume.QTEEF = matchedVehicule.VolCVeh > 100 ? matchedVehicule.VolCVeh - 100 : 0;
                        matchedEltManutBordSupplementVolume.UnitEF = lpManutTerreSupplementVolume.UniteLP;
                        //matchedEltManutBordSupplementVolume.PUEF = matchedVehicule.CONNAISSEMENT.BLGN == "N" ? lpManutTerreSupplementVolume.PU1LP : lpManutTerreSupplementVolume.PU2LP;
                        //matchedEltManutBordSupplementVolume.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? lpManutTerreSupplementVolume.PU2LP : lpManutTerreSupplementVolume.PU1LP;
                        if (matchedVehicule.CONNAISSEMENT.BLIL == "Y")
                        {
                            matchedEltManutBordSupplementVolume.PUEF = lpManutTerreSupplementVolume.PU2LP;
                        }
                        else
                        {
                            if (matchedVehicule.CONNAISSEMENT.BLGN == "Y")
                            {
                                matchedEltManutBordSupplementVolume.PUEF = lpManutTerreSupplementVolume.PU2LP;
                            }
                            else
                            {
                                matchedEltManutBordSupplementVolume.PUEF = lpManutTerreSupplementVolume.PU1LP;
                            }
                        }
                    }

                    // Element de facturation manutention terre Socomar
                    /* var matchedEltManutTerre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                where ef.IdVeh == matchedVehicule.IdVeh && ef.LibEF.Contains("Manutention Terre Chassis") && ef.StatutEF != "Annule"
                                                select ef).SingleOrDefault<ELEMENT_FACTURATION>();
                    */

                    var matchedEltManutTerre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                where ef.IdVeh == matchedVehicule.IdVeh && ef.CodeArticle=="1702"  && ef.StatutEF != "Annule"
                                                select ef).SingleOrDefault<ELEMENT_FACTURATION>();

                    if (matchedEltManutTerre != null)
                    {
                        matchedEltManutTerre.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                        matchedEltManutTerre.QTEEF = 1;
                        if (matchedVehicule.VolCVeh < 16)
                        {
                            matchedEltManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU1LP - lpManutTerre.PU1LP * derogation);
                        }
                        else if (matchedVehicule.VolCVeh < 50)
                        {
                            matchedEltManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU2LP - lpManutTerre.PU2LP * derogation);
                        }
                        else
                        {
                            matchedEltManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU3LP - lpManutTerre.PU3LP * derogation);
                        }
                        matchedEltManutTerre.UnitEF = lpManutTerre.UniteLP;
                        matchedEltManutTerre.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                        matchedEltManutTerre.TauxTVA = matchedEltManutTerre.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        matchedEltManutTerre.CCArticle = matchedEltManutTerre.CodeTVA == "TVAEX" ? articleManutTerre.CCArticleEx : articleManutTerre.CCArticle;
                    }
                }

                /*AH ARTICLE articleGestParcAuto = (from art in articles
                                               from par in parametres
                                               where art.CodeArticle == par.CodeAF && par.NomAF == "Prestation de gestionnaire de parc auto"
                                               select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleGestParcAuto = (from art in articles  where art.CodeArticle ==1820 select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpGestParcAuto = null;
                /* AH changement du code 1820 LP == SP en 1703 LP==SP
                LIGNE_PRIX lpGestParcAutoSupplVol = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                */
                // chargement de la'rticle 1703 et ligne prix associe
                ARTICLE articlSupVol = (from ar in articles where ar.CodeArticle==1703 select ar).FirstOrDefault<ARTICLE>();
                LIGNE_PRIX lpGestParcAutoSupplVol = articlSupVol.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                
                // Element de facturation gestionnaire de parc auto
                /* AH var matchedEltGestParcVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                  where ef.IdBL == matchedVehicule.IdBL && ef.IdVeh == matchedVehicule.IdVeh && ef.LibEF.Contains("Prestation de gestionnaire parc auto - Chassis")
                                                  select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                */
                var matchedEltGestParcVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                  where ef.IdBL == matchedVehicule.IdBL && ef.IdVeh == matchedVehicule.IdVeh && ef.CodeArticle=="1820"
                                                  select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                if (matchedEltGestParcVehicule != null)
                {
                    if (matchedVehicule.StatutCVeh == "U")
                    {
                        lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU" && lp.DDLP <= dte && lp.DFLP >= dte);
                    }
                    else if (matchedVehicule.StatutCVeh == "N")
                    {
                        lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN" && lp.DDLP <= dte && lp.DFLP >= dte);
                    }
                    matchedEltGestParcVehicule.CodeTVA = articleGestParcAuto.CodeTVA == "TVAEX" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                    matchedEltGestParcVehicule.TauxTVA = matchedEltGestParcVehicule.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                    matchedEltGestParcVehicule.CCArticle = matchedEltGestParcVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                    matchedEltGestParcVehicule.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                    matchedEltGestParcVehicule.QTEEF = 1;
                    matchedEltGestParcVehicule.UnitEF = lpGestParcAuto.UniteLP;
                    if (matchedVehicule.VolCVeh < 16)
                    {
                        matchedEltGestParcVehicule.PUEF = lpGestParcAuto.PU1LP;
                    }
                    else if (matchedVehicule.VolCVeh < 50)
                    {
                        matchedEltGestParcVehicule.PUEF = lpGestParcAuto.PU2LP;
                    }
                    else
                    {
                        matchedEltGestParcVehicule.PUEF = lpGestParcAuto.PU3LP;
                    }
                }

                var matchedEltGestParcSupplementVolumeVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                  where ef.IdBL == matchedVehicule.IdBL && ef.IdVeh == matchedVehicule.IdVeh && ef.LibEF.Contains("Prestation de gestionnaire Parc auto - Supplément volume Chassis")
                                                                  select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                if (matchedEltGestParcSupplementVolumeVehicule != null)
                {
                    matchedEltGestParcSupplementVolumeVehicule.CodeTVA = articleGestParcAuto.CodeTVA == "TVAEX" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                    matchedEltGestParcSupplementVolumeVehicule.TauxTVA = matchedEltGestParcSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                    matchedEltGestParcSupplementVolumeVehicule.CCArticle = matchedEltGestParcSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                    matchedEltGestParcSupplementVolumeVehicule.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                    matchedEltGestParcSupplementVolumeVehicule.QTEEF = matchedVehicule.VolCVeh > 100 ? matchedVehicule.VolCVeh - 100 : 0;
                    matchedEltGestParcSupplementVolumeVehicule.UnitEF = lpGestParcAutoSupplVol.UniteLP;
                    matchedEltGestParcSupplementVolumeVehicule.PUEF = lpGestParcAutoSupplVol.PU1LP;
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedVehicule;
            }
        }

        #endregion

        #region Connaissement
        /// <summary>
        /// 
        /// </summary>
        /// <param name="idBL"></param>
        /// <param name="autresInfos"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public CONNAISSEMENT ValiderConnaissement(int idBL, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Le connaissement auquel vous faites référence n'existe pas");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Connaissement : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour valider un connaissement. Veuillez contacter un administrateur");
                }

                if (!dcAcc.OPERATION_CONNAISSEMENT.SingleOrDefault<OPERATION_CONNAISSEMENT>(op => op.IdTypeOp == 34 && op.IdBL == matchedConnaissement.IdBL).DateOp.HasValue)
                {
                    throw new ConnaissementException("Validation impossible : Ce connaissement n'a pas encore été traité");
                }

                if (matchedConnaissement.DVBL.HasValue)
                {
                    throw new ConnaissementException("Ce connaissement a déjà été validé.\nDate de validation : " + matchedConnaissement.DVBL.Value);
                }
                //Date actuelle du système
                DateTime dte = DateTime.Now;

                matchedConnaissement.DVBL = DateTime.Now;
                matchedConnaissement.AIBLVal = autresInfos;
                matchedConnaissement.StatutBL = "Manifesté";

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdBL = matchedConnaissement.IdBL;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

                OPERATION_CONNAISSEMENT matchedOpBL = (from op in dcAcc.GetTable<OPERATION_CONNAISSEMENT>()
                                                       where op.IdBL == matchedConnaissement.IdBL && op.IdTypeOp == 35
                                                       select op).SingleOrDefault<OPERATION_CONNAISSEMENT>();

                matchedOpBL.DateOp = DateTime.Now;
                matchedOpBL.IdU = idUser;
                matchedOpBL.AIOp = autresInfos;

                dcAcc.OPERATION_CONNAISSEMENT.Context.SubmitChanges();

                // Sélection des articles dans les tables de paramétrage
                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                //selection des lignes de prix concernant le BL
                ARTICLE articleFraisDossier = (from art in articles 
                                               where art.CodeArticle == 1601
                                               select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpFraisDossier = articleFraisDossier.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleTimbre = (from art in articles
                                         from par in parametres
                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Timbre de connaissement"
                                         select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleTimbre = (from art in articles where art.CodeArticle == 2101
                                         select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpTimbre = articleTimbre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                //Selection des lignes de prix concernant le véhicule
                /*AH ARTICLE articleManutBord = (from art in articles
                                            from par in parametres
                                            where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Bord"
                                            select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleManutBord = (from art in articles where art.CodeArticle == 1701
                                            select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpManutBord = articleManutBord.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleSupplementVolumeVehicule = (from art in articles
                                                           from par in parametres
                                                           where art.CodeArticle == par.CodeAF && par.NomAF == "Supplément volume  - Véhicule"
                                                           select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleSupplementVolumeVehicule = (from art in articles  where art.CodeArticle == 1703
                                                           select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpSupplementVolumeVehicule = articleSupplementVolumeVehicule.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleManutTerre = (from art in articles
                                             from par in parametres
                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre"
                                             select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleManutTerre = (from art in articles  where art.CodeArticle ==1702
                                             select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpManutTerre = articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*ARTICLE articleGestParcAuto = (from art in articles
                                               from par in parametres
                                               where art.CodeArticle == par.CodeAF && par.NomAF == "Prestation de gestionnaire de parc auto"
                                               select art).FirstOrDefault<ARTICLE>();
                */

                ARTICLE articleGestParcAuto = (from art in articles  where art.CodeArticle == 1820
                                               select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpGestParcAuto = null;
                /*
                 * AH changement code article ver le 1703
                LIGNE_PRIX lpGestParcAutoSupplVol = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                */
                //article suplement volume
                ARTICLE artSupVol = (from m in articles where m.CodeArticle == 1703 select m).FirstOrDefault<ARTICLE>();
                //LIGNE_PRIX lpGestParcAutoSupplVol = lpGestParcAutoSupplVol.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                LIGNE_PRIX lpGestParcAutoSupplVol = artSupVol.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                
                //Sélection de lignes de prix pour les conventionnels
                //Manutention terre déjà sélectionnée lors de la sélection des lignes de prix des véhicules
                /*AH ARTICLE articleManutTerreSupplementTonnage = (from art in articles
                                                              from par in parametres
                                                              where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre - Supplément tonnage"
                                                              select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleManutTerreSupplementTonnage = (from art in articles where art.CodeArticle ==1704
                                                              select art).FirstOrDefault<ARTICLE>();
                LIGNE_PRIX lpManutTerreSupplementTonnage = articleManutTerreSupplementTonnage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == "I11");

                /*AH ARTICLE articleRelevage = (from art in articles
                                           from par in parametres
                                           where art.CodeArticle == par.CodeAF && par.NomAF == "Relevage"
                                           select art).FirstOrDefault<ARTICLE>();*/

                ARTICLE articleRelevage = (from art in articles where art.CodeArticle == 1706
                                           select art).FirstOrDefault<ARTICLE>();
                LIGNE_PRIX lpRelevage = articleRelevage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleMagasinagePartSocomar = (from art in articles
                                                        from par in parametres
                                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Magasinage Part Socomar"
                                                        select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleMagasinagePartSocomar = (from art in articles  where art.CodeArticle == 1810
                                                        select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpMagasinagePartSocomar = articleMagasinagePartSocomar.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleDeboursPADMagasinage = (from art in articles
                                                       from par in parametres
                                                       where art.CodeArticle == par.CodeAF && par.NomAF == "Debours PAD - Magasinage"
                                                       select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleDeboursPADMagasinage = (from art in articles where art.CodeArticle == 1811
                                                       select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursPADMagasinage = articleDeboursPADMagasinage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH a ne plus utiliser
                 * ARTICLE articleDeboursPADTVAMagasinage = (from art in articles
                                                          from par in parametres
                                                          where art.CodeArticle == par.CodeAF && par.NomAF == "Debours PAD - TVA sur magasinage"
                                                          select art).FirstOrDefault<ARTICLE>();
                */

                LIGNE_PRIX lpDeboursPADTVAMagasinage = articleDeboursPADMagasinage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                // Les frais de dossier et timbre de connaissement ne sont calculés que pour les escales dont Socomar est consignataire
                if (matchedConnaissement.ESCALE.RCEsc == "Y")
                {
                    // Element de facturation frais de dossier
                    ELEMENT_FACTURATION eltFactFraisDossier = new ELEMENT_FACTURATION();

                    eltFactFraisDossier.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    eltFactFraisDossier.EltFacture = "BL";
                    eltFactFraisDossier.LibEF = articleFraisDossier.LibArticle + " BL N° " + matchedConnaissement.NumBL; //AH "Frais de dossiers BL N° " + matchedConnaissement.NumBL;
                    eltFactFraisDossier.DateJEF = DateTime.Now;
                    eltFactFraisDossier.IdLP = lpFraisDossier.IdLP;
                    eltFactFraisDossier.PUEF = lpFraisDossier.PU1LP;
                    eltFactFraisDossier.QTEEF = 1;
                    eltFactFraisDossier.UnitEF = "U";
                    eltFactFraisDossier.IdEsc = matchedConnaissement.IdEsc;
                    eltFactFraisDossier.IdMan = matchedConnaissement.IdMan;
                    eltFactFraisDossier.IdBL = matchedConnaissement.IdBL;
                    eltFactFraisDossier.CodeTVA = articleFraisDossier.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                    eltFactFraisDossier.TauxTVA = eltFactFraisDossier.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                    eltFactFraisDossier.CCArticle = eltFactFraisDossier.CodeTVA == "TVAEX" ? articleFraisDossier.CCArticleEx : articleFraisDossier.CCArticle;
                    eltFactFraisDossier.DestEF = "C";
                    eltFactFraisDossier.StatutEF = "En cours";
                    eltFactFraisDossier.CodeArticle = articleFraisDossier.CodeArticle.ToString();

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactFraisDossier);

                    // Element de facturation timbre de connaissement
                    ELEMENT_FACTURATION eltFactTimbre = new ELEMENT_FACTURATION();

                    eltFactTimbre.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    eltFactTimbre.EltFacture = "BL";
                    eltFactTimbre.LibEF =articleTimbre.LibArticle+" BL N° " + matchedConnaissement.NumBL; //AH "Timbre de connaissement BL N° " + matchedConnaissement.NumBL;
                    eltFactTimbre.DateJEF = DateTime.Now;
                    eltFactTimbre.IdLP = lpTimbre.IdLP;
                    eltFactTimbre.PUEF = lpTimbre.PU1LP;
                    eltFactTimbre.QTEEF = 1;
                    eltFactTimbre.UnitEF = "U";
                    eltFactTimbre.IdEsc = matchedConnaissement.IdEsc;
                    eltFactTimbre.IdMan = matchedConnaissement.IdMan;
                    eltFactTimbre.IdBL = matchedConnaissement.IdBL;
                    eltFactTimbre.CodeTVA = articleTimbre.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                    eltFactTimbre.TauxTVA = eltFactTimbre.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                    eltFactTimbre.CCArticle = eltFactTimbre.CodeTVA == "TVAEX" ? articleTimbre.CCArticleEx : articleTimbre.CCArticle;
                    eltFactTimbre.DestEF = "C";
                    eltFactTimbre.StatutEF = "En cours";
                    eltFactTimbre.CodeArticle = articleTimbre.CodeArticle.ToString();

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactTimbre);
                }

                // Les autres éléments de facturation (Manutention et Débours DIT) sont générés pour les manifestes dont Socomar est acconier
                if (matchedConnaissement.ESCALE.RAEsc == "Y")
                {
                    // Règle de calcul de la dérogation : Connaissement Hinterland ou Grand Nord : 25 % de reduction sur la manutention
                    // Attention, les prix de manutention bord sont déjà dérogés dans la base car étant calculés sur la base d'un forfait

                    // La manutention des véhicules ne se calcule que sur les véhicules non portés, ni attellés
                    foreach (VEHICULE v in matchedConnaissement.VEHICULE.Where(veh => !veh.IdVehAP.HasValue))
                    {
                        double derogation = (v.CONNAISSEMENT.BLIL == "Y" || v.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                        // Element de facturation manutention bord
                        ELEMENT_FACTURATION eltFactManutBord = new ELEMENT_FACTURATION();

                        eltFactManutBord.PUEF = v.VolCVeh <= 10 ? lpManutBord.PU1LP : lpManutBord.PU2LP;
                        eltFactManutBord.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactManutBord.TauxTVA = eltFactManutBord.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactManutBord.CCArticle = eltFactManutBord.CodeTVA == "TVAEX" ? articleManutBord.CCArticleEx : articleManutBord.CCArticle;
                        eltFactManutBord.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactManutBord.EltFacture = "Veh";
                        eltFactManutBord.LibEF = articleManutBord.LibArticle + " Chassis N° " + v.NumChassis; //AH "Manutention Bord Chassis N° " + v.NumChassis;
                        eltFactManutBord.DateJEF = DateTime.Now;
                        eltFactManutBord.IdLP = lpManutBord.IdLP;
                        eltFactManutBord.QTEEF = v.VolCVeh;
                        eltFactManutBord.UnitEF = lpManutBord.UniteLP;
                        eltFactManutBord.IdEsc = matchedConnaissement.IdEsc;
                        eltFactManutBord.IdMan = matchedConnaissement.IdMan;
                        eltFactManutBord.IdBL = v.CONNAISSEMENT.IdBL;
                        eltFactManutBord.IdVeh = v.IdVeh;
                        eltFactManutBord.DestEF = "C";
                        eltFactManutBord.StatutEF = "En cours";
                        eltFactManutBord.CodeArticle = articleManutBord.CodeArticle.ToString();

                        if (v.CONNAISSEMENT.BLFO == "Y")
                        {
                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutBord);
                        }
                        else if (v.CONNAISSEMENT.BLLT == "Y" && v.VolCVeh < 30)
                        {
                            eltFactManutBord.PUEF = 0;
                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutBord);
                        }

                        // Element de facturation supplement volume vehicule
                        ELEMENT_FACTURATION eltFactSupplementVolumeVehicule = new ELEMENT_FACTURATION();

                        eltFactSupplementVolumeVehicule.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactSupplementVolumeVehicule.TauxTVA = eltFactSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSupplementVolumeVehicule.CCArticle = eltFactSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleSupplementVolumeVehicule.CCArticleEx : articleSupplementVolumeVehicule.CCArticle;
                        eltFactSupplementVolumeVehicule.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSupplementVolumeVehicule.EltFacture = "Veh";
                        eltFactSupplementVolumeVehicule.LibEF = articleSupplementVolumeVehicule.LibArticle + " Chassis N° " + v.NumChassis; //AH "Manutention Terre - Supplément volume Chassis N° " + v.NumChassis;
                        eltFactSupplementVolumeVehicule.DateJEF = DateTime.Now;
                        eltFactSupplementVolumeVehicule.IdLP = lpSupplementVolumeVehicule.IdLP;
                        eltFactSupplementVolumeVehicule.QTEEF = v.VolCVeh > 100 ? v.VolCVeh - 100 : 0;
                        eltFactSupplementVolumeVehicule.UnitEF = lpSupplementVolumeVehicule.UniteLP;
                        eltFactSupplementVolumeVehicule.CodeArticle = articleSupplementVolumeVehicule.CodeArticle.ToString();

                        if (matchedConnaissement.BLIL == "Y")
                        {
                            eltFactSupplementVolumeVehicule.PUEF = lpSupplementVolumeVehicule.PU2LP;
                        }
                        else
                        {
                            if (matchedConnaissement.BLGN == "Y")
                            {
                                eltFactSupplementVolumeVehicule.PUEF = lpSupplementVolumeVehicule.PU2LP;
                            }
                            else
                            {
                                eltFactSupplementVolumeVehicule.PUEF = lpSupplementVolumeVehicule.PU1LP;
                            }
                        }
                        //eltFactSupplementVolumeVehicule.PUEF = v.CONNAISSEMENT.BLGN == "N" ? lpSupplementVolumeVehicule.PU1LP : lpSupplementVolumeVehicule.PU2LP;
                        //eltFactSupplementVolumeVehicule.PUEF = v.CONNAISSEMENT.BLIL == "Y" ? lpSupplementVolumeVehicule.PU2LP : lpSupplementVolumeVehicule.PU1LP;
                        eltFactSupplementVolumeVehicule.IdEsc = matchedConnaissement.IdEsc;
                        eltFactSupplementVolumeVehicule.IdMan = matchedConnaissement.IdMan;
                        eltFactSupplementVolumeVehicule.IdBL = v.CONNAISSEMENT.IdBL;
                        eltFactSupplementVolumeVehicule.IdVeh = v.IdVeh;
                        eltFactSupplementVolumeVehicule.DestEF = "C";
                        eltFactSupplementVolumeVehicule.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementVolumeVehicule);

                        // Element de facturation manutention terre Socomar
                        ELEMENT_FACTURATION eltFactManutTerre = new ELEMENT_FACTURATION();

                        eltFactManutTerre.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactManutTerre.EltFacture = "Veh";
                        eltFactManutTerre.LibEF = articleManutTerre.LibArticle + " Chassis N° " + v.NumChassis; //AH "Manutention Terre Chassis N° " + v.NumChassis;
                        eltFactManutTerre.DateJEF = DateTime.Now;
                        eltFactManutTerre.IdLP = lpManutTerre.IdLP;
                        eltFactManutTerre.QTEEF = 1;
                        if (v.VolCVeh < 16)
                        {
                            eltFactManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU1LP - lpManutTerre.PU1LP * derogation);
                        }
                        else if (v.VolCVeh < 50)
                        {
                            eltFactManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU2LP - lpManutTerre.PU2LP * derogation);
                        }
                        else
                        {
                            eltFactManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU3LP - lpManutTerre.PU3LP * derogation);
                        }
                        eltFactManutTerre.UnitEF = lpManutTerre.UniteLP;
                        eltFactManutTerre.IdEsc = matchedConnaissement.IdEsc;
                        eltFactManutTerre.IdMan = matchedConnaissement.IdMan;
                        eltFactManutTerre.IdBL = v.CONNAISSEMENT.IdBL;
                        eltFactManutTerre.IdVeh = v.IdVeh;
                        eltFactManutTerre.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactManutTerre.TauxTVA = eltFactManutTerre.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactManutTerre.CCArticle = eltFactManutTerre.CodeTVA == "TVAEX" ? articleManutTerre.CCArticleEx : articleManutTerre.CCArticle;
                        eltFactManutTerre.DestEF = "C";
                        eltFactManutTerre.StatutEF = "En cours";
                        eltFactManutTerre.CodeArticle = articleManutTerre.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutTerre);

                    }

                    foreach (VEHICULE v in matchedConnaissement.VEHICULE)
                    {
                        // Element de gestionnaire parc auto
                        ELEMENT_FACTURATION eltFactGestParcAuto = new ELEMENT_FACTURATION();

                        if (v.StatutCVeh == "U")
                        {
                            lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                        else if (v.StatutCVeh == "N")
                        {
                            lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }

                        eltFactGestParcAuto.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactGestParcAuto.EltFacture = "Veh";
                        eltFactGestParcAuto.LibEF = articleGestParcAuto.LibArticle + " Chassis N° " + v.NumChassis;  //"Prestation de gestionnaire parc auto - Chassis N° " + v.NumChassis;
                        eltFactGestParcAuto.DateJEF = DateTime.Now;
                        eltFactGestParcAuto.IdLP = lpGestParcAuto.IdLP;
                        eltFactGestParcAuto.QTEEF = 1;
                        if (v.VolCVeh < 16)
                        {
                            eltFactGestParcAuto.PUEF = lpGestParcAuto.PU1LP;
                        }
                        else if (v.VolCVeh < 50)
                        {
                            eltFactGestParcAuto.PUEF = lpGestParcAuto.PU2LP;
                        }
                        else
                        {
                            eltFactGestParcAuto.PUEF = lpGestParcAuto.PU3LP;
                        }
                        if (v.VolCVeh > 100)
                        {
                            eltFactGestParcAuto.PTDIT = Math.Round(v.VolCVeh.Value * articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte).PU1LP.Value, 0, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            eltFactGestParcAuto.PTDIT = 0;
                        }
                        eltFactGestParcAuto.UnitEF = lpGestParcAuto.UniteLP;
                        eltFactGestParcAuto.IdEsc = matchedConnaissement.IdEsc;
                        eltFactGestParcAuto.IdMan = matchedConnaissement.IdMan;
                        eltFactGestParcAuto.IdBL = v.CONNAISSEMENT.IdBL;
                        eltFactGestParcAuto.IdVeh = v.IdVeh;
                        eltFactGestParcAuto.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactGestParcAuto.TauxTVA = eltFactGestParcAuto.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactGestParcAuto.CCArticle = eltFactGestParcAuto.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                        eltFactGestParcAuto.DestEF = "C";
                        eltFactGestParcAuto.StatutEF = "En cours";
                        eltFactGestParcAuto.CodeArticle = articleGestParcAuto.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactGestParcAuto);

                        // Element de facturation Gestionnaire parc auto supplement volume vehicule
                        ELEMENT_FACTURATION eltFactGestParcAutoSupplementVolumeVehicule = new ELEMENT_FACTURATION();

                        eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactGestParcAutoSupplementVolumeVehicule.TauxTVA = eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactGestParcAutoSupplementVolumeVehicule.CCArticle = eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                        eltFactGestParcAutoSupplementVolumeVehicule.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactGestParcAutoSupplementVolumeVehicule.EltFacture = "Veh";
                        //AH Prestation de gestionnaire Parc auto - Supplément volume 
                        eltFactGestParcAutoSupplementVolumeVehicule.LibEF = lpGestParcAutoSupplVol.DescLP + " Chassis N° " + v.NumChassis;
                        eltFactGestParcAutoSupplementVolumeVehicule.DateJEF = DateTime.Now;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdLP = lpGestParcAutoSupplVol.IdLP;
                        eltFactGestParcAutoSupplementVolumeVehicule.QTEEF = v.VolCVeh > 100 ? v.VolCVeh - 100 : 0;
                        eltFactGestParcAutoSupplementVolumeVehicule.UnitEF = lpGestParcAutoSupplVol.UniteLP;
                        eltFactGestParcAutoSupplementVolumeVehicule.PUEF = lpGestParcAutoSupplVol.PU1LP;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdEsc = matchedConnaissement.IdEsc;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdMan = matchedConnaissement.IdMan;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdBL = v.CONNAISSEMENT.IdBL;
                        eltFactGestParcAutoSupplementVolumeVehicule.IdVeh = v.IdVeh;
                        eltFactGestParcAutoSupplementVolumeVehicule.DestEF = "C";
                        eltFactGestParcAutoSupplementVolumeVehicule.StatutEF = "En cours";
                        eltFactGestParcAutoSupplementVolumeVehicule.CodeArticle = articleGestParcAuto.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactGestParcAutoSupplementVolumeVehicule);

                        var matchedVeh = (from veh in dcAcc.GetTable<VEHICULE>()
                                          where veh.IdVeh == v.IdVeh
                                          select veh).SingleOrDefault<VEHICULE>();

                        if (matchedVeh != null)
                        {
                            if (matchedVeh.ESCALE.DRAEsc == null)
                            {
                                if (matchedVeh.StatVeh == "Traité")
                                {
                                    matchedVeh.StatVeh = "Manifesté";
                                }
                            }
                            else
                            {
                                if (matchedVeh.StatVeh == "Traité")
                                {
                                    matchedVeh.StatVeh = "Manifesté";
                                }
                                matchedVeh.FFVeh = v.ESCALE.DRAEsc.Value.AddDays(11);
                                matchedVeh.FSVeh = v.ESCALE.DRAEsc.Value.AddDays(11);
                            }
                        }
                    }

                    // Génération des éléments de facturation sur les conteneurs de l'escale
                    #region conteneur
                    foreach (CONTENEUR c in matchedConnaissement.CONTENEUR)
                    {
                        var matchedCtr = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                          where ctr.IdCtr == c.IdCtr
                                          select ctr).SingleOrDefault<CONTENEUR>();

                        if (matchedCtr != null)
                        {
                            if (matchedCtr.ESCALE.DRAEsc == null)
                            {
                                if (matchedCtr.StatCtr == "Traité")
                                {
                                    matchedCtr.StatCtr = "Manifesté";
                                }
                            }
                            else
                            {
                                if (matchedCtr.StatCtr == "Traité")
                                {
                                    matchedCtr.StatCtr = "Manifesté";
                                }
                                matchedCtr.FFCtr = c.ESCALE.DRAEsc.Value.AddDays(11);
                                matchedCtr.FSCtr = c.ESCALE.DRAEsc.Value.AddDays(11);
                                matchedCtr.FFSCtr = ((Int32)c.ESCALE.DRAEsc.Value.DayOfWeek) > 2 ? c.ESCALE.DRAEsc.Value.AddDays(13) : c.ESCALE.DRAEsc.Value.AddDays(12);
                            }
                        }
                    } 
                    #endregion

                    // Génération des éléments de facturation sur les mafis de l'escale
                    #region mafi
                    foreach (MAFI m in matchedConnaissement.MAFI)
                    {
                        double derogation = (m.CONNAISSEMENT.BLIL == "Y" || m.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                        // Element de facturation manutention terre
                        ELEMENT_FACTURATION eltFactManutTerre = new ELEMENT_FACTURATION();

                        eltFactManutTerre.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactManutTerre.EltFacture = "MF";
                        eltFactManutTerre.LibEF = articleManutTerre.LibArticle + " - Mafi N° " + m.NumMafi; //AH "Manutention Terre - Mafi N° " + m.NumMafi;
                        eltFactManutTerre.DateJEF = DateTime.Now;
                        eltFactManutTerre.IdLP = lpManutTerre.IdLP;
                        eltFactManutTerre.QTEEF = m.PoidsCMafi;
                        eltFactManutTerre.PUEF = 1;//Math.Round(Convert.ToDouble(articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == m.TypeMses).PU1LP - articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == m.TypeMses).PU1LP * derogation), 0, MidpointRounding.AwayFromZero);
                        eltFactManutTerre.UnitEF = "U";//articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == m.TypeMses).UniteLP;
                        eltFactManutTerre.IdEsc = matchedConnaissement.IdEsc;
                        eltFactManutTerre.IdMan = matchedConnaissement.IdMan;
                        eltFactManutTerre.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactManutTerre.IdMafi = m.IdMafi;
                        eltFactManutTerre.CodeTVA = m.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactManutTerre.TauxTVA = eltFactManutTerre.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactManutTerre.CCArticle = eltFactManutTerre.CodeTVA == "TVAEX" ? articleManutTerre.CCArticleEx : articleManutTerre.CCArticle;
                        eltFactManutTerre.DestEF = "C";
                        eltFactManutTerre.StatutEF = "En cours";
                        eltFactManutTerre.CodeArticle = articleManutTerre.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutTerre);

                        // Element de facturation supplément tonnage
                        ELEMENT_FACTURATION eltFactSupplementTonage = new ELEMENT_FACTURATION();

                        eltFactSupplementTonage.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSupplementTonage.EltFacture = "MF";
                        eltFactSupplementTonage.LibEF = articleManutTerreSupplementTonnage.LibArticle + " - Mafi N° " + m.NumMafi;  //AH "Manutention Terre - Supplément tonnage - Mafi N° " + m.NumMafi;
                        eltFactSupplementTonage.DateJEF = DateTime.Now;
                        eltFactSupplementTonage.IdLP = lpManutTerreSupplementTonnage.IdLP;
                        eltFactSupplementTonage.UnitEF = lpManutTerreSupplementTonnage.UniteLP;
                        eltFactSupplementTonage.IdEsc = matchedConnaissement.IdEsc;
                        eltFactSupplementTonage.IdMan = matchedConnaissement.IdMan;
                        eltFactSupplementTonage.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactSupplementTonage.IdMafi = m.IdMafi;
                        eltFactSupplementTonage.CodeTVA = m.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactSupplementTonage.TauxTVA = articleManutTerreSupplementTonnage.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSupplementTonage.CCArticle = eltFactSupplementTonage.CodeTVA == "TVAEX" ? articleManutTerreSupplementTonnage.CCArticleEx : articleManutTerreSupplementTonnage.CCArticle;
                        eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU3LP - lpManutTerreSupplementTonnage.PU3LP * derogation), 0, MidpointRounding.AwayFromZero);
                        eltFactSupplementTonage.QTEEF = 1;
                        eltFactSupplementTonage.DestEF = "C";
                        eltFactSupplementTonage.StatutEF = "En cours";
                        eltFactSupplementTonage.CodeArticle = articleManutTerreSupplementTonnage.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementTonage);

                        // Element de facturation supplément volume
                        ELEMENT_FACTURATION eltFactSupplementVolume = new ELEMENT_FACTURATION();

                        eltFactSupplementVolume.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSupplementVolume.EltFacture = "MF";
                        eltFactSupplementVolume.LibEF = articleSupplementVolumeVehicule.LibArticle + "  Mafi N° " + m.NumMafi; //AH "Manutention Terre - Supplément volume - Mafi N° " + m.NumMafi;
                        eltFactSupplementVolume.DateJEF = DateTime.Now;
                        eltFactSupplementVolume.IdLP = lpSupplementVolumeVehicule.IdLP;
                        eltFactSupplementVolume.PUEF = m.VolMMafi > 5 ? Math.Round(Convert.ToDouble(lpSupplementVolumeVehicule.PU2LP - lpSupplementVolumeVehicule.PU2LP * derogation), 0, MidpointRounding.AwayFromZero) : 0;
                        eltFactSupplementVolume.QTEEF = m.VolMMafi > 5 ? m.VolMMafi - 5 : 0;
                        eltFactSupplementVolume.UnitEF = lpSupplementVolumeVehicule.UniteLP;
                        eltFactSupplementVolume.IdEsc = matchedConnaissement.IdEsc;
                        eltFactSupplementVolume.IdMan = matchedConnaissement.IdMan;
                        eltFactSupplementVolume.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactSupplementVolume.IdMafi = m.IdMafi;
                        eltFactSupplementVolume.CodeTVA = m.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactSupplementVolume.TauxTVA = articleSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSupplementVolume.CCArticle = eltFactSupplementVolume.CodeTVA == "TVAEX" ? articleSupplementVolumeVehicule.CCArticleEx : articleSupplementVolumeVehicule.CCArticle;
                        eltFactSupplementVolume.DestEF = "C";
                        eltFactSupplementVolume.StatutEF = "En cours";
                        eltFactSupplementVolume.CodeArticle = articleSupplementVolumeVehicule.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementVolume);

                        // Element de facturation relevage
                        ELEMENT_FACTURATION eltFactRelevage = new ELEMENT_FACTURATION();

                        eltFactRelevage.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactRelevage.EltFacture = "GC";
                        eltFactRelevage.LibEF = articleRelevage.LibArticle + " - Mafi N° " + m.NumMafi; //AH "Relevage - Mafi N° " + m.NumMafi;
                        eltFactRelevage.DateJEF = DateTime.Now;
                        eltFactRelevage.IdLP = lpRelevage.IdLP;
                        eltFactRelevage.PUEF = lpRelevage.PU1LP;
                        eltFactRelevage.QTEEF = m.PoidsCMafi;
                        eltFactRelevage.UnitEF = lpRelevage.UniteLP;
                        eltFactRelevage.IdEsc = matchedConnaissement.IdEsc;
                        eltFactRelevage.IdMan = matchedConnaissement.IdMan;
                        eltFactRelevage.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactRelevage.IdMafi = m.IdMafi;
                        eltFactRelevage.CodeTVA = m.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactRelevage.TauxTVA = articleRelevage.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFactRelevage.CCArticle = eltFactRelevage.CodeTVA == "TVAEX" ? articleRelevage.CCArticleEx : articleRelevage.CCArticle;
                        eltFactRelevage.DestEF = "C";
                        eltFactRelevage.StatutEF = "En cours";
                        eltFactRelevage.CodeArticle = articleRelevage.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactRelevage);

                        // Element de facturation Magasinage Part Socomar
                        ELEMENT_FACTURATION eltFactMagasinagePartSocomar = new ELEMENT_FACTURATION();

                        eltFactMagasinagePartSocomar.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactMagasinagePartSocomar.EltFacture = "MF";
                        eltFactMagasinagePartSocomar.LibEF = articleMagasinagePartSocomar.LibArticle + " - Mafi N° " + m.NumMafi; //AH "Magasinage Part Socomar - Mafi N° " + m.NumMafi;
                        eltFactMagasinagePartSocomar.DateJEF = DateTime.Now;
                        eltFactMagasinagePartSocomar.IdLP = lpMagasinagePartSocomar.IdLP;
                        eltFactMagasinagePartSocomar.PUEF = lpMagasinagePartSocomar.PU1LP;
                        eltFactMagasinagePartSocomar.QTEEF = 0;
                        eltFactMagasinagePartSocomar.UnitEF = lpMagasinagePartSocomar.UniteLP;
                        eltFactMagasinagePartSocomar.IdEsc = matchedConnaissement.IdEsc;
                        eltFactMagasinagePartSocomar.IdMan = matchedConnaissement.IdMan;
                        eltFactMagasinagePartSocomar.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactMagasinagePartSocomar.IdMafi = m.IdMafi;
                        eltFactMagasinagePartSocomar.CodeTVA = m.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFactMagasinagePartSocomar.TauxTVA = articleMagasinagePartSocomar.CodeTVA == "TVAEX" ? 0 : m.CONNAISSEMENT.CODE_TVA.TauxTVA;
                        eltFactMagasinagePartSocomar.CCArticle = eltFactMagasinagePartSocomar.CodeTVA == "TVAEX" ? articleMagasinagePartSocomar.CCArticleEx : articleMagasinagePartSocomar.CCArticle;
                        eltFactMagasinagePartSocomar.DestEF = "C";
                        eltFactMagasinagePartSocomar.StatutEF = "En cours";
                        eltFactMagasinagePartSocomar.CodeArticle = articleMagasinagePartSocomar.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactMagasinagePartSocomar);

                        // Element de facturation debours PAD Magasinage
                        ELEMENT_FACTURATION eltFactDeboursPADMagasinage = new ELEMENT_FACTURATION();

                        eltFactDeboursPADMagasinage.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactDeboursPADMagasinage.EltFacture = "MF";
                        eltFactDeboursPADMagasinage.LibEF = articleDeboursPADMagasinage.LibArticle + "  - Mafi N° " + m.NumMafi; //AH "Debours PAD - Magasinage - Mafi N° " + m.NumMafi;
                        eltFactDeboursPADMagasinage.DateJEF = DateTime.Now;
                        eltFactDeboursPADMagasinage.IdLP = lpDeboursPADMagasinage.IdLP;
                        eltFactDeboursPADMagasinage.PUEF = lpDeboursPADMagasinage.PU1LP;
                        eltFactDeboursPADMagasinage.QTEEF = 0;
                        eltFactDeboursPADMagasinage.UnitEF = lpDeboursPADMagasinage.UniteLP;
                        eltFactDeboursPADMagasinage.IdEsc = matchedConnaissement.IdEsc;
                        eltFactDeboursPADMagasinage.IdMan = matchedConnaissement.IdMan;
                        eltFactDeboursPADMagasinage.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactDeboursPADMagasinage.IdMafi = m.IdMafi;
                        eltFactDeboursPADMagasinage.CodeTVA = articleDeboursPADMagasinage.CodeTVA;// "TVAEX";
                        eltFactDeboursPADMagasinage.TauxTVA = articleDeboursPADMagasinage.CODE_TVA.TauxTVA; //0;
                        eltFactDeboursPADMagasinage.CCArticle = articleDeboursPADMagasinage.CCArticle;
                        eltFactDeboursPADMagasinage.DestEF = "C";
                        eltFactDeboursPADMagasinage.StatutEF = "En cours";
                        eltFactDeboursPADMagasinage.CodeArticle = articleDeboursPADMagasinage.CodeArticle.ToString();

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADMagasinage);

                        /**
                         * // Element de facturation debours PAD TVA Magasinage
                        ELEMENT_FACTURATION eltFactDeboursPADTVAMagasinage = new ELEMENT_FACTURATION();

                        eltFactDeboursPADTVAMagasinage.CCCP = m.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactDeboursPADTVAMagasinage.EltFacture = "MF";
                        eltFactDeboursPADTVAMagasinage.LibEF = "Debours PAD - TVA sur magasinage - Mafi N° " + m.NumMafi;
                        eltFactDeboursPADTVAMagasinage.DateJEF = DateTime.Now;
                        eltFactDeboursPADTVAMagasinage.IdLP = lpDeboursPADTVAMagasinage.IdLP;
                        eltFactDeboursPADTVAMagasinage.PUEF = lpDeboursPADTVAMagasinage.PU1LP;
                        eltFactDeboursPADTVAMagasinage.QTEEF = 0;
                        eltFactDeboursPADTVAMagasinage.UnitEF = lpDeboursPADTVAMagasinage.UniteLP;
                        eltFactDeboursPADTVAMagasinage.IdEsc = matchedConnaissement.IdEsc;
                        eltFactDeboursPADTVAMagasinage.IdMan = matchedConnaissement.IdMan;
                        eltFactDeboursPADTVAMagasinage.IdBL = m.CONNAISSEMENT.IdBL;
                        eltFactDeboursPADTVAMagasinage.IdMafi = m.IdMafi;
                        eltFactDeboursPADTVAMagasinage.CodeTVA = articleDeboursPADMagasinage.CodeTVA;// "TVAEX";
                        eltFactDeboursPADTVAMagasinage.TauxTVA = articleDeboursPADMagasinage.CODE_TVA.TauxTVA; //0;
                        eltFactDeboursPADTVAMagasinage.CCArticle = articleDeboursPADTVAMagasinage.CCArticleEx;
                        eltFactDeboursPADTVAMagasinage.DestEF = "C";
                        eltFactDeboursPADTVAMagasinage.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADTVAMagasinage);
                        **/

                        var matchedMafi = (from mf in dcAcc.GetTable<MAFI>()
                                           where mf.IdMafi == m.IdMafi
                                           select mf).SingleOrDefault<MAFI>();

                        if (matchedMafi != null)
                        {
                            if (m.ESCALE.DRAEsc == null)
                            {
                                if (m.StatMafi == "Traité")
                                {
                                    m.StatMafi = "Manifesté";
                                }
                            }
                            else
                            {
                                if (m.StatMafi == "Traité")
                                {
                                    m.StatMafi = "Manifesté";
                                }
                                m.FFMafi = m.ESCALE.DRAEsc.Value.AddDays(10);
                                m.FSMafi = m.ESCALE.DRAEsc.Value.AddDays(11);
                                m.FFSMafi = m.ESCALE.DRAEsc.Value.AddDays(11);
                            }
                        }
                    } 
                    #endregion

                    // Génération des éléments de facturation sur les conventionnels de l'escale
                    
                    #region conventionel
                    foreach (CONVENTIONNEL c in matchedConnaissement.CONVENTIONNEL)
                    {
                        double derogation = (c.CONNAISSEMENT.BLIL == "Y" || c.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                        if (c.NumGC == "")
                        {
                            c.NumGC = "GC" + FormatReference(c.IdGC);
                        }

                        if (c.TypeMGC == "200")
                        {

                        }
                        else
                        {
                            // Element de facturation manutention terre
                            ELEMENT_FACTURATION eltFactManutTerre = new ELEMENT_FACTURATION();

                            eltFactManutTerre.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactManutTerre.EltFacture = "GC";
                            eltFactManutTerre.LibEF = articleManutTerre.LibArticle + " - Colis N° " + c.NumGC; //AH "Manutention Terre - Colis N° " + c.NumGC;
                            eltFactManutTerre.DateJEF = DateTime.Now;
                            eltFactManutTerre.IdLP = lpManutTerre.IdLP;
                            eltFactManutTerre.QTEEF = c.PoidsCGC;
                            eltFactManutTerre.PUEF = Math.Round(Convert.ToDouble(articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == c.TypeCGC).PU1LP - articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == c.TypeCGC).PU1LP * derogation), 0, MidpointRounding.AwayFromZero);
                            eltFactManutTerre.UnitEF = articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == c.TypeCGC).UniteLP;
                            eltFactManutTerre.IdEsc = matchedConnaissement.IdEsc;
                            eltFactManutTerre.IdMan = matchedConnaissement.IdMan;
                            eltFactManutTerre.IdBL = c.CONNAISSEMENT.IdBL;
                            eltFactManutTerre.IdGC = c.IdGC;
                            eltFactManutTerre.CodeTVA = c.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                            eltFactManutTerre.TauxTVA = eltFactManutTerre.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                            eltFactManutTerre.CCArticle = articleManutTerre.CODE_TVA.TauxTVA == 0 ? articleManutTerre.CCArticleEx : articleManutTerre.CCArticle;
                            eltFactManutTerre.DestEF = "C";
                            eltFactManutTerre.StatutEF = "En cours";
                            eltFactManutTerre.CodeArticle = articleManutTerre.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutTerre);

                            // Element de facturation supplément tonnage
                            ELEMENT_FACTURATION eltFactSupplementTonage = new ELEMENT_FACTURATION();

                            eltFactSupplementTonage.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSupplementTonage.EltFacture = "GC";
                            eltFactSupplementTonage.LibEF = articleManutTerreSupplementTonnage.LibArticle + "  - Colis N° " + c.NumGC; //AH "Manutention Terre - Supplément tonnage - Colis N° " + c.NumGC;
                            eltFactSupplementTonage.DateJEF = DateTime.Now;
                            eltFactSupplementTonage.IdLP = lpManutTerreSupplementTonnage.IdLP;
                            eltFactSupplementTonage.UnitEF = lpManutTerreSupplementTonnage.UniteLP;
                            eltFactSupplementTonage.IdEsc = matchedConnaissement.IdEsc;
                            eltFactSupplementTonage.IdMan = matchedConnaissement.IdMan;
                            eltFactSupplementTonage.IdBL = c.CONNAISSEMENT.IdBL;
                            eltFactSupplementTonage.IdGC = c.IdGC;
                            eltFactSupplementTonage.CodeTVA = c.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                            eltFactSupplementTonage.TauxTVA = eltFactSupplementTonage.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSupplementTonage.CCArticle = articleManutTerreSupplementTonnage.CODE_TVA.TauxTVA == 0 ? articleManutTerreSupplementTonnage.CCArticleEx : articleManutTerreSupplementTonnage.CCArticle;
                            eltFactSupplementTonage.DestEF = "C";
                            eltFactSupplementTonage.StatutEF = "En cours";
                            eltFactSupplementTonage.CodeArticle = articleManutTerreSupplementTonnage.CodeArticle.ToString();

                            if (c.TypeMGC == "I402" || c.TypeMGC == "I403" || c.TypeMGC == "I404" || c.TypeMGC == "I405")
                            {
                                if (c.PoidsCGC > 10)
                                {
                                    eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU3LP - lpManutTerreSupplementTonnage.PU3LP * derogation), 0, MidpointRounding.AwayFromZero);
                                    eltFactSupplementTonage.QTEEF = c.PoidsCGC - 10;
                                }
                                else if (c.PoidsCGC > 5)
                                {
                                    eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU4LP - lpManutTerreSupplementTonnage.PU4LP * derogation), 0, MidpointRounding.AwayFromZero);
                                    eltFactSupplementTonage.QTEEF = c.PoidsCGC - 5;
                                }
                            }
                            else
                            {
                                if (c.PoidsCGC > 10)
                                {
                                    eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU1LP - lpManutTerreSupplementTonnage.PU1LP * derogation), 0, MidpointRounding.AwayFromZero);
                                    eltFactSupplementTonage.QTEEF = c.PoidsCGC - 10;
                                }
                                else if (c.PoidsCGC > 5)
                                {
                                    eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU2LP - lpManutTerreSupplementTonnage.PU2LP * derogation), 0, MidpointRounding.AwayFromZero);
                                    eltFactSupplementTonage.QTEEF = c.PoidsCGC - 5;
                                }
                            }

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementTonage);

                            // Element de facturation supplément volume
                            ELEMENT_FACTURATION eltFactSupplementVolume = new ELEMENT_FACTURATION();

                            eltFactSupplementVolume.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSupplementVolume.EltFacture = "GC";
                            eltFactSupplementVolume.LibEF = articleSupplementVolumeVehicule.LibArticle + " - Colis N° " + c.NumGC; //AH "Manutention Terre - Supplément volume - Colis N° " + c.NumGC;
                            eltFactSupplementVolume.DateJEF = DateTime.Now;
                            eltFactSupplementVolume.IdLP = lpSupplementVolumeVehicule.IdLP;
                            eltFactSupplementVolume.PUEF = c.VolCGC > 4 ? Math.Round(Convert.ToDouble(lpSupplementVolumeVehicule.PU2LP - lpSupplementVolumeVehicule.PU2LP * derogation), 0, MidpointRounding.AwayFromZero) : 0;
                            eltFactSupplementVolume.QTEEF = c.VolCGC > 4 ? c.VolCGC - 4 : 0;
                            eltFactSupplementVolume.UnitEF = lpSupplementVolumeVehicule.UniteLP;
                            eltFactSupplementVolume.IdEsc = matchedConnaissement.IdEsc;
                            eltFactSupplementVolume.IdMan = matchedConnaissement.IdMan;
                            eltFactSupplementVolume.IdBL = c.CONNAISSEMENT.IdBL;
                            eltFactSupplementVolume.IdGC = c.IdGC;
                            eltFactSupplementVolume.CodeTVA = c.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                            eltFactSupplementVolume.TauxTVA = eltFactSupplementVolume.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSupplementVolume.CCArticle = articleSupplementVolumeVehicule.CODE_TVA.TauxTVA == 0 ? articleSupplementVolumeVehicule.CCArticleEx : articleSupplementVolumeVehicule.CCArticle;
                            eltFactSupplementVolume.DestEF = "C";
                            eltFactSupplementVolume.StatutEF = "En cours";
                            eltFactSupplementVolume.CodeArticle = articleSupplementVolumeVehicule.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementVolume);

                            // Element de facturation relevage
                            ELEMENT_FACTURATION eltFactRelevage = new ELEMENT_FACTURATION();

                            eltFactRelevage.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactRelevage.EltFacture = "GC";
                            eltFactRelevage.LibEF = articleRelevage.LibArticle + " - Colis N° " + c.NumGC;//AH "Relevage - Colis N° " + c.NumGC;
                            eltFactRelevage.DateJEF = DateTime.Now;
                            eltFactRelevage.IdLP = lpRelevage.IdLP;
                            eltFactRelevage.PUEF = lpRelevage.PU1LP;
                            eltFactRelevage.QTEEF = c.PoidsCGC;
                            eltFactRelevage.UnitEF = lpRelevage.UniteLP;
                            eltFactRelevage.IdEsc = matchedConnaissement.IdEsc;
                            eltFactRelevage.IdMan = matchedConnaissement.IdMan;
                            eltFactRelevage.IdBL = c.CONNAISSEMENT.IdBL;
                            eltFactRelevage.IdGC = c.IdGC;
                            eltFactRelevage.CodeTVA = c.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                            eltFactRelevage.TauxTVA = eltFactRelevage.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                            eltFactRelevage.CCArticle = articleRelevage.CODE_TVA.TauxTVA == 0 ? articleRelevage.CCArticleEx : articleRelevage.CCArticle;
                            eltFactRelevage.DestEF = "C";
                            eltFactRelevage.StatutEF = "En cours";
                            eltFactRelevage.CodeArticle = articleRelevage.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactRelevage);

                            // Element de facturation Magasinage Part Socomar
                            ELEMENT_FACTURATION eltFactMagasinagePartSocomar = new ELEMENT_FACTURATION();

                            eltFactMagasinagePartSocomar.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactMagasinagePartSocomar.EltFacture = "GC";
                            eltFactMagasinagePartSocomar.LibEF = articleMagasinagePartSocomar.LibArticle + " - Colis N° " + c.NumGC; //AH "Magasinage Part Socomar - Colis N° " + c.NumGC;
                            eltFactMagasinagePartSocomar.DateJEF = DateTime.Now;
                            eltFactMagasinagePartSocomar.IdLP = lpMagasinagePartSocomar.IdLP;
                            eltFactMagasinagePartSocomar.PUEF = lpMagasinagePartSocomar.PU1LP;
                            eltFactMagasinagePartSocomar.QTEEF = 0;
                            eltFactMagasinagePartSocomar.UnitEF = lpMagasinagePartSocomar.UniteLP;
                            eltFactMagasinagePartSocomar.IdEsc = matchedConnaissement.IdEsc;
                            eltFactMagasinagePartSocomar.IdMan = matchedConnaissement.IdMan;
                            eltFactMagasinagePartSocomar.IdBL = c.CONNAISSEMENT.IdBL;
                            eltFactMagasinagePartSocomar.IdGC = c.IdGC;
                            eltFactMagasinagePartSocomar.CodeTVA = c.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                            eltFactMagasinagePartSocomar.TauxTVA = eltFactMagasinagePartSocomar.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                            eltFactMagasinagePartSocomar.CCArticle = articleMagasinagePartSocomar.CODE_TVA.TauxTVA == 0 ? articleMagasinagePartSocomar.CCArticleEx : articleMagasinagePartSocomar.CCArticle;
                            eltFactMagasinagePartSocomar.DestEF = "C";
                            eltFactMagasinagePartSocomar.StatutEF = "En cours";
                            eltFactMagasinagePartSocomar.CodeArticle = articleMagasinagePartSocomar.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactMagasinagePartSocomar);

                            // Element de facturation debours PAD Magasinage
                            ELEMENT_FACTURATION eltFactDeboursPADMagasinage = new ELEMENT_FACTURATION();

                            eltFactDeboursPADMagasinage.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactDeboursPADMagasinage.EltFacture = "GC";
                            eltFactDeboursPADMagasinage.LibEF = articleDeboursPADMagasinage.LibArticle + " - Colis N° " + c.NumGC; //AH "Debours PAD - Magasinage - Colis N° " + c.NumGC;
                            eltFactDeboursPADMagasinage.DateJEF = DateTime.Now;
                            eltFactDeboursPADMagasinage.IdLP = lpDeboursPADMagasinage.IdLP;
                            eltFactDeboursPADMagasinage.PUEF = lpDeboursPADMagasinage.PU1LP;
                            eltFactDeboursPADMagasinage.QTEEF = 0;
                            eltFactDeboursPADMagasinage.UnitEF = lpDeboursPADMagasinage.UniteLP;
                            eltFactDeboursPADMagasinage.IdEsc = matchedConnaissement.IdEsc;
                            eltFactDeboursPADMagasinage.IdMan = matchedConnaissement.IdMan;
                            eltFactDeboursPADMagasinage.IdBL = c.CONNAISSEMENT.IdBL;
                            eltFactDeboursPADMagasinage.IdGC = c.IdGC;
                            eltFactDeboursPADMagasinage.CodeTVA = articleDeboursPADMagasinage.CodeTVA; //"TVAEX";
                            eltFactDeboursPADMagasinage.TauxTVA = articleDeboursPADMagasinage.CODE_TVA.TauxTVA; //0;
                            eltFactDeboursPADMagasinage.CCArticle = articleDeboursPADMagasinage.CODE_TVA.TauxTVA == 0 ? articleDeboursPADMagasinage.CCArticleEx : articleDeboursPADMagasinage.CCArticle;
                            eltFactDeboursPADMagasinage.DestEF = "C";
                            eltFactDeboursPADMagasinage.StatutEF = "En cours";
                            eltFactDeboursPADMagasinage.CodeArticle = articleDeboursPADMagasinage.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADMagasinage);

                            /**
                             * // Element de facturation debours PAD TVA Magasinage
                             ELEMENT_FACTURATION eltFactDeboursPADTVAMagasinage = new ELEMENT_FACTURATION();

                             eltFactDeboursPADTVAMagasinage.CCCP = c.CONNAISSEMENT.CLIENT.CodeClient;
                             eltFactDeboursPADTVAMagasinage.EltFacture = "GC";
                             eltFactDeboursPADTVAMagasinage.LibEF = "Debours PAD - TVA sur magasinage - Colis N° " + c.NumGC;
                             eltFactDeboursPADTVAMagasinage.DateJEF = DateTime.Now;
                             eltFactDeboursPADTVAMagasinage.IdLP = lpDeboursPADTVAMagasinage.IdLP;
                             eltFactDeboursPADTVAMagasinage.PUEF = lpDeboursPADTVAMagasinage.PU1LP;
                             eltFactDeboursPADTVAMagasinage.QTEEF = 0;
                             eltFactDeboursPADTVAMagasinage.UnitEF = lpDeboursPADTVAMagasinage.UniteLP;
                             eltFactDeboursPADTVAMagasinage.IdEsc = matchedConnaissement.IdEsc;
                             eltFactDeboursPADTVAMagasinage.IdMan = matchedConnaissement.IdMan;
                             eltFactDeboursPADTVAMagasinage.IdBL = c.CONNAISSEMENT.IdBL;
                             eltFactDeboursPADTVAMagasinage.IdGC = c.IdGC;
                             eltFactDeboursPADTVAMagasinage.CodeTVA = "TVAEX";
                             eltFactDeboursPADTVAMagasinage.TauxTVA = 0;
                             eltFactDeboursPADTVAMagasinage.CCArticle = articleDeboursPADTVAMagasinage.CODE_TVA.TauxTVA == 0 ? articleDeboursPADTVAMagasinage.CCArticleEx : articleDeboursPADTVAMagasinage.CCArticle;
                             eltFactDeboursPADTVAMagasinage.DestEF = "C";
                             eltFactDeboursPADTVAMagasinage.StatutEF = "En cours";

                             dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADTVAMagasinage);
                             **/
                        }

                        var matchedConv = (from conv in dcAcc.GetTable<CONVENTIONNEL>()
                                           where conv.IdGC == c.IdGC
                                           select conv).SingleOrDefault<CONVENTIONNEL>();

                        if (matchedConv != null)
                        {
                            if (c.ESCALE.DRAEsc == null)
                            {
                                if (c.StatGC == "Traité")
                                {
                                    c.StatGC = "Manifesté";
                                }
                            }
                            else
                            {
                                if (c.StatGC == "Traité")
                                {
                                    c.StatGC = "Manifesté";
                                }
                                c.FFGC = c.ESCALE.DRAEsc.Value.AddDays(11);
                                c.FSGC = c.ESCALE.DRAEsc.Value.AddDays(11);
                            }
                        }
                    } 
                    #endregion
                }

                #region insert remote sys
                RMT_CONNAISSEMENT rmt_con = new RMT_CONNAISSEMENT();
                rmt_con.Adresse = matchedConnaissement.AdresseBL;
                rmt_con.Client = (int)matchedConnaissement.IdClient;
                rmt_con.Consignee = matchedConnaissement.ConsigneeBL;
                rmt_con.Notify = matchedConnaissement.NotifyBL;
                rmt_con.NumBl = matchedConnaissement.NumBL;
                rmt_con.SysId = matchedConnaissement.IdBL;
                dcAcc.RMT_CONNAISSEMENT.InsertOnSubmit(rmt_con);

                #endregion

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConnaissement;
            }
        }

        public CONNAISSEMENT ExonererTVABL(int idBL, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Connaissement : Exonération de TVA").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour exonérer un BL de TVA. Veuillez contacter un administrateur");
                }

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Le connaissement auquel vous faites référence n'existe pas");
                }

                if (matchedConnaissement.DVBL.HasValue)
                {
                    throw new ConnaissementException("Echec d'exonération de TVA : Ce connaissement a déjà été validé");
                }

                matchedConnaissement.CodeTVA = "TVAEX";

                foreach (ELEMENT_FACTURATION elt in matchedConnaissement.ELEMENT_FACTURATION.Where(el => el.StatutEF != "Annule"))
                {
                    elt.StatutEF = "Annule";
                }

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdBL = matchedConnaissement.IdBL;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note d'exonération TVA";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

                #region insert remote sys
                RMT_CONNAISSEMENT rmt_con = new RMT_CONNAISSEMENT();
                rmt_con.Adresse = matchedConnaissement.AdresseBL;
                rmt_con.Client = (int)matchedConnaissement.IdClient;
                rmt_con.Consignee = matchedConnaissement.ConsigneeBL;
                rmt_con.Notify = matchedConnaissement.NotifyBL;
                rmt_con.NumBl = matchedConnaissement.NumBL;
                rmt_con.SysId = matchedConnaissement.IdBL;
                dcAcc.RMT_CONNAISSEMENT.InsertOnSubmit(rmt_con);

                #endregion

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConnaissement;
            }
        }

        /// <summary>
        /// maj de bl
        /// </summary>
        /// <param name="idBL"></param>
        /// <param name="consBL"></param>
        /// <param name="adresseBL"></param>
        /// <param name="notifyBL"></param>
        /// <param name="emailBL"></param>
        /// <param name="idClient"></param>
        /// <param name="lpbl">port provenance</param>
        /// <param name="destBL">destination bl</param>
        /// <param name="nomCharger"></param>
        /// <param name="adresseCharger"></param>
        /// <param name="chkBLER">bl express release</param>
        /// <param name="bLERNote">express release note</param>
        /// <param name="chkBLGN">incoterm grand nord</param>
        /// <param name="chkBLIL">incoterm hinterlnd</param>
        /// <param name="chkBLFO">incoterm free out</param>
        /// <param name="chkBLLT">incotem line out</param>
        /// <param name="chkBLBloque">bl bloque</param>
        /// <param name="blBloqueNote">note bl bloque</param>
        /// <param name="chkCCBL">fret collecter</param>
        /// <param name="montantCCBL">montant fret a collecte</param>
        /// <param name="chkDetteBL">dette collectee</param>
        /// <param name="montantDetteBL">montant dette</param>
        /// <param name="chkBLSOCAR">bl socar</param>
        /// <param name="numSocar">num socar</param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public CONNAISSEMENT UpdateConnaissement(int idBL, string consBL, string adresseBL, string notifyBL, string emailBL, int idClient, string lpbl, string destBL, string nomCharger, string adresseCharger, string chkBLER, string bLERNote, string chkBLGN, string chkBLIL, string chkBLFO, string chkBLLT, string chkBLBloque, string blBloqueNote, string chkCCBL, int montantCCBL, string chkDetteBL, int montantDetteBL, string chkBLSOCAR, string numSocar, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).FirstOrDefault<CONNAISSEMENT>();

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Connaissement inexistant");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                DateTime dte = DateTime.Now;

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Connaissement : Modification des informations sur un élément existant").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour modifier un connaissement. Veuillez contacter un administrateur");
                }

                ////Historisation des informations
                //HIST_CONNAISSEMENT histBL = new HIST_CONNAISSEMENT
                //{
                //    AdresseBL = matchedConnaissement.AdresseBL == null ? "" : matchedConnaissement.AdresseBL,
                //    BlBloque = matchedConnaissement.BlBloque == null ? "N" : matchedConnaissement.BlBloque,
                //    BLBloqueNote = matchedConnaissement.BLBloqueNote == null ? "" : matchedConnaissement.BLBloqueNote,
                //    BLDette = matchedConnaissement.BLDette,
                //    BLER = matchedConnaissement.BLER,
                //    BLERNote = matchedConnaissement.BLERNote == null ? "" : matchedConnaissement.BLERNote,
                //    BLFO = matchedConnaissement.BLFO,
                //    BLGN = matchedConnaissement.BLGN,
                //    BLIL = matchedConnaissement.BLIL,
                //    BLLT = matchedConnaissement.BLLT,
                //    BLSocar = matchedConnaissement.BLSocar,
                //    NumSocar = matchedConnaissement.NumSocar == null ? "" : matchedConnaissement.NumSocar,
                //    CCBL = matchedConnaissement.CCBL,
                //    CCBLMontant = matchedConnaissement.CCBLMontant == null ? 0 : matchedConnaissement.CCBLMontant,
                //    ConsigneeBL = matchedConnaissement.ConsigneeBL == null ? "" : matchedConnaissement.ConsigneeBL,
                //    DestBL = matchedConnaissement.DestBL,
                //    DetteMontant = matchedConnaissement.DetteMontant == null ? 0 : matchedConnaissement.DetteMontant,
                //    DPBL = matchedConnaissement.DPBL == null ? "" : matchedConnaissement.DPBL,
                //    EmailBL = matchedConnaissement.EmailBL == null ? "" : matchedConnaissement.EmailBL,
                //    IdBL = matchedConnaissement.IdBL,
                //    IdClient = matchedConnaissement.IdClient,
                //    IdMan = matchedConnaissement.IdMan,
                //    IdEsc = matchedConnaissement.IdEsc,
                //    LPBL = matchedConnaissement.LPBL,
                //    NotifyBL = matchedConnaissement.NotifyBL == null ? "" : matchedConnaissement.NotifyBL,
                //    NumBL = matchedConnaissement.NumBL,
                //    SensBL = matchedConnaissement.SensBL,
                //    StatutBL = matchedConnaissement.StatutBL,
                //    IdU = matchedConnaissement.IdU.Value
                //};

                //dcAcc.HIST_CONNAISSEMENT.InsertOnSubmit(histBL);

                matchedConnaissement.LastModif = DateTime.Now;
                matchedConnaissement.IdU = idUser;

                // Il y a des vérifications à faire sur les droits de l'utilisateur qui demande l'opération
                if (operationsUser.Where(op => op.NomOp == "Connaissement : Modification des informations de base").FirstOrDefault<OPERATION>() != null || matchedUser.LU == "Admin")
                {
                    if (matchedConnaissement.StatutBL == "Initié" && matchedConnaissement.MANIFESTE.DVMan.HasValue)
                    {
                        matchedConnaissement.StatutBL = "Traité";
                        foreach (VEHICULE veh in matchedConnaissement.VEHICULE)
                        {
                            if (veh.StatVeh == "Non initié")
                            {
                                veh.StatVeh = "Traité";
                            }
                        }
                        foreach (CONTENEUR cont in matchedConnaissement.CONTENEUR)
                        {
                            if (cont.StatCtr == "Non initié")
                            {
                                cont.StatCtr = "Traité";
                            }
                        }
                        foreach (MAFI maf in matchedConnaissement.MAFI)
                        {
                            if (maf.StatMafi == "Non initié")
                            {
                                maf.StatMafi = "Traité";
                            }
                        }
                        foreach (CONVENTIONNEL conv in matchedConnaissement.CONVENTIONNEL)
                        {
                            if (conv.StatGC == "Non initié")
                            {
                                conv.StatGC = "Traité";
                            }
                        }

                        OPERATION_CONNAISSEMENT matchedOpBL = (from op in dcAcc.GetTable<OPERATION_CONNAISSEMENT>()
                                                        where op.IdBL == matchedConnaissement.IdBL && op.IdTypeOp == 34
                                                        select op).SingleOrDefault<OPERATION_CONNAISSEMENT>();

                        matchedOpBL.DateOp = DateTime.Now;
                        matchedOpBL.IdU = idUser;
                        matchedOpBL.AIOp = "Traité";

                        dcAcc.OPERATION_CONNAISSEMENT.Context.SubmitChanges();
                    }

                    matchedConnaissement.ConsigneeBL = consBL;
                    matchedConnaissement.AdresseBL = adresseBL;
                    matchedConnaissement.NotifyBL = notifyBL;
                    matchedConnaissement.EmailBL = emailBL;
                    matchedConnaissement.CLIENT = dcAcc.CLIENT.FirstOrDefault<CLIENT>(clt => clt.IdClient == idClient);
                    matchedConnaissement.LPBL = lpbl;
                    matchedConnaissement.DestBL = destBL;
                    matchedConnaissement.NomCharger = nomCharger;
                    matchedConnaissement.AdresseCharger = adresseCharger;
                }

                if (operationsUser.Where(op => op.NomOp == "Connaissement : Modification des incoterms").FirstOrDefault<OPERATION>() != null || matchedUser.LU == "Admin")
                {
                    matchedConnaissement.BLGN = chkBLGN;
                    matchedConnaissement.BLIL = chkBLIL;
                    matchedConnaissement.BLLT = chkBLLT;
                    matchedConnaissement.BLFO = chkBLFO;
                    if (chkBLIL == "Y")
                    {
                        matchedConnaissement.CODE_TVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAEX");
                    }
                    else
                    {
                        //if (matchedConnaissement.CodeTVA != "TVAEX")
                        //{
                        //    matchedConnaissement.CODE_TVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP");
                        //}
                        matchedConnaissement.CODE_TVA = dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP");
                    }
                }

                if (chkBLIL == "Y")
                {
                    foreach (ELEMENT_FACTURATION elt in matchedConnaissement.ELEMENT_FACTURATION)
                    {
                        elt.CodeTVA = "TVAEX";
                        elt.TauxTVA = 0;
                        elt.QTEEF = elt.LibEF.Contains("TVA") ? 0 : elt.QTEEF;
                    }
                }

                if (operationsUser.Where(op => op.NomOp == "Connaissement : Modification des informations du chargeur").FirstOrDefault<OPERATION>() != null || matchedUser.LU == "Admin")
                {
                    matchedConnaissement.BLSocar = chkBLSOCAR;
                    matchedConnaissement.NumSocar = numSocar;
                    matchedConnaissement.CCBL = chkCCBL;
                    matchedConnaissement.CCBLMontant = montantCCBL;
                    matchedConnaissement.BLDette = chkDetteBL;
                    matchedConnaissement.DetteMontant = montantDetteBL;
                    matchedConnaissement.BlBloque = chkBLBloque;
                    matchedConnaissement.BLBloqueNote = blBloqueNote;
                    matchedConnaissement.BLER = chkBLER;
                    matchedConnaissement.BLERNote = bLERNote;

                    if (blBloqueNote.Trim() != "" && matchedConnaissement.BLBloqueNote != blBloqueNote.Trim())
                    {
                        NOTE noteBloque = new NOTE();
                        noteBloque.IdBL = matchedConnaissement.IdBL;
                        noteBloque.DateNote = DateTime.Now;
                        noteBloque.IdU = idUser;
                        noteBloque.TitreNote = "BL Bloqué";
                        noteBloque.DescNote = blBloqueNote;

                        dcAcc.NOTE.InsertOnSubmit(noteBloque);
                    }

                    if (chkBLBloque == "N" && blBloqueNote.Trim() != "")
                    {
                        NOTE noteBloque = new NOTE();
                        noteBloque.IdBL = matchedConnaissement.IdBL;
                        noteBloque.DateNote = DateTime.Now;
                        noteBloque.IdU = idUser;
                        noteBloque.TitreNote = "BL Débloqué";
                        noteBloque.DescNote = matchedConnaissement.BLBloqueNote;

                        dcAcc.NOTE.InsertOnSubmit(noteBloque);
                    }

                    if (bLERNote.Trim() != "" && matchedConnaissement.BLERNote != bLERNote.Trim())
                    {
                        NOTE noteER = new NOTE();
                        noteER.IdBL = matchedConnaissement.IdBL;
                        noteER.DateNote = DateTime.Now;
                        noteER.IdU = idUser;
                        noteER.TitreNote = "BL Express Release";
                        noteER.DescNote = blBloqueNote;

                        dcAcc.NOTE.InsertOnSubmit(noteER);
                    }

                }

                //insertion de la ligne de facturation liée à BL SOCAR
                List<ELEMENT_FACTURATION> matchedEltsBESC = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                             where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("Débours SOCAR : BESC") && ef.StatutEF != "Annule"
                                                             select ef).ToList<ELEMENT_FACTURATION>();

                if (matchedConnaissement.BLSocar == "Y" && chkBLIL != "Y")
                {
                    #region AH arret traitement bl socar

                    //ARTICLE articleDeboursSOCARBESC = (from art in dcAcc.GetTable<ARTICLE>()
                    //                                   from par in dcAcc.GetTable<PARAMETRE>()
                    //                                   where art.CodeArticle == par.CodeAF && par.NomAF == "Débours SOCAR : BESC"
                    //                                   select art).FirstOrDefault<ARTICLE>();

                    //LIGNE_PRIX lpDeboursSOCARBESC = articleDeboursSOCARBESC.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    //ELEMENT_FACTURATION matchedEltBESCVeh = matchedEltsBESC.FirstOrDefault<ELEMENT_FACTURATION>(elt => elt.LibEF.Contains("Veh"));

                    //if (matchedEltBESCVeh == null)
                    //{
                    //    ELEMENT_FACTURATION elt = new ELEMENT_FACTURATION();
                    //    elt.DateJEF = DateTime.Now;
                    //    elt.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                    //    elt.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Veh";
                    //    elt.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    //    elt.EltFacture = "BL";
                    //    elt.IdLP = lpDeboursSOCARBESC.IdLP;
                    //    elt.QTEEF = matchedConnaissement.VEHICULE.Count;
                    //    //elt.QTEEF = matchedConnaissement.VEHICULE.Count(veh => !veh.IdVehAP.HasValue);
                    //    elt.UnitEF = lpDeboursSOCARBESC.UniteLP;
                    //    elt.CodeTVA = articleDeboursSOCARBESC.CodeTVA;//"TVAEX";
                    //    elt.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA;
                    //    elt.PUEF = lpDeboursSOCARBESC.PU1LP;
                    //    elt.IdEsc = matchedConnaissement.IdEsc;
                    //    elt.IdMan = matchedConnaissement.IdMan;
                    //    elt.IdBL = matchedConnaissement.IdBL;
                    //    elt.DestEF = "C";
                    //    elt.StatutEF = "En cours";

                    //    dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(elt);
                    //}
                    //else
                    //{
                    //    matchedEltBESCVeh.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                    //    matchedEltBESCVeh.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Veh";
                    //    matchedEltBESCVeh.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    //    matchedEltBESCVeh.EltFacture = "BL";
                    //    matchedEltBESCVeh.CodeTVA = articleDeboursSOCARBESC.CodeTVA;//"TVAEX";
                    //    matchedEltBESCVeh.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA;
                    //    matchedEltBESCVeh.IdLP = lpDeboursSOCARBESC.IdLP;
                    //    matchedEltBESCVeh.QTEEF = matchedConnaissement.VEHICULE.Count;
                    //    //matchedEltBESCVeh.QTEEF = matchedConnaissement.VEHICULE.Count(veh => !veh.IdVehAP.HasValue);
                    //    matchedEltBESCVeh.PUEF = lpDeboursSOCARBESC.PU1LP;
                    //    matchedEltBESCVeh.IdEsc = matchedConnaissement.IdEsc;
                    //    matchedEltBESCVeh.IdMan = matchedConnaissement.IdMan;
                    //    matchedEltBESCVeh.IdBL = matchedConnaissement.IdBL;
                    //}

                    //ELEMENT_FACTURATION matchedEltBESCCtr20 = matchedEltsBESC.FirstOrDefault<ELEMENT_FACTURATION>(elt => elt.LibEF.Contains("Ctr 20"));


                    //if (matchedEltBESCCtr20 == null)
                    //{
                    //    ELEMENT_FACTURATION elt = new ELEMENT_FACTURATION();
                    //    elt.DateJEF = DateTime.Now;
                    //    elt.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                    //    elt.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Ctr 20";
                    //    elt.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    //    elt.EltFacture = "BL";
                    //    elt.IdLP = lpDeboursSOCARBESC.IdLP;
                    //    elt.QTEEF = matchedConnaissement.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "20");
                    //    elt.UnitEF = lpDeboursSOCARBESC.UniteLP;
                    //    elt.CodeTVA = articleDeboursSOCARBESC.CodeTVA; //"TVAEX";
                    //    elt.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA;
                    //    elt.PUEF = lpDeboursSOCARBESC.PU2LP;
                    //    elt.IdEsc = matchedConnaissement.IdEsc;
                    //    elt.IdMan = matchedConnaissement.IdMan;
                    //    elt.IdBL = matchedConnaissement.IdBL;
                    //    elt.DestEF = "C";
                    //    elt.StatutEF = "En cours";

                    //    dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(elt);
                    //}
                    //else
                    //{
                    //    matchedEltBESCCtr20.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                    //    matchedEltBESCCtr20.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Ctr 20";
                    //    matchedEltBESCCtr20.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    //    matchedEltBESCCtr20.EltFacture = "BL";
                    //    matchedEltBESCCtr20.CodeTVA = articleDeboursSOCARBESC.CodeTVA;//"TVAEX";
                    //    matchedEltBESCCtr20.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA;
                    //    matchedEltBESCCtr20.IdLP = lpDeboursSOCARBESC.IdLP;
                    //    matchedEltBESCCtr20.QTEEF = matchedConnaissement.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "20");
                    //    matchedEltBESCCtr20.PUEF = lpDeboursSOCARBESC.PU2LP;
                    //    matchedEltBESCCtr20.IdEsc = matchedConnaissement.IdEsc;
                    //    matchedEltBESCCtr20.IdMan = matchedConnaissement.IdMan;
                    //    matchedEltBESCCtr20.IdBL = matchedConnaissement.IdBL;
                    //}

                    //ELEMENT_FACTURATION matchedEltBESCCtr40 = matchedEltsBESC.FirstOrDefault<ELEMENT_FACTURATION>(elt => elt.LibEF.Contains("Ctr 40"));

                    //if (matchedEltBESCCtr40 == null)
                    //{
                    //    ELEMENT_FACTURATION elt = new ELEMENT_FACTURATION();
                    //    elt.DateJEF = DateTime.Now;
                    //    elt.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                    //    elt.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Ctr 40";
                    //    elt.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    //    elt.EltFacture = "BL";
                    //    elt.IdLP = lpDeboursSOCARBESC.IdLP;
                    //    elt.QTEEF = matchedConnaissement.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "40");
                    //    elt.UnitEF = lpDeboursSOCARBESC.UniteLP;
                    //    elt.CodeTVA = articleDeboursSOCARBESC.CodeTVA;//"TVAEX";
                    //    elt.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA;
                    //    elt.PUEF = lpDeboursSOCARBESC.PU3LP;
                    //    elt.IdEsc = matchedConnaissement.IdEsc;
                    //    elt.IdMan = matchedConnaissement.IdMan;
                    //    elt.IdBL = matchedConnaissement.IdBL;
                    //    elt.DestEF = "C";
                    //    elt.StatutEF = "En cours";

                    //    dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(elt);
                    //}
                    //else
                    //{
                    //    matchedEltBESCCtr40.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                    //    matchedEltBESCCtr40.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Ctr 40";
                    //    matchedEltBESCCtr40.CCCP = matchedConnaissement.CLIENT.CodeClient;
                    //    matchedEltBESCCtr40.EltFacture = "BL";
                    //    matchedEltBESCCtr40.CodeTVA = articleDeboursSOCARBESC.CodeTVA; //"TVAEX";
                    //    matchedEltBESCCtr40.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA;
                    //    matchedEltBESCCtr40.IdLP = lpDeboursSOCARBESC.IdLP;
                    //    matchedEltBESCCtr40.QTEEF = matchedConnaissement.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "40");
                    //    matchedEltBESCCtr40.PUEF = lpDeboursSOCARBESC.PU3LP;
                    //    matchedEltBESCCtr40.IdEsc = matchedConnaissement.IdEsc;
                    //    matchedEltBESCCtr40.IdMan = matchedConnaissement.IdMan;
                    //    matchedEltBESCCtr40.IdBL = matchedConnaissement.IdBL;
                    //}

                    #endregion
                }
                else if (matchedEltsBESC.Count != 0)
                {
                    foreach (ELEMENT_FACTURATION eltsBESC in matchedEltsBESC)
                    {
                        eltsBESC.StatutEF = "Annule";
                    }
                }

                //insertion de la ligne de facturation liée à BL SOCAR Fret
                var matchedEltFretSOCAR = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                           where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("Débours") && ef.LibEF.Contains("Fret à collecter") && ef.StatutEF != "Annule"
                                           select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                var matchedEltCommissionFret = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("Commission sur Fret à collecter") && ef.StatutEF != "Annule"
                                                select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                if (matchedConnaissement.CCBL == "Y")
                {
                    #region AH arret Fret a collecter SOCOAR

                    /* ARTICLE articleDeboursSOCARFret = (from art in dcAcc.GetTable<ARTICLE>()
                                                       from par in dcAcc.GetTable<PARAMETRE>()
                                                       where art.CodeArticle == par.CodeAF && par.NomAF == "Débours SOCAR : Fret à collecter"
                                                       select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpDeboursSOCARFret = articleDeboursSOCARFret.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == (chkBLSOCAR == "Y" ? "SOCAR" : "NON SOCAR"));

                    ARTICLE articleCommissionSOCARFret = (from art in dcAcc.GetTable<ARTICLE>()
                                                          from par in dcAcc.GetTable<PARAMETRE>()
                                                          where art.CodeArticle == par.CodeAF && par.NomAF == "Commission sur Fret à collecter"
                                                          select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpCommissionSOCARFret = articleCommissionSOCARFret.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    if (matchedEltFretSOCAR == null)
                    {
                        ELEMENT_FACTURATION eltFret = new ELEMENT_FACTURATION();
                        eltFret.DateJEF = DateTime.Now;
                        eltFret.CCArticle = chkBLSOCAR == "Y" ? (matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARFret.ARTICLE.CCArticleEx : (lpDeboursSOCARFret.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARFret.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARFret.ARTICLE.CCArticle : lpDeboursSOCARFret.ARTICLE.CCArticleEx) : "47128";
                        eltFret.LibEF = chkBLSOCAR == "Y" ? "Débours SOCAR : Fret à collecter BL N° " + matchedConnaissement.NumBL : "Débours : Fret à collecter BL N° " + matchedConnaissement.NumBL;
                        eltFret.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        eltFret.EltFacture = "BL";
                        eltFret.CodeTVA = articleDeboursSOCARFret.CodeTVA; //"TVAEX";
                        eltFret.TauxTVA = articleDeboursSOCARFret.CODE_TVA.TauxTVA; //(articleDeboursSOCARFret.CodeTVA=="TVAEX") ? 0 : 19.25F;
                        eltFret.IdLP = lpDeboursSOCARFret.IdLP;
                        eltFret.QTEEF = 1;
                        eltFret.UnitEF = lpDeboursSOCARFret.UniteLP;
                        eltFret.PUEF = montantCCBL;
                        eltFret.IdEsc = matchedConnaissement.IdEsc;
                        eltFret.IdMan = matchedConnaissement.IdMan;
                        eltFret.IdBL = matchedConnaissement.IdBL;
                        eltFret.DestEF = "C";
                        eltFret.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFret);

                        if (montantCCBL >= 1000000)
                        {
                            ELEMENT_FACTURATION eltCommission = new ELEMENT_FACTURATION();
                            eltCommission.DateJEF = DateTime.Now;
                            eltCommission.LibEF = "Commission sur Fret à collecter - BL N° " + matchedConnaissement.NumBL;
                            eltCommission.CCCP = matchedConnaissement.CLIENT.CodeClient;
                            eltCommission.EltFacture = "BL";
                            eltCommission.CodeTVA = articleCommissionSOCARFret.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                            eltCommission.TauxTVA = eltCommission.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                            eltCommission.CCArticle = eltCommission.CodeTVA == "TVAEX" ? articleCommissionSOCARFret.CCArticleEx : articleCommissionSOCARFret.CCArticle;
                            eltCommission.IdLP = lpCommissionSOCARFret.IdLP;
                            eltCommission.QTEEF = 1;
                            eltCommission.UnitEF = lpCommissionSOCARFret.UniteLP;
                            eltCommission.PUEF = montantCCBL * 0.03;
                            eltCommission.IdEsc = matchedConnaissement.IdEsc;
                            eltCommission.IdMan = matchedConnaissement.IdMan;
                            eltCommission.IdBL = matchedConnaissement.IdBL;
                            eltCommission.DestEF = "C";
                            eltCommission.StatutEF = "En cours";

                            dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltCommission);
                        }
                    }
                    else
                    {
                        matchedEltFretSOCAR.CCArticle = chkBLSOCAR == "Y" ? (matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARFret.ARTICLE.CCArticleEx : (lpDeboursSOCARFret.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARFret.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARFret.ARTICLE.CCArticle : lpDeboursSOCARFret.ARTICLE.CCArticleEx) : "47128";
                        matchedEltFretSOCAR.LibEF = chkBLSOCAR == "Y" ? "Débours SOCAR : Fret à collecter BL N° " + matchedConnaissement.NumBL : "Débours : Fret à collecter BL N° " + matchedConnaissement.NumBL;
                        matchedEltFretSOCAR.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        matchedEltFretSOCAR.EltFacture = "BL";
                        matchedEltFretSOCAR.IdLP = lpDeboursSOCARFret.IdLP;
                        matchedEltFretSOCAR.QTEEF = 1;
                        matchedEltFretSOCAR.PUEF = montantCCBL;
                        matchedEltFretSOCAR.IdEsc = matchedConnaissement.IdEsc;
                        matchedEltFretSOCAR.IdMan = matchedConnaissement.IdMan;
                        matchedEltFretSOCAR.IdBL = matchedConnaissement.IdBL;

                        if (montantCCBL >= 1000000)
                        {
                            if (matchedEltCommissionFret != null)
                            {
                                matchedEltCommissionFret.CodeTVA = articleCommissionSOCARFret.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                matchedEltCommissionFret.TauxTVA = matchedEltCommissionFret.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                matchedEltCommissionFret.CCArticle = matchedEltCommissionFret.CodeTVA == "TVAEX" ? articleCommissionSOCARFret.CCArticleEx : articleCommissionSOCARFret.CCArticle;
                                matchedEltCommissionFret.LibEF = "Commission sur Fret à collecter - BL N° " + matchedConnaissement.NumBL;
                                matchedEltCommissionFret.CCCP = matchedConnaissement.CLIENT.CodeClient;
                                matchedEltCommissionFret.EltFacture = "BL";
                                matchedEltCommissionFret.IdLP = lpCommissionSOCARFret.IdLP;
                                matchedEltCommissionFret.QTEEF = 1;
                                matchedEltCommissionFret.PUEF = montantCCBL * 0.03;
                                matchedEltCommissionFret.IdEsc = matchedConnaissement.IdEsc;
                                matchedEltCommissionFret.IdMan = matchedConnaissement.IdMan;
                                matchedEltCommissionFret.IdBL = matchedConnaissement.IdBL;
                            }
                            else
                            {
                                ELEMENT_FACTURATION eltCommission = new ELEMENT_FACTURATION();
                                eltCommission.DateJEF = DateTime.Now;
                                eltCommission.LibEF = "Commission sur Fret à collecter - BL N° " + matchedConnaissement.NumBL;
                                eltCommission.CCCP = matchedConnaissement.CLIENT.CodeClient;
                                eltCommission.EltFacture = "BL";
                                eltCommission.CodeTVA = articleCommissionSOCARFret.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                eltCommission.TauxTVA = eltCommission.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                eltCommission.CCArticle = eltCommission.CodeTVA == "TVAEX" ? articleCommissionSOCARFret.CCArticleEx : articleCommissionSOCARFret.CCArticle;
                                eltCommission.IdLP = lpCommissionSOCARFret.IdLP;
                                eltCommission.QTEEF = 1;
                                eltCommission.UnitEF = lpCommissionSOCARFret.UniteLP;
                                eltCommission.PUEF = montantCCBL * 0.03;
                                eltCommission.IdEsc = matchedConnaissement.IdEsc;
                                eltCommission.IdMan = matchedConnaissement.IdMan;
                                eltCommission.IdBL = matchedConnaissement.IdBL;
                                eltCommission.DestEF = "C";
                                eltCommission.StatutEF = "En cours";

                                dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltCommission);
                            }
                        }
                        else if (matchedEltCommissionFret != null)
                        {
                            matchedEltCommissionFret.StatutEF = "Annule";
                        }
                    } 
                     */ 
                    #endregion
                }
                else
                {
                    if (matchedEltFretSOCAR != null)
                    {
                        matchedEltFretSOCAR.StatutEF = "Annule";
                    }
                    if (matchedEltCommissionFret != null)
                    {
                        matchedEltCommissionFret.StatutEF = "Annule";
                    }
                }

                //insertion de la ligne de facturation liée à BL SOCAR Dette
                var matchedEltDette = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                       where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("Débours SOCAR : Dette à collecter") && ef.StatutEF != "Annule"
                                       select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                if (matchedConnaissement.BLDette == "Y")
                {
                    #region AH Arret socoar Dette BL
                    /*ARTICLE articleDeboursSOCARDette = (from art in dcAcc.GetTable<ARTICLE>()
                                                        from par in dcAcc.GetTable<PARAMETRE>()
                                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Débours SOCAR : Dette à collecter"
                                                        select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpDeboursSOCARDette = articleDeboursSOCARDette.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    if (matchedEltDette == null)
                    {
                        ELEMENT_FACTURATION eltDette = new ELEMENT_FACTURATION();
                        eltDette.DateJEF = DateTime.Now;
                        eltDette.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARDette.ARTICLE.CCArticleEx : (lpDeboursSOCARDette.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARDette.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARDette.ARTICLE.CCArticle : lpDeboursSOCARDette.ARTICLE.CCArticleEx;
                        eltDette.LibEF = "Débours SOCAR : Dette à collecter BL N° " + matchedConnaissement.NumBL;
                        eltDette.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        eltDette.EltFacture = "BL";
                        eltDette.CodeTVA = articleDeboursSOCARDette.CodeTVA; // "TVAEX";
                        eltDette.TauxTVA = articleDeboursSOCARDette.CODE_TVA.TauxTVA; //0;
                        eltDette.IdLP = lpDeboursSOCARDette.IdLP;
                        eltDette.QTEEF = 1;
                        eltDette.UnitEF = lpDeboursSOCARDette.UniteLP;
                        eltDette.PUEF = montantDetteBL;
                        eltDette.IdEsc = matchedConnaissement.IdEsc;
                        eltDette.IdMan = matchedConnaissement.IdMan;
                        eltDette.IdBL = matchedConnaissement.IdBL;
                        eltDette.DestEF = "C";
                        eltDette.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltDette);
                    }
                    else
                    {
                        matchedEltDette.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARDette.ARTICLE.CCArticleEx : (lpDeboursSOCARDette.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARDette.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARDette.ARTICLE.CCArticle : lpDeboursSOCARDette.ARTICLE.CCArticleEx;
                        matchedEltDette.LibEF = "Débours SOCAR : Dette à collecter BL N° " + matchedConnaissement.NumBL;
                        matchedEltDette.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        matchedEltDette.EltFacture = "BL";
                        matchedEltDette.IdLP = lpDeboursSOCARDette.IdLP;
                        matchedEltDette.QTEEF = 1;
                        matchedEltDette.PUEF = montantDetteBL;
                        matchedEltDette.IdEsc = matchedConnaissement.IdEsc;
                        matchedEltDette.IdMan = matchedConnaissement.IdMan;
                        matchedEltDette.IdBL = matchedConnaissement.IdBL;
                    } 
                     */ 
                    #endregion
                }
                else
                {
                    if (matchedEltDette != null)
                    {
                        matchedEltDette.StatutEF = "Annule";
                    }
                }

                //insertion de la ligne de facturation liée à BL Express Release
                
                /*AH var matchedEltBLER = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("BL Express Release Fee") && ef.StatutEF != "Annule"
                                      select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                */
                var matchedEltBLER = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where ef.IdBL == matchedConnaissement.IdBL && ef.CodeArticle=="1608" && ef.StatutEF != "Annule"
                                      select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                if (matchedConnaissement.BLER == "Y")
                {
                    /*ARTICLE articleFraisReleaseBL = (from art in dcAcc.GetTable<ARTICLE>()
                                                     from par in dcAcc.GetTable<PARAMETRE>()
                                                     where art.CodeArticle == par.CodeAF && par.NomAF == "BL Express Release Fee"
                                                     select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleFraisReleaseBL = (from art in dcAcc.GetTable<ARTICLE>() 
                                                     where art.CodeArticle == 1608
                                                     select art).FirstOrDefault<ARTICLE>();
                    LIGNE_PRIX lpFraisReleaseBL = articleFraisReleaseBL.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    if (matchedEltBLER == null)
                    {
                        ELEMENT_FACTURATION eltFraisReleaseBL = new ELEMENT_FACTURATION();
                        eltFraisReleaseBL.DateJEF = DateTime.Now;
                        eltFraisReleaseBL.LibEF = articleFraisReleaseBL.LibArticle + " N° " + matchedConnaissement.NumBL; //AH "BL Express Release Fee N° " + matchedConnaissement.NumBL;
                        eltFraisReleaseBL.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        eltFraisReleaseBL.EltFacture = "BL";
                        eltFraisReleaseBL.CodeTVA = articleFraisReleaseBL.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        eltFraisReleaseBL.TauxTVA = eltFraisReleaseBL.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        eltFraisReleaseBL.CCArticle = eltFraisReleaseBL.CodeTVA == "TVAEX" ? articleFraisReleaseBL.CCArticleEx : articleFraisReleaseBL.CCArticle;
                        eltFraisReleaseBL.IdLP = lpFraisReleaseBL.IdLP;
                        eltFraisReleaseBL.QTEEF = 1;
                        eltFraisReleaseBL.UnitEF = lpFraisReleaseBL.UniteLP;
                        eltFraisReleaseBL.PUEF = lpFraisReleaseBL.PU1LP;
                        eltFraisReleaseBL.IdEsc = matchedConnaissement.IdEsc;
                        eltFraisReleaseBL.IdMan = matchedConnaissement.IdMan;
                        eltFraisReleaseBL.IdBL = matchedConnaissement.IdBL;
                        eltFraisReleaseBL.DestEF = "C";
                        eltFraisReleaseBL.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFraisReleaseBL);
                    }
                    else
                    {
                        matchedEltBLER.LibEF = articleFraisReleaseBL.LibArticle + " N° " + matchedConnaissement.NumBL; //AH "BL Express Release Fee N° " + matchedConnaissement.NumBL;
                        matchedEltBLER.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        matchedEltBLER.CodeTVA = articleFraisReleaseBL.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        matchedEltBLER.TauxTVA = matchedEltBLER.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        matchedEltBLER.CCArticle = matchedEltBLER.CodeTVA == "TVAEX" ? articleFraisReleaseBL.CCArticleEx : articleFraisReleaseBL.CCArticle;
                        matchedEltBLER.EltFacture = "BL";
                        matchedEltBLER.IdLP = lpFraisReleaseBL.IdLP;
                        matchedEltBLER.QTEEF = 1;
                        matchedEltBLER.PUEF = lpFraisReleaseBL.PU1LP;
                        matchedEltBLER.IdEsc = matchedConnaissement.IdEsc;
                        matchedEltBLER.IdMan = matchedConnaissement.IdMan;
                        matchedEltBLER.IdBL = matchedConnaissement.IdBL;
                    }
                }
                else
                {
                    if (matchedEltBLER != null)
                    {
                        matchedEltBLER.StatutEF = "Annule";
                    }
                }

                //Mise à jour des éléments de facturation
                if (matchedConnaissement.ELEMENT_FACTURATION.Count > 0)
                {
                    List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                    List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                    //selection des lignes de prix concernant le BL
                    /*ARTICLE articleFraisDossier = (from art in articles
                                                   from par in parametres
                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "Frais de dossiers BL"
                                                   select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleFraisDossier = (from art in articles 
                                                   where art.CodeArticle == 1601
                                                   select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpFraisDossier = articleFraisDossier.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    /*ARTICLE articleTimbre = (from art in articles
                                             from par in parametres
                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Timbre de connaissement"
                                             select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleTimbre = (from art in articles where art.CodeArticle ==2101 select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpTimbre = articleTimbre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);


                   /*AH var matchedEltFraisDossier = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                  where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("Frais de dossiers BL")
                                                  select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                    */
                    var matchedEltFraisDossier = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                  where ef.IdBL == matchedConnaissement.IdBL && ef.CodeArticle == "1601"
                                                  select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                    if (matchedEltFraisDossier != null)
                    {
                        matchedEltFraisDossier.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        matchedEltFraisDossier.DateJEF = DateTime.Now;
                        matchedEltFraisDossier.PUEF = lpFraisDossier.PU1LP;
                        matchedEltFraisDossier.CodeTVA = articleFraisDossier.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        matchedEltFraisDossier.TauxTVA = matchedEltFraisDossier.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        matchedEltFraisDossier.CCArticle = matchedEltFraisDossier.CodeTVA == "TVAEX" ? articleFraisDossier.CCArticleEx : articleFraisDossier.CCArticle;
                    }

                   /*AH var matchedEltTimbre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                            where ef.IdBL == matchedConnaissement.IdBL && ef.LibEF.Contains("Timbre de connaissement")
                                            select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                    */
                    var matchedEltTimbre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                            where ef.IdBL == matchedConnaissement.IdBL && ef.CodeArticle=="2101"
                                            select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                    if (matchedEltTimbre != null)
                    {
                        matchedEltTimbre.CCCP = matchedConnaissement.CLIENT.CodeClient;
                        matchedEltTimbre.PUEF = lpTimbre.PU1LP;
                        matchedEltTimbre.CodeTVA = articleTimbre.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                        matchedEltTimbre.TauxTVA = matchedEltTimbre.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                        matchedEltTimbre.CCArticle = matchedEltTimbre.CodeTVA == "TVAEX" ? articleTimbre.CCArticleEx : articleTimbre.CCArticle;
                    }

                    //Selection des lignes de prix concernant le véhicule
                    if (matchedConnaissement.VEHICULE.Count(veh => !veh.IdVehAP.HasValue) > 0 && matchedConnaissement.ESCALE.RAEsc == "Y")
                    {
                       /* ARTICLE articleManutBord = (from art in articles
                                                    from par in parametres
                                                    where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Bord"
                                                    select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleManutBord = (from art in articles  where art.CodeArticle == 1701
                                                    select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpManutBord = articleManutBord.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        /*AH ARTICLE articleSupplementVolumeVehicule = (from art in articles
                                                                    from par in parametres
                                                                    where art.CodeArticle == par.CodeAF && par.NomAF == "Supplément volume  - Véhicule"
                                                                    select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleSupplementVolumeVehicule = (from art in articles  where art.CodeArticle ==1703
                                                                   select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpSupplementVolumeVehicule = articleSupplementVolumeVehicule.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        /*ARTICLE articleManutTerre = (from art in articles
                                                     from par in parametres
                                                     where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre"
                                                     select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleManutTerre = (from art in articles  where art.CodeArticle ==1702
                                                     select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpManutTerre = articleManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        foreach (VEHICULE v in matchedConnaissement.VEHICULE.Where(veh => !veh.IdVehAP.HasValue))
                        {
                            double derogation = (v.CONNAISSEMENT.BLIL == "Y" || v.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                            // Element de facturation manutention bord
                           /* var matchedEltManutBord = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                      where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh 
                                                      && ef.LibEF.Contains("Manutention Bord Chassis")
                                                       select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                            */
                            var matchedEltManutBord = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                       where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh
                                                       && ef.CodeArticle=="1701"
                                                       select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            if (matchedEltManutBord != null)
                            {
                                matchedEltManutBord.PUEF = v.VolCVeh <= 10 ? lpManutBord.PU1LP : lpManutBord.PU2LP;
                                matchedEltManutBord.CodeTVA = articleManutBord.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                matchedEltManutBord.TauxTVA = matchedEltManutBord.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                matchedEltManutBord.CCArticle = matchedEltManutBord.CodeTVA == "TVAEX" ? articleManutBord.CCArticleEx : articleManutBord.CCArticle;
                                matchedEltManutBord.CCCP = matchedConnaissement.CLIENT.CodeClient;
                                matchedEltManutBord.QTEEF = v.VolCVeh;
                                matchedEltManutBord.UnitEF = lpManutBord.UniteLP;

                                if (v.CONNAISSEMENT.BLLT == "Y" && v.VolCVeh < 30)
                                {
                                    matchedEltManutBord.PUEF = 0;
                                }
                            }

                            // Element de facturation supplement volume véhicule
                            /*var matchedEltSupplementVolumeVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                      where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh 
                                                                      && ef.LibEF.Contains("Manutention Terre - Supplément volume Chassis")
                                                                      select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                            */
                            var matchedEltSupplementVolumeVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                      where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh
                                                                      && ef.CodeArticle=="1702"
                                                                      select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            if (matchedEltSupplementVolumeVehicule != null)
                            {
                                matchedEltSupplementVolumeVehicule.CodeTVA = articleSupplementVolumeVehicule.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                matchedEltSupplementVolumeVehicule.TauxTVA = matchedEltSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                matchedEltSupplementVolumeVehicule.CCArticle = matchedEltSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleSupplementVolumeVehicule.CCArticleEx : articleSupplementVolumeVehicule.CCArticle;
                                matchedEltSupplementVolumeVehicule.CCCP = matchedConnaissement.CLIENT.CodeClient;
                                matchedEltSupplementVolumeVehicule.QTEEF = v.VolCVeh > 100 ? v.VolCVeh - 100 : 0;
                                matchedEltSupplementVolumeVehicule.UnitEF = lpSupplementVolumeVehicule.UniteLP;
                                //matchedEltSupplementVolumeVehicule.PUEF = matchedConnaissement.BLGN == "N" ? lpSupplementVolumeVehicule.PU1LP : lpSupplementVolumeVehicule.PU2LP;
                                //matchedEltSupplementVolumeVehicule.PUEF = matchedConnaissement.BLIL == "Y" ? lpSupplementVolumeVehicule.PU2LP : lpSupplementVolumeVehicule.PU1LP;
                                if (matchedConnaissement.BLIL == "Y")
                                {
                                    matchedEltSupplementVolumeVehicule.PUEF = lpSupplementVolumeVehicule.PU2LP;
                                }
                                else
                                {
                                    if (matchedConnaissement.BLGN == "Y")
                                    {
                                        matchedEltSupplementVolumeVehicule.PUEF = lpSupplementVolumeVehicule.PU2LP;
                                    }
                                    else
                                    {
                                        matchedEltSupplementVolumeVehicule.PUEF = lpSupplementVolumeVehicule.PU1LP;
                                    }
                                }
                            }


                            // Element de facturation manutention terre Socomar
                            /*var matchedEltManutTerre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                        where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh && ef.LibEF.Contains("Manutention Terre Chassis")
                                                        select ef).FirstOrDefault<ELEMENT_FACTURATION>();*/

                            var matchedEltManutTerre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                        where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh && 
                                                        ef.CodeArticle=="1702" select ef).FirstOrDefault<ELEMENT_FACTURATION>();
                            if (matchedEltManutTerre != null)
                            {
                                matchedEltManutTerre.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                                matchedEltManutTerre.QTEEF = 1;
                                if (v.VolCVeh < 16)
                                {
                                    matchedEltManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU1LP - lpManutTerre.PU1LP * derogation);
                                }
                                else if (v.VolCVeh < 50)
                                {
                                    matchedEltManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU2LP - lpManutTerre.PU2LP * derogation);
                                }
                                else
                                {
                                    matchedEltManutTerre.PUEF = Convert.ToInt32(lpManutTerre.PU3LP - lpManutTerre.PU3LP * derogation);
                                }
                                matchedEltManutTerre.UnitEF = lpManutTerre.UniteLP;
                                matchedEltManutTerre.CodeTVA = articleManutTerre.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                matchedEltManutTerre.TauxTVA = matchedEltManutTerre.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                matchedEltManutTerre.CCArticle = matchedEltManutTerre.CodeTVA == "TVAEX" ? articleManutTerre.CCArticleEx : articleManutTerre.CCArticle;
                            }

                        }
                    }

                    if (matchedConnaissement.VEHICULE.Count > 0)
                    {
                       /* ARTICLE articleGestParcAuto = (from art in articles
                                                       from par in parametres
                                                       where art.CodeArticle == par.CodeAF && par.NomAF == "Prestation de gestionnaire de parc auto"
                                                       select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleGestParcAuto = (from art in articles where art.CodeArticle == 1820 select art).FirstOrDefault<ARTICLE>();
                        LIGNE_PRIX lpGestParcAuto = null;
                        ARTICLE articleSupVol = (from m in articles where m.CodeArticle == 1703 select m).FirstOrDefault<ARTICLE>();
                        /*
                        LIGNE_PRIX lpGestParcAutoSupplVol = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                        */
                        LIGNE_PRIX lpGestParcAutoSupplVol = articleSupVol.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte);
                        
                        foreach (VEHICULE v in matchedConnaissement.VEHICULE)
                        {
                            /*AH var matchedEltGestParcVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                              where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh && ef.LibEF.Contains("Prestation de gestionnaire parc auto - Chassis")
                                                              select ef).FirstOrDefault<ELEMENT_FACTURATION>();*/

                            var matchedEltGestParcVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                              where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh 
                                                              && ef.CodeArticle=="1820"
                                                              select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            if (matchedEltGestParcVehicule != null)
                            {
                                if (v.StatutCVeh == "U")
                                {
                                    lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU" && lp.DDLP <= dte && lp.DFLP >= dte);
                                }
                                else if (v.StatutCVeh == "N")
                                {
                                    lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN" && lp.DDLP <= dte && lp.DFLP >= dte);
                                }
                                matchedEltGestParcVehicule.CodeTVA = articleGestParcAuto.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                matchedEltGestParcVehicule.TauxTVA = matchedEltGestParcVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                matchedEltGestParcVehicule.CCArticle = matchedEltGestParcVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                                matchedEltGestParcVehicule.CCCP = matchedConnaissement.CLIENT.CodeClient;
                                matchedEltGestParcVehicule.QTEEF = 1;
                                matchedEltGestParcVehicule.UnitEF = lpGestParcAuto.UniteLP;
                                if (v.VolCVeh < 16)
                                {
                                    matchedEltGestParcVehicule.PUEF = lpGestParcAuto.PU1LP;
                                }
                                else if (v.VolCVeh < 50)
                                {
                                    matchedEltGestParcVehicule.PUEF = lpGestParcAuto.PU2LP;
                                }
                                else
                                {
                                    matchedEltGestParcVehicule.PUEF = lpGestParcAuto.PU3LP;
                                }
                            }
                            else if (matchedEltGestParcVehicule == null && matchedConnaissement.DVBL.HasValue)
                            {
                                // Element de gestionnaire parc auto
                                ELEMENT_FACTURATION eltFactGestParcAuto = new ELEMENT_FACTURATION();

                                if (v.StatutCVeh == "U")
                                {
                                    lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU" && lp.DDLP <= dte && lp.DFLP >= dte);
                                }
                                else if (v.StatutCVeh == "N")
                                {
                                    lpGestParcAuto = articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN" && lp.DDLP <= dte && lp.DFLP >= dte);
                                }

                                eltFactGestParcAuto.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactGestParcAuto.EltFacture = "Veh";
                                eltFactGestParcAuto.LibEF = articleGestParcAuto.LibArticle + " - Chassis N° " + v.NumChassis; //AH "Prestation de gestionnaire parc auto - Chassis N° " + v.NumChassis;
                                eltFactGestParcAuto.DateJEF = DateTime.Now;
                                eltFactGestParcAuto.IdLP = lpGestParcAuto.IdLP;
                                eltFactGestParcAuto.QTEEF = 1;
                                if (v.VolCVeh < 16)
                                {
                                    eltFactGestParcAuto.PUEF = lpGestParcAuto.PU1LP;
                                }
                                else if (v.VolCVeh < 50)
                                {
                                    eltFactGestParcAuto.PUEF = lpGestParcAuto.PU2LP;
                                }
                                else
                                {
                                    eltFactGestParcAuto.PUEF = lpGestParcAuto.PU3LP;
                                }
                                if (v.VolCVeh > 100)
                                {
                                    eltFactGestParcAuto.PTDIT = Math.Round(v.VolCVeh.Value * articleGestParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "SP" && lp.DDLP <= dte && lp.DFLP >= dte).PU1LP.Value, 0, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    eltFactGestParcAuto.PTDIT = 0;
                                }
                                eltFactGestParcAuto.UnitEF = lpGestParcAuto.UniteLP;
                                eltFactGestParcAuto.IdEsc = matchedConnaissement.IdEsc;
                                eltFactGestParcAuto.IdMan = matchedConnaissement.IdMan;
                                eltFactGestParcAuto.IdBL = v.CONNAISSEMENT.IdBL;
                                eltFactGestParcAuto.IdVeh = v.IdVeh;
                                eltFactGestParcAuto.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                eltFactGestParcAuto.TauxTVA = eltFactGestParcAuto.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                eltFactGestParcAuto.CCArticle = eltFactGestParcAuto.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                                eltFactGestParcAuto.DestEF = "C";
                                eltFactGestParcAuto.StatutEF = "En cours";
                                eltFactGestParcAuto.CodeArticle = lpGestParcAuto.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactGestParcAuto);
                            }

                            var matchedEltGestParcSupplementVolumeVehicule = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                              where ef.IdBL == matchedConnaissement.IdBL && ef.IdVeh == v.IdVeh && ef.LibEF.Contains("Prestation de gestionnaire Parc auto - Supplément volume Chassis")
                                                                              select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            if (matchedEltGestParcSupplementVolumeVehicule != null)
                            {
                                matchedEltGestParcSupplementVolumeVehicule.CodeTVA = articleGestParcAuto.CodeTVA == "TVAEX" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                matchedEltGestParcSupplementVolumeVehicule.TauxTVA = matchedEltGestParcSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                matchedEltGestParcSupplementVolumeVehicule.CCArticle = matchedEltGestParcSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                                matchedEltGestParcSupplementVolumeVehicule.CCCP = matchedConnaissement.CLIENT.CodeClient;
                                matchedEltGestParcSupplementVolumeVehicule.QTEEF = v.VolCVeh > 100 ? v.VolCVeh - 100 : 0;
                                matchedEltGestParcSupplementVolumeVehicule.UnitEF = lpGestParcAutoSupplVol.UniteLP;
                                matchedEltGestParcSupplementVolumeVehicule.PUEF = lpGestParcAutoSupplVol.PU1LP;
                            }
                            else if (matchedEltGestParcSupplementVolumeVehicule == null && matchedConnaissement.DVBL.HasValue)
                            {
                                // Element de facturation Gestionnaire parc auto supplement volume vehicule
                                ELEMENT_FACTURATION eltFactGestParcAutoSupplementVolumeVehicule = new ELEMENT_FACTURATION();

                                eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA = v.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConnaissement.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConnaissement.CLIENT.CodeTVA);
                                eltFactGestParcAutoSupplementVolumeVehicule.TauxTVA = eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA == "TVAEX" ? 0 : matchedConnaissement.CODE_TVA.TauxTVA == 0 ? 0 : matchedConnaissement.CLIENT.CODE_TVA.TauxTVA;
                                eltFactGestParcAutoSupplementVolumeVehicule.CCArticle = eltFactGestParcAutoSupplementVolumeVehicule.CodeTVA == "TVAEX" ? articleGestParcAuto.CCArticleEx : articleGestParcAuto.CCArticle;
                                eltFactGestParcAutoSupplementVolumeVehicule.CCCP = v.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactGestParcAutoSupplementVolumeVehicule.EltFacture = "Veh";
                                eltFactGestParcAutoSupplementVolumeVehicule.LibEF = articleSupVol.LibArticle + " Chassis N° " + v.NumChassis; //AH "Prestation de gestionnaire Parc auto - Supplément volume Chassis N° " + v.NumChassis;
                                eltFactGestParcAutoSupplementVolumeVehicule.DateJEF = DateTime.Now;
                                eltFactGestParcAutoSupplementVolumeVehicule.IdLP = lpGestParcAutoSupplVol.IdLP;
                                eltFactGestParcAutoSupplementVolumeVehicule.QTEEF = v.VolCVeh > 100 ? v.VolCVeh - 100 : 0;
                                eltFactGestParcAutoSupplementVolumeVehicule.UnitEF = lpGestParcAutoSupplVol.UniteLP;
                                eltFactGestParcAutoSupplementVolumeVehicule.PUEF = lpGestParcAutoSupplVol.PU1LP;
                                eltFactGestParcAutoSupplementVolumeVehicule.IdEsc = matchedConnaissement.IdEsc;
                                eltFactGestParcAutoSupplementVolumeVehicule.IdMan = matchedConnaissement.IdMan;
                                eltFactGestParcAutoSupplementVolumeVehicule.IdBL = v.CONNAISSEMENT.IdBL;
                                eltFactGestParcAutoSupplementVolumeVehicule.IdVeh = v.IdVeh;
                                eltFactGestParcAutoSupplementVolumeVehicule.DestEF = "C";
                                eltFactGestParcAutoSupplementVolumeVehicule.StatutEF = "En cours";
                                eltFactGestParcAutoSupplementVolumeVehicule.CodeArticle = lpGestParcAutoSupplVol.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactGestParcAutoSupplementVolumeVehicule);
                            }
                        }
                    }

                    //Selection des lignes de prix concernant les conteneurs
                    if (matchedConnaissement.CONTENEUR.Count > 0)
                    {
                        /*AH ARTICLE articleDeboursDITManutTerre = (from art in articles
                                                               from par in parametres
                                                               where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Manutention Terre"
                                                               select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleDeboursDITManutTerre = (from art in articles   where art.CodeArticle == 1401
                                                               select art).FirstOrDefault<ARTICLE>();
                        LIGNE_PRIX lpManutTerre20 = articleDeboursDITManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "20" && lp.DDLP <= dte && lp.DFLP >= dte);
                        LIGNE_PRIX lpManutTerre40 = articleDeboursDITManutTerre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "40" && lp.DDLP <= dte && lp.DFLP >= dte);

                        /*ARTICLE articleDeboursDITRelevage = (from art in articles
                                                             from par in parametres
                                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Relevage"
                                                             select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleDeboursDITRelevage = (from art in articles  where art.CodeArticle == 1404 select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpRelevage20 = articleDeboursDITRelevage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "20" && lp.DDLP <= dte && lp.DFLP >= dte);
                        LIGNE_PRIX lpRelevage40 = articleDeboursDITRelevage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "40" && lp.DDLP <= dte && lp.DFLP >= dte);

                        /*AH ARTICLE articleDeboursDITSurchargePoids = (from art in articles
                                                                   from par in parametres
                                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Surcharge pour surpoids"
                                                                   select art).FirstOrDefault<ARTICLE>();
                        */

                        ARTICLE articleDeboursDITSurchargePoids = (from art in articles  where art.CodeArticle == 1403 select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpSurchargePoids20 = articleDeboursDITSurchargePoids.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "20" && lp.DDLP <= dte && lp.DFLP >= dte);
                        LIGNE_PRIX lpSurchargePoids40 = articleDeboursDITSurchargePoids.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "40" && lp.DDLP <= dte && lp.DFLP >= dte);

                        /*ARTICLE articleDeboursDITMatDangeureuses = (from art in articles
                                                                    from par in parametres
                                                                    where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Surcharge Matières dangeureuses"
                                                                    select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleDeboursDITMatDangeureuses = (from art in articles  where art.CodeArticle == 1402
                                                                    select art).FirstOrDefault<ARTICLE>();
                        LIGNE_PRIX lpMatDangeureuses20 = articleDeboursDITMatDangeureuses.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "20" && lp.DDLP <= dte && lp.DFLP >= dte);
                        LIGNE_PRIX lpMatDangeureuses40 = articleDeboursDITMatDangeureuses.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "40" && lp.DDLP <= dte && lp.DFLP >= dte);

                        /*ARTICLE articleDeboursDITTVA = (from art in articles
                                                        from par in parametres
                                                        where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : TVA"
                                                        select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleDeboursDITTVA = (from art in articles  where art.CodeArticle == 1420
                                                        select art).FirstOrDefault<ARTICLE>();
                        LIGNE_PRIX lpTva = articleDeboursDITTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        foreach (CONTENEUR c in matchedConnaissement.CONTENEUR)
                        {
                            #region fake hassana
                            //// Element de facturation débours DIT : Manutention terre
                            //var matchedEltManutTerre = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                            //                            where ef.IdBL == matchedConnaissement.IdBL && ef.IdCtr == c.IdCtr && ef.LibEF.Contains("Débours DIT : Manutention Terre Ctr")
                            //                            select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            //if (matchedEltManutTerre != null)
                            //{
                            //    if (c.TypeCCtr.Substring(0, 2) == "20")
                            //    {
                            //        matchedEltManutTerre.PUEF = (matchedConnaissement.BLIL == "Y" || matchedConnaissement.BLGN == "Y") ? lpManutTerre20.PU5LP : lpManutTerre20.PU1LP;
                            //        if (c.TypeMses == "P")
                            //        {
                            //            matchedEltManutTerre.PUEF = lpManutTerre20.PU2LP;
                            //        }
                            //    }
                            //    else if (c.TypeCCtr.Substring(0, 2) == "40")
                            //    {
                            //        matchedEltManutTerre.PUEF = (matchedConnaissement.BLIL == "Y" || matchedConnaissement.BLGN == "Y") ? lpManutTerre40.PU5LP : lpManutTerre40.PU1LP;
                            //        if (c.TypeMses == "P")
                            //        {
                            //            matchedEltManutTerre.PUEF = lpManutTerre40.PU2LP;
                            //        }
                            //    }
                            //    matchedEltManutTerre.PTDIT = matchedEltManutTerre.PUEF;
                            //}


                            ////Element de facturation débours DIT : Marchandise dangeureuse
                            //var matchedEltMarchDang = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                            //                           where ef.IdBL == matchedConnaissement.IdBL && ef.IdCtr == c.IdCtr && ef.LibEF.Contains("Débours DIT : Surcharge Matières dangeureuses Ctr")
                            //                           select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            //if (matchedEltMarchDang != null)
                            //{
                            //    if (c.TypeCCtr.Substring(0, 2) == "20")
                            //    {
                            //        matchedEltMarchDang.PUEF = c.TypeMses == "D" ? lpMatDangeureuses20.PU1LP : 0;

                            //    }
                            //    else if (c.TypeCCtr.Substring(0, 2) == "40")
                            //    {
                            //        matchedEltMarchDang.PUEF = c.TypeMses == "D" ? lpMatDangeureuses40.PU1LP : 0;
                            //    }
                            //    matchedEltMarchDang.PTDIT = matchedEltMarchDang.PUEF;
                            //}

                            ////Element de facturation débours DIT : Surpoids
                            //var matchedEltSurPoids = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                            //                          where ef.IdBL == matchedConnaissement.IdBL && ef.IdCtr == c.IdCtr && ef.LibEF.Contains("Débours DIT : Surcharge pour surpoids Ctr")
                            //                          select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            //if (matchedEltSurPoids != null)
                            //{
                            //    if (c.TypeCCtr.Substring(0, 2) == "20")
                            //    {
                            //        matchedEltSurPoids.PUEF = c.PoidsCCtr > 15000 ? lpSurchargePoids20.PU1LP : 0;
                            //    }
                            //    else if (c.TypeCCtr.Substring(0, 2) == "40")
                            //    {
                            //        matchedEltSurPoids.PUEF = c.PoidsCCtr > 24000 ? lpSurchargePoids40.PU1LP : 0;
                            //    }
                            //    matchedEltSurPoids.PTDIT = matchedEltSurPoids.PUEF;
                            //}


                            ////Element de facturation débours DIT : Relevage
                            //var matchedEltRelevage = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                            //                          where ef.IdBL == matchedConnaissement.IdBL && ef.IdCtr == c.IdCtr && ef.LibEF.Contains("Débours DIT : Relevage Ctr")
                            //                          select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            //if (matchedEltRelevage != null)
                            //{
                            //    if (c.TypeCCtr.Substring(0, 2) == "20")
                            //    {
                            //        matchedEltRelevage.PUEF = lpRelevage20.PU1LP;
                            //    }
                            //    else if (c.TypeCCtr.Substring(0, 2) == "40")
                            //    {
                            //        matchedEltRelevage.PUEF = lpRelevage40.PU1LP;
                            //    }
                            //    matchedEltRelevage.PTDIT = matchedEltRelevage.PUEF;
                            //}

                            ////Element de facturation débours DIT : TVA
                            //var matchedEltTVA = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                            //                     where ef.IdBL == matchedConnaissement.IdBL && ef.IdCtr == c.IdCtr && ef.LibEF.Contains("Débours DIT : TVA sur Manutention Ctr")
                            //                     select ef).FirstOrDefault<ELEMENT_FACTURATION>();

                            //if (matchedEltTVA != null)
                            //{
                            //    matchedEltTVA.PUEF = (matchedConnaissement.BLIL == "Y" || matchedConnaissement.CodeTVA == "TVAEX") ? 0 : Convert.ToInt32((matchedEltManutTerre.PUEF + matchedEltRelevage.PUEF + matchedEltMarchDang.PUEF + matchedEltSurPoids.PUEF) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100));
                            //    matchedEltTVA.PTDIT = matchedEltTVA.PUEF;
                            //} 
                            #endregion
                        }
                    }
                }

                //Calcul des montants de caution
                foreach (CONTENEUR c in matchedConnaissement.CONTENEUR)
                {
                    var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                            where ctr.IdCtr == c.IdCtr
                                            select ctr).SingleOrDefault<CONTENEUR>();

                    if (matchedConteneur.PropCtr == 1 && !matchedConteneur.IdPay.HasValue)
                    {
                        if (matchedConnaissement.DestBL == "DLA")
                        {
                            matchedConteneur.MCCtr = matchedConteneur.TYPE_CONTENEUR != null ? matchedConteneur.TYPE_CONTENEUR.PUDLA : 1;
                        }
                        else if (matchedConnaissement.DestBL == "CMR")
                        {
                            matchedConteneur.MCCtr = matchedConteneur.TYPE_CONTENEUR != null ? matchedConteneur.TYPE_CONTENEUR.PUCMR : 1;
                        }
                        else if (matchedConnaissement.DestBL == "HINT")
                        {
                            matchedConteneur.MCCtr = matchedConteneur.TYPE_CONTENEUR != null ? matchedConteneur.TYPE_CONTENEUR.PUINT : 1;
                        }
                    }
                    else if(matchedConteneur.PropCtr == 2)
                    {
                        matchedConteneur.MCCtr = 0;
                    }
                }

                dcAcc.SubmitChanges();

                foreach (PROFORMA prof in matchedConnaissement.PROFORMA.Where(p => !p.DVFP.HasValue && p.StatutFP == "O"))
                {
                    UpdateProforma(prof.IdFP, prof.IdBL.Value, prof.ClientFacture, GetLignesProf(prof.IdFP,dcAcc), prof.AIFP, idUser);
                }

                #region insert remote sys
                RMT_CONNAISSEMENT rmt_con = new RMT_CONNAISSEMENT();
                rmt_con.Adresse = matchedConnaissement.AdresseBL;
                rmt_con.Client = (int)matchedConnaissement.IdClient;
                rmt_con.Consignee = matchedConnaissement.ConsigneeBL;
                rmt_con.Notify = matchedConnaissement.NotifyBL;
                rmt_con.NumBl = matchedConnaissement.NumBL;
                rmt_con.SysId = matchedConnaissement.IdBL;
                dcAcc.RMT_CONNAISSEMENT.InsertOnSubmit(rmt_con);

                #endregion

                dcAcc.SubmitChanges();

                transaction.Complete();
                return matchedConnaissement;
            }
        }

        public CONNAISSEMENT UpdateInfosSOCAR(int idEsc, string numBL)
        {
            throw new ApplicationException("Cette action n'est plus disponible");

            #region AH desaction element SOCAR
            /*
             * using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedEsc = (from esc in dcAcc.GetTable<CONNAISSEMENT>()
                                  where esc.IdEsc == idEsc
                                  select esc).FirstOrDefault<CONNAISSEMENT>();

                if (matchedEsc == null)
                {
                    throw new EnregistrementInexistant("Escale inexistante");
                }

                DateTime dte = DateTime.Now;

                CONNAISSEMENT matchedBL = null;

                ARTICLE articleDeboursSOCARBESC = (from art in dcAcc.GetTable<ARTICLE>()
                                                   from par in dcAcc.GetTable<PARAMETRE>()
                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "Débours SOCAR : BESC"
                                                   select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursSOCARBESC = articleDeboursSOCARBESC.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.NumBL == numBL && bl.IdEsc == idEsc
                                            select bl).ToList<CONNAISSEMENT>();

                if (matchedConnaissement.Count == 1)
                {
                    matchedBL = matchedConnaissement.FirstOrDefault<CONNAISSEMENT>();

                    matchedBL.BLSocar = "Y";

                    //insertion de la ligne de facturation liée à BL SOCAR
                    List<ELEMENT_FACTURATION> matchedEltsBESC = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                 where ef.IdBL == matchedBL.IdBL && ef.LibEF.Contains("Débours SOCAR : BESC") && ef.StatutEF != "Annule"
                                                                 select ef).ToList<ELEMENT_FACTURATION>();

                    if (matchedBL.BLSocar == "Y" && matchedBL.BLIL != "Y")
                    {
                        ELEMENT_FACTURATION matchedEltBESCVeh = matchedEltsBESC.FirstOrDefault<ELEMENT_FACTURATION>(elt => elt.LibEF.Contains("Veh"));

                        if (matchedEltBESCVeh == null)
                        {
                            ELEMENT_FACTURATION elt = new ELEMENT_FACTURATION();
                            elt.DateJEF = DateTime.Now;
                            elt.CCArticle = matchedBL.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                            elt.LibEF = "Débours SOCAR : BESC BL N° " + matchedBL.NumBL + " - Veh";
                            elt.CCCP = matchedBL.CLIENT.CodeClient;
                            elt.EltFacture = "BL";
                            elt.IdLP = lpDeboursSOCARBESC.IdLP;
                            elt.QTEEF = matchedBL.VEHICULE.Count;
                            //elt.QTEEF = matchedConnaissement.VEHICULE.Count(veh => !veh.IdVehAP.HasValue);
                            elt.UnitEF = lpDeboursSOCARBESC.UniteLP;
                            elt.CodeTVA = lpDeboursSOCARBESC.ARTICLE.CodeTVA; // "TVAEX";
                            elt.TauxTVA = articleDeboursSOCARBESC.CODE_TVA.TauxTVA; //0;
                            elt.PUEF = lpDeboursSOCARBESC.PU1LP;
                            elt.IdEsc = matchedBL.IdEsc;
                            elt.IdMan = matchedBL.IdMan;
                            elt.IdBL = matchedBL.IdBL;
                            elt.DestEF = "C";
                            elt.StatutEF = "En cours";

                            dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(elt);
                        }
                        else
                        {
                            //matchedEltBESCVeh.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                            //matchedEltBESCVeh.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Veh";
                            //matchedEltBESCVeh.CCCP = matchedConnaissement.CLIENT.CodeClient;
                            //matchedEltBESCVeh.EltFacture = "BL";
                            //matchedEltBESCVeh.CodeTVA = "TVAEX";
                            //matchedEltBESCVeh.IdLP = lpDeboursSOCARBESC.IdLP;
                            //matchedEltBESCVeh.QTEEF = matchedConnaissement.VEHICULE.Count;
                            ////matchedEltBESCVeh.QTEEF = matchedConnaissement.VEHICULE.Count(veh => !veh.IdVehAP.HasValue);
                            //matchedEltBESCVeh.PUEF = lpDeboursSOCARBESC.PU1LP;
                            //matchedEltBESCVeh.IdEsc = matchedConnaissement.IdEsc;
                            //matchedEltBESCVeh.IdMan = matchedConnaissement.IdMan;
                            //matchedEltBESCVeh.IdBL = matchedConnaissement.IdBL;
                        }

                        ELEMENT_FACTURATION matchedEltBESCCtr20 = matchedEltsBESC.FirstOrDefault<ELEMENT_FACTURATION>(elt => elt.LibEF.Contains("Ctr 20"));


                        if (matchedEltBESCCtr20 == null)
                        {
                            ELEMENT_FACTURATION elt = new ELEMENT_FACTURATION();
                            elt.DateJEF = DateTime.Now;
                            elt.CCArticle = matchedBL.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                            elt.LibEF = "Débours SOCAR : BESC BL N° " + matchedBL.NumBL + " - Ctr 20";
                            elt.CCCP = matchedBL.CLIENT.CodeClient;
                            elt.EltFacture = "BL";
                            elt.IdLP = lpDeboursSOCARBESC.IdLP;
                            elt.QTEEF = matchedBL.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "20");
                            elt.UnitEF = lpDeboursSOCARBESC.UniteLP;
                            elt.CodeTVA = lpDeboursSOCARBESC.ARTICLE.CodeTVA; //"TVAEX";
                            elt.TauxTVA = lpDeboursSOCARBESC.ARTICLE.CODE_TVA.TauxTVA; //0;
                            elt.PUEF = lpDeboursSOCARBESC.PU2LP;
                            elt.IdEsc = matchedBL.IdEsc;
                            elt.IdMan = matchedBL.IdMan;
                            elt.IdBL = matchedBL.IdBL;
                            elt.DestEF = "C";
                            elt.StatutEF = "En cours";

                            dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(elt);
                        }
                        else
                        {
                            //matchedEltBESCCtr20.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                            //matchedEltBESCCtr20.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Ctr 20";
                            //matchedEltBESCCtr20.CCCP = matchedConnaissement.CLIENT.CodeClient;
                            //matchedEltBESCCtr20.EltFacture = "BL";
                            //matchedEltBESCCtr20.CodeTVA = "TVAEX";
                            //matchedEltBESCCtr20.IdLP = lpDeboursSOCARBESC.IdLP;
                            //matchedEltBESCCtr20.QTEEF = matchedConnaissement.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "20");
                            //matchedEltBESCCtr20.PUEF = lpDeboursSOCARBESC.PU2LP;
                            //matchedEltBESCCtr20.IdEsc = matchedConnaissement.IdEsc;
                            //matchedEltBESCCtr20.IdMan = matchedConnaissement.IdMan;
                            //matchedEltBESCCtr20.IdBL = matchedConnaissement.IdBL;
                        }

                        ELEMENT_FACTURATION matchedEltBESCCtr40 = matchedEltsBESC.FirstOrDefault<ELEMENT_FACTURATION>(elt => elt.LibEF.Contains("Ctr 40"));

                        if (matchedEltBESCCtr40 == null)
                        {
                            ELEMENT_FACTURATION elt = new ELEMENT_FACTURATION();
                            elt.DateJEF = DateTime.Now;
                            elt.CCArticle = matchedBL.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : (lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" || lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVATI") ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                            elt.LibEF = "Débours SOCAR : BESC BL N° " + matchedBL.NumBL + " - Ctr 40";
                            elt.CCCP = matchedBL.CLIENT.CodeClient;
                            elt.EltFacture = "BL";
                            elt.IdLP = lpDeboursSOCARBESC.IdLP;
                            elt.QTEEF = matchedBL.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "40");
                            elt.UnitEF = lpDeboursSOCARBESC.UniteLP;
                            elt.CodeTVA = lpDeboursSOCARBESC.ARTICLE.CodeTVA;// "TVAEX";
                            elt.TauxTVA = 0;
                            elt.PUEF = lpDeboursSOCARBESC.PU3LP;
                            elt.IdEsc = matchedBL.IdEsc;
                            elt.IdMan = matchedBL.IdMan;
                            elt.IdBL = matchedBL.IdBL;
                            elt.DestEF = "C";
                            elt.StatutEF = "En cours";

                            dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(elt);
                        }
                        else
                        {
                            //matchedEltBESCCtr40.CCArticle = matchedConnaissement.BLIL == "Y" ? lpDeboursSOCARBESC.ARTICLE.CCArticleEx : lpDeboursSOCARBESC.ARTICLE.CodeTVA == "TVAAP" ? lpDeboursSOCARBESC.ARTICLE.CCArticle : lpDeboursSOCARBESC.ARTICLE.CCArticleEx;
                            //matchedEltBESCCtr40.LibEF = "Débours SOCAR : BESC BL N° " + matchedConnaissement.NumBL + " - Ctr 40";
                            //matchedEltBESCCtr40.CCCP = matchedConnaissement.CLIENT.CodeClient;
                            //matchedEltBESCCtr40.EltFacture = "BL";
                            //matchedEltBESCCtr40.CodeTVA = "TVAEX";
                            //matchedEltBESCCtr40.IdLP = lpDeboursSOCARBESC.IdLP;
                            //matchedEltBESCCtr40.QTEEF = matchedConnaissement.CONTENEUR.Count(ctr => ctr.TypeCCtr.Substring(0, 2) == "40");
                            //matchedEltBESCCtr40.PUEF = lpDeboursSOCARBESC.PU3LP;
                            //matchedEltBESCCtr40.IdEsc = matchedConnaissement.IdEsc;
                            //matchedEltBESCCtr40.IdMan = matchedConnaissement.IdMan;
                            //matchedEltBESCCtr40.IdBL = matchedConnaissement.IdBL;
                        }

                    }
                    //else if (matchedEltsBESC.Count != 0)
                    //{
                    //    foreach (ELEMENT_FACTURATION eltsBESC in matchedEltsBESC)
                    //    {
                    //        eltsBESC.StatutEF = "Annule";
                    //    }
                    //}

                    dcAcc.SubmitChanges();
                    transaction.Complete();
                    return matchedBL;
                }
                else
                {
                    return matchedBL;
                }
            } 
             */ 
            #endregion
        }

        #endregion


        #region véhicule

        public VEHICULE PasserEnVAE(int idVeh, int idClient, string consignee, string adresse, string notify, string email, DateTime dateVAE, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedVehicule = (from v in dcAcc.GetTable<VEHICULE>()
                                       where v.IdVeh == idVeh
                                       select v).FirstOrDefault<VEHICULE>();

                var matchedClient = (from clt in dcAcc.GetTable<CLIENT>()
                                     where clt.IdClient == idClient
                                     select clt).FirstOrDefault<CLIENT>();

                if (matchedClient == null)
                {
                    throw new EnregistrementInexistant("Client inexistant");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                DateTime dte = DateTime.Now;

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Véhicule : Passer en VAE").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour passer un véhicule en VAE. Veuillez contacter un administrateur");
                }

                if (matchedVehicule.StatVeh == "Livré" || matchedVehicule.StatVeh == "Sortie en cours")
                {
                    throw new ApplicationException("Vous ne pouvez pas vendre aux enchères un véhicule déjà livré");
                }

                if (matchedVehicule.DateVAE.HasValue)
                {
                    throw new ApplicationException("Ce véhicule a déjà été passé aux enchères");
                }

                CONNAISSEMENT con = new CONNAISSEMENT();
                int numEnchere = dcAcc.CONNAISSEMENT.Count(bl => bl.NumBL.Contains(matchedVehicule.CONNAISSEMENT.NumBL + "-VAE")) + 1;
                con.NumBL = matchedVehicule.CONNAISSEMENT.NumBL + "-VAE N° " + numEnchere;
                con.BLIL = "N";// matchedVehicule.CONNAISSEMENT.BLIL;
                con.BLGN = "N";//matchedVehicule.CONNAISSEMENT.BLGN;
                con.BLLT = "N";//matchedVehicule.CONNAISSEMENT.BLLT;
                con.BLFO = "N";//matchedVehicule.CONNAISSEMENT.BLFO;
                con.BlBloque = "N";
                con.BLER = "N";//matchedVehicule.CONNAISSEMENT.BLER;
                con.BLSocar = "N";//matchedVehicule.CONNAISSEMENT.BLSocar;
                con.SensBL = matchedVehicule.CONNAISSEMENT.SensBL;
                con.CCBL = "N";//matchedVehicule.CONNAISSEMENT.CCBL;
                con.TypeBL = matchedVehicule.CONNAISSEMENT.TypeBL;
                con.ConsigneeBL = consignee;
                con.AdresseBL = adresse;
                con.NotifyBL = notify;
                con.DVBL = DateTime.Now;
                con.LPBL = matchedVehicule.CONNAISSEMENT.LPBL;
                con.DPBL = matchedVehicule.CONNAISSEMENT.DPBL;
                con.DCBL = DateTime.Now;
                con.StatutBL = "Manifesté";
                con.EtatBL = matchedVehicule.CONNAISSEMENT.EtatBL;
                con.CCBLMontant = 0;
                con.BLDette = "N";
                con.DetteMontant = 0;
                con.IdAcc = matchedVehicule.CONNAISSEMENT.IdAcc;
                con.IdEsc = matchedVehicule.CONNAISSEMENT.IdEsc;
                con.IdMan = matchedVehicule.CONNAISSEMENT.IdMan;
                con.PoidsBL = 0;
                con.VolBL = 0;
                con.DestBL = matchedVehicule.CONNAISSEMENT.DestBL;
                con.NomCharger = matchedVehicule.CONNAISSEMENT.NomCharger;
                con.AdresseCharger = matchedVehicule.CONNAISSEMENT.AdresseCharger;
                con.LastModif = DateTime.Now;
                con.EmailBL = email;
                con.IdClient = idClient;
                con.IdU = matchedUser.IdU;
                con.CodeTVA = "TVAAP";

                dcAcc.CONNAISSEMENT.InsertOnSubmit(con);
                dcAcc.SubmitChanges();

                //Statuts de traitement du BL
                List<TYPE_OPERATION> typeOpBL = (from type in dcAcc.GetTable<TYPE_OPERATION>()
                                                 where type.EltTypeOp == "BL"
                                                 select type).ToList<TYPE_OPERATION>();

                foreach (TYPE_OPERATION typeOp in typeOpBL)
                {
                    OPERATION_CONNAISSEMENT opBL = new OPERATION_CONNAISSEMENT();
                    opBL.IdBL = con.IdBL;
                    opBL.IdTypeOp = typeOp.IdTypeOp;
                    if (opBL.IdTypeOp == 33 || opBL.IdTypeOp == 34 || opBL.IdTypeOp == 35)
                    {
                        opBL.DateOp = DateTime.Now;
                        opBL.IdU = idUser;
                    }
                    dcAcc.OPERATION_CONNAISSEMENT.InsertOnSubmit(opBL);
                }
                dcAcc.OPERATION_CONNAISSEMENT.Context.SubmitChanges();

                dcAcc.SubmitChanges();

                foreach (ELEMENT_FACTURATION elt in matchedVehicule.ELEMENT_FACTURATION)
                {
                    elt.IdVeh = null;
                }

                matchedVehicule.CONNAISSEMENT = con;
                matchedVehicule.DateVAE = dateVAE;
                matchedVehicule.FFVeh = dateVAE.AddDays(7);
                matchedVehicule.FSVeh = matchedVehicule.FFVeh;
                matchedVehicule.IdVehAP = null;
                matchedVehicule.VehPorte = "N";
                matchedVehicule.VehAttelle = "N";
                matchedVehicule.IdBAE = null;
                matchedVehicule.IdDBL = null;

                dcAcc.SubmitChanges();

                //Génération des éléments de facture

                // Sélection des articles dans les tables de paramétrage
                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                //selection des lignes de prix concernant le BL
                /*AH ARTICLE articleFraisDossier = (from art in articles
                                               from par in parametres
                                               where art.CodeArticle == par.CodeAF && par.NomAF == "Frais de depôt VAE"
                                               select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleFraisDossier = (from art in articles 
                                               where art.CodeArticle ==1604
                                               select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpFraisDossier = articleFraisDossier.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleTimbre = (from art in articles
                                         from par in parametres
                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Timbre de connaissement VAE"
                                         select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleTimbre = (from art in articles where art.CodeArticle ==2102
                                         select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpTimbre = articleTimbre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                //Selection des lignes de prix concernant le véhicule
               /*AH ARTICLE articleForfaitVAE = (from art in articles
                                             from par in parametres
                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Forfait VAE"
                                             select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleForfaitVAE = (from art in articles  where art.CodeArticle ==1605
                                             select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpForfaitVAE = articleForfaitVAE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleMiseADispo = (from art in articles
                                             from par in parametres
                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Mise à disposition hors parc"
                                             select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleMiseADispo = (from art in articles   where art.CodeArticle ==1709
                                             select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpMiseADispo = articleMiseADispo.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                if (matchedVehicule.ESCALE.IdAcc == 1)
                {
                    // Element de facturation frais de dossier
                    ELEMENT_FACTURATION eltFactFraisDepot = new ELEMENT_FACTURATION();

                    eltFactFraisDepot.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactFraisDepot.EltFacture = "BL";
                    eltFactFraisDepot.LibEF = articleFraisDossier.LibArticle + " N° " + matchedVehicule.CONNAISSEMENT.NumBL;//AH "Frais de dépôt VAE N° " + matchedVehicule.CONNAISSEMENT.NumBL;
                    eltFactFraisDepot.DateJEF = DateTime.Now;
                    eltFactFraisDepot.IdLP = lpFraisDossier.IdLP;
                    eltFactFraisDepot.PUEF = lpFraisDossier.PU1LP;
                    eltFactFraisDepot.QTEEF = 1;
                    eltFactFraisDepot.UnitEF = "U";
                    eltFactFraisDepot.IdEsc = matchedVehicule.CONNAISSEMENT.IdEsc;
                    eltFactFraisDepot.IdMan = matchedVehicule.CONNAISSEMENT.IdMan;
                    eltFactFraisDepot.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                    eltFactFraisDepot.CodeTVA = articleFraisDossier.CodeTVA; //"TVAAP";
                    eltFactFraisDepot.TauxTVA = articleFraisDossier.CODE_TVA.TauxTVA; //19.25f;
                    eltFactFraisDepot.CCArticle = eltFactFraisDepot.CodeTVA == "TVAEX" ? articleFraisDossier.CCArticleEx : articleFraisDossier.CCArticle;
                    eltFactFraisDepot.DestEF = "C";
                    eltFactFraisDepot.StatutEF = "En cours";
                    eltFactFraisDepot.CodeArticle = lpFraisDossier.CodeArticle.ToString();

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactFraisDepot);

                    // Element de facturation timbre de connaissement
                    ELEMENT_FACTURATION eltFactTimbre = new ELEMENT_FACTURATION();

                    eltFactTimbre.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactTimbre.EltFacture = "BL";
                    eltFactTimbre.LibEF = articleTimbre.LibArticle + " N° " + matchedVehicule.CONNAISSEMENT.NumBL; //AH"Timbre VAE N° " + matchedVehicule.CONNAISSEMENT.NumBL;
                    eltFactTimbre.DateJEF = DateTime.Now;
                    eltFactTimbre.IdLP = lpTimbre.IdLP;
                    eltFactTimbre.PUEF = lpTimbre.PU1LP;
                    eltFactTimbre.QTEEF = 1;
                    eltFactTimbre.UnitEF = "U";
                    eltFactTimbre.IdEsc = matchedVehicule.CONNAISSEMENT.IdEsc;
                    eltFactTimbre.IdMan = matchedVehicule.CONNAISSEMENT.IdMan;
                    eltFactTimbre.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                    eltFactTimbre.CodeTVA = articleTimbre.CodeTVA; //"TVAEX";
                    eltFactTimbre.TauxTVA = articleTimbre.CODE_TVA.TauxTVA; //0;
                    eltFactTimbre.CCArticle = eltFactTimbre.CodeTVA == "TVAEX" ? articleTimbre.CCArticleEx : articleTimbre.CCArticle;
                    eltFactTimbre.DestEF = "C";
                    eltFactTimbre.StatutEF = "En cours";
                    eltFactTimbre.CodeArticle = lpTimbre.CodeArticle.ToString();

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactTimbre);
                }

                // Element de facturation forfait VAE
                ELEMENT_FACTURATION eltFactForfaitVAE = new ELEMENT_FACTURATION();

                if (matchedVehicule.VolCVeh < 16)
                {
                    eltFactForfaitVAE.PUEF = lpForfaitVAE.PU1LP;
                }
                else if (matchedVehicule.VolCVeh < 50)
                {
                    eltFactForfaitVAE.PUEF = lpForfaitVAE.PU2LP;
                }
                else
                {
                    eltFactForfaitVAE.PUEF = lpForfaitVAE.PU3LP;
                }

                eltFactForfaitVAE.CodeTVA = lpForfaitVAE.ARTICLE.CodeTVA; //"TVAAP";
                eltFactForfaitVAE.TauxTVA = lpForfaitVAE.ARTICLE.CODE_TVA.TauxTVA; //19.25f;
                eltFactForfaitVAE.CCArticle = eltFactForfaitVAE.CodeTVA == "TVAEX" ? articleForfaitVAE.CCArticleEx : articleForfaitVAE.CCArticle;
                eltFactForfaitVAE.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                eltFactForfaitVAE.EltFacture = "Veh";
                eltFactForfaitVAE.LibEF = articleForfaitVAE.LibArticle + " Chassis N° " + matchedVehicule.NumChassis; //AH "Forfait VAE Chassis N° " + matchedVehicule.NumChassis;
                eltFactForfaitVAE.DateJEF = DateTime.Now;
                eltFactForfaitVAE.IdLP = lpForfaitVAE.IdLP;
                eltFactForfaitVAE.QTEEF = 1;
                eltFactForfaitVAE.UnitEF = "U";
                eltFactForfaitVAE.IdEsc = matchedVehicule.CONNAISSEMENT.IdEsc;
                eltFactForfaitVAE.IdMan = matchedVehicule.CONNAISSEMENT.IdMan;
                eltFactForfaitVAE.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                eltFactForfaitVAE.IdVeh = matchedVehicule.IdVeh;
                eltFactForfaitVAE.DestEF = "C";
                eltFactForfaitVAE.StatutEF = "En cours";

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactForfaitVAE);

                // Element de facturation mise à disposition hors parc VAE
                ELEMENT_FACTURATION eltFactMiseADispo = new ELEMENT_FACTURATION();

                if (matchedVehicule.VolCVeh < 16)
                {
                    eltFactMiseADispo.PUEF = lpMiseADispo.PU1LP;
                }
                else if (matchedVehicule.VolCVeh < 50)
                {
                    eltFactMiseADispo.PUEF = lpMiseADispo.PU2LP;
                }
                else
                {
                    eltFactMiseADispo.PUEF = lpMiseADispo.PU3LP;
                }

                eltFactMiseADispo.CodeTVA = lpMiseADispo.ARTICLE.CodeTVA; //"TVAAP";
                eltFactMiseADispo.TauxTVA = lpMiseADispo.ARTICLE.CODE_TVA.TauxTVA; //19.25f;
                eltFactMiseADispo.CCArticle = eltFactMiseADispo.CodeTVA == "TVAEX" ? articleMiseADispo.CCArticleEx : articleMiseADispo.CCArticle;
                eltFactMiseADispo.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                eltFactMiseADispo.EltFacture = "Veh";
                eltFactMiseADispo.LibEF = articleMiseADispo.LibArticle + " Chassis N° " + matchedVehicule.NumChassis; //AH "Mise à disposition hors parc - Chassis N° " + matchedVehicule.NumChassis;
                eltFactMiseADispo.DateJEF = DateTime.Now;
                eltFactMiseADispo.IdLP = lpMiseADispo.IdLP;
                eltFactMiseADispo.QTEEF = 1;
                eltFactMiseADispo.UnitEF = "U";
                eltFactMiseADispo.IdEsc = matchedVehicule.CONNAISSEMENT.IdEsc;
                eltFactMiseADispo.IdMan = matchedVehicule.CONNAISSEMENT.IdMan;
                eltFactMiseADispo.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                eltFactMiseADispo.IdVeh = matchedVehicule.IdVeh;
                eltFactMiseADispo.DestEF = "C";
                eltFactMiseADispo.StatutEF = "En cours";
                eltFactMiseADispo.CodeArticle = lpMiseADispo.CodeArticle.ToString();

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactMiseADispo);

                dcAcc.SubmitChanges();

                transaction.Complete();
                return matchedVehicule;
            }
        }

        public VEHICULE TransfertZoneSortie(int idVeh, int idLieu, DateTime dateTransf, string observations, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedVehicule = (from veh in dcAcc.GetTable<VEHICULE>()
                                       where veh.IdVeh == idVeh
                                       select veh).FirstOrDefault<VEHICULE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Véhicule : Transfert en zone de sortie").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour transférer un véhicule en zone de sortie. Veuillez contacter un administrateur");
                }

                if (matchedVehicule == null)
                {
                    throw new EnregistrementInexistant("Véhicule inexistant");
                }

                if (matchedVehicule.CONNAISSEMENT.BlBloque == "Y")
                {
                    throw new ApplicationException("Transfert en zone de sortie impossible : Ce connaissement est bloqué pour " + matchedVehicule.CONNAISSEMENT.BLBloqueNote);
                }

                if (matchedVehicule.FSVeh.Value.Date < dateTransf.Date && /*matchedVehicule.IdAcc.Value == 1 &&*/ matchedVehicule.IdEsc >= 350 && matchedVehicule.VehAttelle != "Y" && matchedVehicule.VehPorte != "Y")
                {
                    if (matchedUser.LU != "Admin")
                    {
                        throw new ApplicationException("La date à laquelle vous avez calculé le séjour a été dépassée, veuillez recalculer le séjour de ce véhicule");
                    }
                }

                if (dateTransf.Date < DateTime.Now.Date && /*matchedVehicule.IdAcc.Value == 1 &&*/ matchedVehicule.IdEsc >= 350 && matchedVehicule.VehAttelle != "Y" && matchedVehicule.VehPorte != "Y")
                {
                    if (matchedUser.LU != "Admin")
                    {
                        throw new ApplicationException("La date de transfert en zone de sortie ne peut être antérieure à la date du jour");
                    }
                }

                //TODO AH : controle stationnement 22juin
                if (matchedVehicule.FSVeh.Value.Date < DateTime.Today)
                {
                    throw new ApplicationException("Veuillez calculer le stationnement");
                }

                double som1 =(double) matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule").Sum(elt => elt.PUEF * elt.QTEEF);
                /* utilise le taux element facturation aulieu du taux code tva 
                 * double tva=(double) matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule").Sum(elt => elt.PUEF * elt.QTEEF * (elt.CODE_TVA.TauxTVA / 100));*/
                
                double tva=(double) matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule").Sum(elt => elt.PUEF * elt.QTEEF * (elt.TauxTVA / 100));
                
                if ((som1 + tva) > 100 +  GetPaiementsFactureOfConnaissement(matchedVehicule.IdBL.Value,dcAcc).Sum(pay => pay.MAPay) && matchedVehicule.CONNAISSEMENT.IdClient == 1)// && matchedVehicule.IdAcc != 1)
                {
                    throw new ApplicationException("BL non soldé : vérifiez que les prestations de SOCOMAR ont été payées");
                }

                //control facture impayées bollore max delai 10jours
                if (matchedVehicule.CONNAISSEMENT.IdClient == 13)
                {
                     List<FACTURE> lfact = (from m in dcAcc.GetTable<FACTURE>() 
                                   where m.IdFP.HasValue == true && m.IdClient==13 && m.DCFD.Value >= DateTime.Parse("01/07/2017") && m.StatutFD=="O" && (DateTime.Today - m.DCFD.Value).Days >=10
                                   select m).ToList<FACTURE>();

                     List<FACTURE_CTRL> lfac_ctrl = (from m in dcAcc.GetTable<FACTURE_CTRL>() where m.STATUT == "Actif" && m.IDCli == 13 select m).ToList<FACTURE_CTRL>();
                    //nbre de impaye avec autorisation exceptionnelle 
                    int nbrfact = (from m in lfact from c in lfac_ctrl where m.IdFD == c.IDFD select m).Count();

                    if ( (lfact.Count - nbrfact) > 0)
                    {
                        if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Véhicule : Transfert en zone de sortie sans reglement").FirstOrDefault<OPERATION>() == null)
                        {
                            throw new ApplicationException("Veuillez contacter le service recouvrement : " + (lfact.Count - nbrfact) + " facture(s)");
                        }
                        else
                        {
                           
                        }
                    }
                }

               // throw new ApplicationException("test");

                var matchedDemandeLivraison = (from dbl in dcAcc.GetTable<DEMANDE_LIVRAISON>()
                                               where dbl.IdDBL == matchedVehicule.IdDBL
                                               select dbl).FirstOrDefault<DEMANDE_LIVRAISON>();

                if (matchedDemandeLivraison != null)
                {
                    if (!matchedDemandeLivraison.DVDBL.HasValue)
                    {
                        throw new TransfertSortieException("La demande de livraison de ce véhicule n'a pas été validée");
                    }
                }
                else
                {
                    throw new TransfertSortieException("Ce véhicule ne fait l'objet d'aucun bon de livrason");
                }

                if (matchedVehicule.OCCUPATION.Count(occ => !occ.DateFin.HasValue) == 0)
                {
                    throw new TransfertSortieException("Ce véhicule n'est parqué nulle part");
                }

                // inserer opération de transfert en zone de sortie
                OPERATION_VEHICULE opVeh = new OPERATION_VEHICULE();
                opVeh.IdVeh = idVeh;
                opVeh.IdTypeOp = 8;
                opVeh.DateOp = DateTime.Now;
                opVeh.IdU = idUser;
                opVeh.IdLieu = idLieu;
                opVeh.AIOp = observations;

                dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh);

                // clôturer l'occupation actuelle
                var matchedOcccupation = (from occ in dcAcc.GetTable<OCCUPATION>()
                                          where (occ.IdVeh == idVeh && !occ.DateFin.HasValue)
                                          select occ).FirstOrDefault<OCCUPATION>();

                if (matchedOcccupation != null)
                {
                    matchedOcccupation.DateFin = DateTime.Now;
                }

                matchedVehicule.StatVeh = "Zone Sortie";

                foreach (VEHICULE v1 in dcAcc.VEHICULE.Where(v => v.IdVehAP == matchedVehicule.IdVeh && v.OPERATION_VEHICULE.Count(o => o.IdTypeOp == 1) != 0))
                {
                    // inserer opération de transfert en zone de sortie
                    if (v1.OPERATION_VEHICULE.Count(op => op.IdOpVeh == 8) == 0)
                    {
                        OPERATION_VEHICULE opVeh1 = new OPERATION_VEHICULE();
                        opVeh1.IdVeh = v1.IdVeh;
                        opVeh1.IdTypeOp = 8;
                        opVeh1.DateOp = DateTime.Now;
                        opVeh1.IdU = idUser;
                        opVeh1.IdLieu = idLieu;
                        opVeh1.AIOp = observations;

                        dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh1);
                    }

                    v1.StatVeh = "Zone Sortie";

                    foreach (VEHICULE v2 in dcAcc.VEHICULE.Where(v => v.IdVehAP == v1.IdVeh && v.OPERATION_VEHICULE.Count(o => o.IdTypeOp == 1) != 0))
                    {
                        if (v2.OPERATION_VEHICULE.Count(op => op.IdOpVeh == 8) == 0)
                        {
                            OPERATION_VEHICULE opVeh2 = new OPERATION_VEHICULE();
                            opVeh2.IdVeh = v2.IdVeh;
                            opVeh2.IdTypeOp = 8;
                            opVeh2.DateOp = DateTime.Now;
                            opVeh2.IdU = idUser;
                            opVeh2.IdLieu = idLieu;
                            opVeh2.AIOp = observations;

                            dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh2);
                        }

                        v2.StatVeh = "Zone Sortie";
                    }
                }

                // Insertion des choses du bon de sortie electronique et du séjour des autres acconiers
                if (matchedVehicule.IdAcc > 1 && !matchedVehicule.IdVehAP.HasValue)
                {
                    DateTime dte = DateTime.Now;

                    List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                    List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                    //Bon de sortie électronique
                   /*AH  ARTICLE articleBonSortieElectronique = (from art in articles
                                                            from par in parametres
                                                            where art.CodeArticle == par.CodeAF && par.NomAF == "Bon de sortie électronique"
                                                            select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleBonSortieElectronique = (from art in articles  where art.CodeArticle ==1603 select art).FirstOrDefault<ARTICLE>();
                    LIGNE_PRIX lpBonSortieElectronique = articleBonSortieElectronique.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    ELEMENT_FACTURATION eltFactBonSortieElectronique = new ELEMENT_FACTURATION();

                    eltFactBonSortieElectronique.PUEF = lpBonSortieElectronique.PU1LP;
                    eltFactBonSortieElectronique.CodeTVA = articleBonSortieElectronique.CodeTVA == "TVAEX" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                    eltFactBonSortieElectronique.TauxTVA = eltFactBonSortieElectronique.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                    eltFactBonSortieElectronique.CCArticle = eltFactBonSortieElectronique.CodeTVA == "TVAEX" ? articleBonSortieElectronique.CCArticleEx : articleBonSortieElectronique.CCArticle;
                    eltFactBonSortieElectronique.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactBonSortieElectronique.EltFacture = "Veh";
                    eltFactBonSortieElectronique.LibEF = articleBonSortieElectronique.LibArticle + " N° " + matchedVehicule.NumChassis; //AH "Bon de sortie électronique N° " + matchedVehicule.NumChassis;
                    eltFactBonSortieElectronique.DateJEF = DateTime.Now;
                    eltFactBonSortieElectronique.IdLP = lpBonSortieElectronique.IdLP;
                    eltFactBonSortieElectronique.QTEEF = 1;
                    eltFactBonSortieElectronique.UnitEF = lpBonSortieElectronique.UniteLP;
                    eltFactBonSortieElectronique.IdEsc = matchedVehicule.IdEsc;
                    eltFactBonSortieElectronique.IdMan = matchedVehicule.IdMan;
                    eltFactBonSortieElectronique.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                    eltFactBonSortieElectronique.IdVeh = matchedVehicule.IdVeh;
                    eltFactBonSortieElectronique.DestEF = "P";
                    eltFactBonSortieElectronique.StatutEF = "En cours";
                    eltFactBonSortieElectronique.CodeArticle = lpBonSortieElectronique.CodeArticle.ToString();

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactBonSortieElectronique);

                     
                }

                dcAcc.SubmitChanges();

                if (!matchedVehicule.IdBS.HasValue)
                {
                    BON_SORTIE bonSortie = new BON_SORTIE();

                    bonSortie.DateBS = DateTime.Now;
                    bonSortie.IdBL = matchedVehicule.IdBL;
                    bonSortie.AIBS = "";
                    bonSortie.IdU = idUser;

                    dcAcc.GetTable<BON_SORTIE>().InsertOnSubmit(bonSortie);

                    dcAcc.SubmitChanges();

                    matchedVehicule.StatVeh = "Sortie en cours";
                    matchedVehicule.IdBS = bonSortie.IdBS;
                    //application de la date de sortie de facon temporaire valeur qui sera maj par la routine de sortie
                    DateTime  dt = DateTime.Today;
                    //matchedVehicule.DSRVeh = dt;
 
                    OPERATION_VEHICULE opSortie = new OPERATION_VEHICULE();
                    opSortie.IdVeh = matchedVehicule.IdVeh;
                    opSortie.IdTypeOp = 9;
                    opSortie.DateOp = DateTime.Now;
                    opSortie.IdU = idUser;
                    opSortie.IdLieu = 3;
                    opSortie.AIOp = "Sortie en cours";

                    dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opSortie);

                    foreach (VEHICULE v1 in dcAcc.VEHICULE.Where(v => v.IdVehAP == matchedVehicule.IdVeh && v.OPERATION_VEHICULE.Count(o => o.IdTypeOp == 1) != 0))
                    {
                        if (v1.OPERATION_VEHICULE.Count(op => op.IdOpVeh == 9) == 0)
                        {
                            OPERATION_VEHICULE opSortie1 = new OPERATION_VEHICULE();
                            opSortie1.IdVeh = v1.IdVeh;
                            opSortie1.IdTypeOp = 9;
                            opSortie1.DateOp = DateTime.Now;
                            opSortie1.IdU = idUser;
                            opSortie1.IdLieu = 3;
                            opSortie1.AIOp = "Sortie en cours";

                            dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opSortie1);
                        }

                        v1.StatVeh = "Sortie en cours";
                        v1.IdBS = bonSortie.IdBS;
                        //application de la date de sortie de facon temporaire valeur qui sera maj par la routine de sortie
                        //v1.DSRVeh = DateTime.Today;

                        foreach (VEHICULE v2 in dcAcc.VEHICULE.Where(v => v.IdVehAP == v1.IdVeh && v.OPERATION_VEHICULE.Count(o => o.IdTypeOp == 1) != 0))
                        {
                            if (v2.OPERATION_VEHICULE.Count(op => op.IdOpVeh == 9) == 0)
                            {
                                OPERATION_VEHICULE opSortie2 = new OPERATION_VEHICULE();
                                opSortie2.IdVeh = v2.IdVeh;
                                opSortie2.IdTypeOp = 9;
                                opSortie2.DateOp = DateTime.Now;
                                opSortie2.IdU = idUser;
                                opSortie2.IdLieu = 3;
                                opSortie2.AIOp = "Sortie en cours";

                                dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opSortie2);
                            }

                            v2.StatVeh = "Sortie en cours";
                            v2.IdBS = bonSortie.IdBS;
                            //application de la date de sortie de facon temporaire valeur qui sera maj par la routine de sortie
                            //v2.DSRVeh = DateTime.Today;

                        }
                    }

                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedVehicule;
            }
        }

        public VEHICULE SortirVehicule(int idVeh, int idLieu, DateTime dateSortie, string observations, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedVehicule = (from veh in dcAcc.GetTable<VEHICULE>()
                                       where veh.IdVeh == idVeh
                                       select veh).FirstOrDefault<VEHICULE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Véhicule : Enregistrement de l'opération de sortie").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer une opération de sortie sur un véhicule. Veuillez contacter un administrateur");
                }

                if (matchedVehicule == null)
                {
                    throw new EnregistrementInexistant("Véhicule inexistant");
                }

                var matchedBS = (from bs in dcAcc.GetTable<BON_SORTIE>()
                                 where bs.IdBS == matchedVehicule.IdBS
                                 select bs).FirstOrDefault<BON_SORTIE>();

                if (matchedBS == null)
                {
                    throw new ApplicationException("Ce véhicule ne fait l'objet d'aucun bon de sortie");
                }

                if (matchedVehicule.FSVeh.Value.Date < dateSortie.Date && /*matchedVehicule.IdAcc.Value == 1 &&*/ matchedVehicule.IdEsc >= 350 && matchedVehicule.VehAttelle != "Y" && matchedVehicule.VehPorte != "Y")
                {
                    if (matchedUser.LU != "Admin")
                    {
                        throw new ApplicationException("La date à laquelle vous avez calculé le séjour a été dépassée, veuillez recalculer le séjour de ce véhicule");
                    }
                }

                if (dateSortie.Date < DateTime.Now.Date && /*matchedVehicule.IdAcc.Value == 1 &&*/ matchedVehicule.IdEsc >= 350 && matchedVehicule.VehAttelle != "Y" && matchedVehicule.VehPorte != "Y")
                {
                    if (matchedUser.LU != "Admin")
                    {
                        throw new ApplicationException("La date de sortie ne peut être antérieure à la date du jour");
                    }
                }

                double somme1; double tva;

                if (DateTime.Today >= DateTime.Parse("18/12/2016") && DateTime.Today <= DateTime.Parse("24/12/2016") && matchedVehicule.CONNAISSEMENT.ESCALE.IdArm == 1 && matchedVehicule.CONNAISSEMENT.ESCALE.DRAEsc <= DateTime.Parse("31/08/2016") && matchedVehicule.VolCVeh.Value<=18)
                {
                    somme1 = (double)matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule" && el.REF_IDJEF.HasValue==false).Sum(elt => elt.PUEF * elt.QTEEF);

                    tva = (double)matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule" && el.REF_IDJEF.HasValue == false).Sum(elt => elt.PUEF * elt.QTEEF * (elt.TauxTVA / 100));

                }
                else
                {
                    somme1 = (double)matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule").Sum(elt => elt.PUEF * elt.QTEEF);

                    /*ah 9nov remplacement du taux code tva par le taux elemnt facturation
                    double tva = (double)matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule").Sum(elt => elt.PUEF * elt.QTEEF * (elt.CODE_TVA.TauxTVA / 100))
                    */
                    tva = (double)matchedVehicule.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1604 || el.LIGNE_PRIX.CodeArticle == 1605 || el.LIGNE_PRIX.CodeArticle == 1707 || el.LIGNE_PRIX.CodeArticle == 1801 || el.LIGNE_PRIX.CodeArticle == 1815 || el.LIGNE_PRIX.CodeArticle == 1819 || el.LIGNE_PRIX.CodeArticle == 1820) && el.StatutEF != "Annule").Sum(elt => elt.PUEF * elt.QTEEF * (elt.TauxTVA / 100));

                }

                if (somme1 +  tva > 100 + GetPaiementsFactureOfConnaissement(matchedVehicule.IdBL.Value,dcAcc).Sum(pay => pay.MAPay) && matchedVehicule.CONNAISSEMENT.IdClient == 1)// && matchedVehicule.IdAcc != 1)
                {
                    throw new ApplicationException("BL non soldé : vérifiez que les prestation de SOCOMAR ont été payées");
                }

                // inserer opération de sortie
                OPERATION_VEHICULE opVeh = new OPERATION_VEHICULE();
                opVeh.IdVeh = idVeh;
                opVeh.IdTypeOp = 10;
                opVeh.DateOp = DateTime.Now;
                opVeh.IdU = idUser;
                opVeh.IdLieu = idLieu;
                opVeh.AIOp = observations;

                dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh);

                matchedVehicule.DSRVeh = dateSortie;
                matchedVehicule.StatVeh = "Livré";

                foreach (VEHICULE v1 in dcAcc.VEHICULE.Where(v => v.IdVehAP == matchedVehicule.IdVeh && v.OPERATION_VEHICULE.Count(o => o.IdTypeOp == 1) != 0))
                {
                    // inserer opération de transfert en zone de sortie
                    if (v1.OPERATION_VEHICULE.Count(op => op.IdOpVeh == 10) == 0)
                    {
                        OPERATION_VEHICULE opVeh1 = new OPERATION_VEHICULE();
                        opVeh1.IdVeh = v1.IdVeh;
                        opVeh1.IdTypeOp = 10;
                        opVeh1.DateOp = DateTime.Now;
                        opVeh1.IdU = idUser;
                        opVeh1.IdLieu = idLieu;
                        opVeh1.AIOp = observations;

                        dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh1);
                    }

                    v1.StatVeh = "Livré";
                    v1.DSRVeh = dateSortie;

                    foreach (VEHICULE v2 in dcAcc.VEHICULE.Where(v => v.IdVehAP == v1.IdVeh && v.OPERATION_VEHICULE.Count(o => o.IdTypeOp == 1) != 0))
                    {
                        if (v2.OPERATION_VEHICULE.Count(op => op.IdOpVeh == 10) == 0)
                        {
                            OPERATION_VEHICULE opVeh2 = new OPERATION_VEHICULE();
                            opVeh2.IdVeh = v2.IdVeh;
                            opVeh2.IdTypeOp = 10;
                            opVeh2.DateOp = DateTime.Now;
                            opVeh2.IdU = idUser;
                            opVeh2.IdLieu = idLieu;
                            opVeh2.AIOp = observations;

                            dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh2);
                        }

                        v2.StatVeh = "Livré";
                        v2.DSRVeh = dateSortie;
                    }
                }

                //Clôture des éléments macro
                int nbVehBL = matchedVehicule.BON_SORTIE.CONNAISSEMENT.VEHICULE.Count;
                int nbVehBLBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.VEHICULE.Count(veh => veh.IdBS.HasValue);

                int nbCtrBL = matchedVehicule.BON_SORTIE.CONNAISSEMENT.CONTENEUR.Count;
                int nbCtrBLBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.CONTENEUR.Count(ctr => ctr.IdBS.HasValue);

                int nbGCBL = matchedVehicule.BON_SORTIE.CONNAISSEMENT.CONVENTIONNEL.Count;
                int nbGCBLBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.CONVENTIONNEL.Count(gc => gc.IdBS.HasValue);

                if (nbVehBL == nbVehBLBS && nbCtrBL == nbCtrBLBS && nbGCBL == nbGCBLBS)
                {
                    OPERATION_CONNAISSEMENT matchedOpBL = (from op in dcAcc.GetTable<OPERATION_CONNAISSEMENT>()
                                                           where op.IdBL == matchedVehicule.BON_SORTIE.IdBL && op.IdTypeOp == 43
                                                           select op).SingleOrDefault<OPERATION_CONNAISSEMENT>();

                    if (!matchedOpBL.DateOp.HasValue)
                    {
                        matchedOpBL.DateOp = DateTime.Now;
                        matchedOpBL.IdU = idUser;
                        matchedOpBL.AIOp = "Clôture";
                    }

                    matchedVehicule.BON_SORTIE.CONNAISSEMENT.StatutBL = "Cloturé";
                }

                dcAcc.SubmitChanges();

                int nbVehMan = matchedVehicule.BON_SORTIE.CONNAISSEMENT.MANIFESTE.VEHICULE.Count;
                int nbVehManBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.MANIFESTE.VEHICULE.Count(veh => veh.IdBS.HasValue);

                int nbCtrMan = matchedVehicule.BON_SORTIE.CONNAISSEMENT.MANIFESTE.CONTENEUR.Count;
                int nbCtrManBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.MANIFESTE.CONTENEUR.Count(ctr => ctr.IdBS.HasValue);

                int nbGCMan = matchedVehicule.BON_SORTIE.CONNAISSEMENT.MANIFESTE.CONVENTIONNEL.Count;
                int nbGCManBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.MANIFESTE.CONVENTIONNEL.Count(gc => gc.IdBS.HasValue);

                if (nbVehMan == nbVehManBS && nbCtrMan == nbCtrManBS && nbGCMan == nbGCManBS)
                {
                    OPERATION_MANIFESTE matchedOpMan = (from op in dcAcc.GetTable<OPERATION_MANIFESTE>()
                                                        where op.IdMan == matchedVehicule.BON_SORTIE.CONNAISSEMENT.IdMan && op.IdTypeOp == 51
                                                        select op).SingleOrDefault<OPERATION_MANIFESTE>();

                    if (!matchedOpMan.DateOp.HasValue)
                    {
                        matchedOpMan.DateOp = DateTime.Now;
                        matchedOpMan.IdU = idUser;
                        matchedOpMan.AIOp = "Clôture";
                    }
                }

                dcAcc.SubmitChanges();

                int nbVehEsc = matchedVehicule.BON_SORTIE.CONNAISSEMENT.ESCALE.VEHICULE.Count;
                int nbVehEscBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.ESCALE.VEHICULE.Count(veh => veh.IdBS.HasValue);

                int nbCtrEsc = matchedVehicule.BON_SORTIE.CONNAISSEMENT.ESCALE.CONTENEUR.Count;
                int nbCtrEscBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.ESCALE.CONTENEUR.Count(ctr => ctr.IdBS.HasValue);

                int nbGCEsc = matchedVehicule.BON_SORTIE.CONNAISSEMENT.ESCALE.CONVENTIONNEL.Count;
                int nbGCEscBS = matchedVehicule.BON_SORTIE.CONNAISSEMENT.ESCALE.CONVENTIONNEL.Count(gc => gc.IdBS.HasValue);

                if (nbVehEsc == nbVehEscBS && nbCtrEsc == nbCtrEscBS && nbGCEsc == nbGCEscBS)
                {
                    OPERATION_ESCALE matchedOpEsc = (from op in dcAcc.GetTable<OPERATION_ESCALE>()
                                                     where op.IdEsc == matchedVehicule.BON_SORTIE.CONNAISSEMENT.IdEsc && op.IdTypeOp == 59
                                                     select op).SingleOrDefault<OPERATION_ESCALE>();

                    if (!matchedOpEsc.DateOp.HasValue)
                    {
                        matchedOpEsc.DateOp = DateTime.Now;
                        matchedOpEsc.IdU = idUser;
                        matchedOpEsc.AIOp = "Clôture";
                    }
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedVehicule;
            }
        }

        public void CalculerSejourVehiculeV2(string chassis, string bl,int idquotation,DateTime dateFin, UTILISATEUR User)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                List<OPERATION> operationsUser = GetOperationsUtilisateur(User.IdU, dcAcc);

                if (User != null && operationsUser.Where(op => op.NomOp == "Véhicule : Calcul du stationnement").FirstOrDefault<OPERATION>() == null && User.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour calculer le stationnement d'un véhicule. Veuillez contacter un administrateur");
                }

                var matchedBL = (from _bl in dcAcc.GetTable<CONNAISSEMENT>() where _bl.NumBL == bl select _bl).FirstOrDefault();
                if (matchedBL != null)
                { 
                    //recuperation des vehicules
                    List<VEHICULE> _lstveh = null;
                    if (chassis == "All")
                    {
                        _lstveh = (from veh in dcAcc.GetTable<VEHICULE>()
                                   where veh.IdBL == matchedBL.IdBL && veh.StatVeh != "Livré"
                                   select veh).ToList<VEHICULE>();
                    }
                    else
                    {
                        _lstveh = (from veh in dcAcc.GetTable<VEHICULE>()
                                   where veh.NumChassis == chassis && veh.StatVeh != "Livré"
                                   select veh).ToList<VEHICULE>();
                    }

                    if (_lstveh != null)
                    {

                        List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                        List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();
                                 
                        foreach (VEHICULE matchedVehicule in _lstveh)
                        {
                            var opIdentification = (from op in dcAcc.GetTable<OPERATION_VEHICULE>()
                                                    where op.IdTypeOp == 1 && op.IdVeh == matchedVehicule.IdVeh
                                                    select op).FirstOrDefault<OPERATION_VEHICULE>();
                            int idVeh = matchedVehicule.IdVeh;
                            if (matchedVehicule.ESCALE.RGPEsc != "Y")
                            {
                                throw new FacturationException("Il n'est pas possible de facturer le séjour sur le véhicue "+matchedVehicule.NumChassis+" , car le rôle Gestionnaire de Parc n'est pas activé sur l'escale");
                            }

                            if (opIdentification == null)
                            {
                                throw new FacturationException("Vous ne pouvez pas calculer le séjour parc auto sur le chassis " + matchedVehicule.NumChassis + "s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                            }

                            if (!matchedVehicule.IdVehAP.HasValue)
                            {
                                DateTime dte = DateTime.Now;

                                OPERATION_VEHICULE opVeh = new OPERATION_VEHICULE();

                                opVeh.IdVeh = matchedVehicule.IdVeh;
                                opVeh.DateOp = dte;
                                opVeh.IdTypeOp = 11;
                                opVeh.AIOp = matchedVehicule.FSVeh.Value.AddDays(1).ToShortDateString() + " - " + dateFin.ToShortDateString(); ;
                                opVeh.IdU =User.IdU ;

                                dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh);

                                DateTime finAncienSejour = DateTime.Now;

                                if (matchedVehicule.FSVeh.HasValue)
                                {
                                    finAncienSejour = matchedVehicule.FSVeh.Value;
                                }

                                matchedVehicule.FSVeh = dateFin;

                                List<VEHICULE> vehsAP = (from v in dcAcc.GetTable<VEHICULE>()
                                                         where v.IdVehAP == matchedVehicule.IdVeh
                                                         select v).ToList<VEHICULE>();

                                foreach (VEHICULE v in vehsAP)
                                {
                                    v.FSVeh = dateFin;
                                }

                                if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                     where ef.IdVeh == idVeh && (ef.CodeArticle == "1801" || ef.CodeArticle == "1815")
                                     select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                                {
                                     
                                    List<ELEMENT_FACTURATION> eltsSejourParc = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                                where ef.IdVeh == idVeh
                                                                                && (ef.CodeArticle == "1801" || ef.CodeArticle == "1815")
                                                                                select ef).ToList<ELEMENT_FACTURATION>();
                                    foreach (ELEMENT_FACTURATION elt in eltsSejourParc)
                                    {
                                        elt.StatutEF = "Annule";
                                    }
                                }

                                #region recupération articles
                                ARTICLE articleSejourParcAuto = (from art in articles where art.CodeArticle == 1801 select art).FirstOrDefault<ARTICLE>();
                                LIGNE_PRIX lpSejourParcAuto = null;


                                ARTICLE articleDeboursPADPenalite = (from art in articles where art.CodeArticle == 1815 select art).FirstOrDefault<ARTICLE>();
                                LIGNE_PRIX lpDeboursPADPenalite = null;
                                if (matchedVehicule.StatutCVeh == "U")
                                {
                                    if (matchedVehicule.VolCVeh >= 50)
                                    {
                                        lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU3" && lp.DDLP <= dte && lp.DFLP >= dte);
                                        lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU3" && lp.DDLP <= dte && lp.DFLP >= dte);
                                    }
                                    else if (matchedVehicule.VolCVeh >= 16)
                                    {
                                        lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU2" && lp.DDLP <= dte && lp.DFLP >= dte);
                                        lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU2" && lp.DDLP <= dte && lp.DFLP >= dte);
                                    }
                                    else
                                    {
                                        lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU1" && lp.DDLP <= dte && lp.DFLP >= dte);
                                        lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU1" && lp.DDLP <= dte && lp.DFLP >= dte);
                                    }
                                }
                                else if (matchedVehicule.StatutCVeh == "N")
                                {
                                    if (matchedVehicule.VolCVeh >= 50)
                                    {
                                        lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN3" && lp.DDLP <= dte && lp.DFLP >= dte);
                                        lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN3" && lp.DDLP <= dte && lp.DFLP >= dte);
                                    }
                                    else if (matchedVehicule.VolCVeh >= 16)
                                    {
                                        lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN2" && lp.DDLP <= dte && lp.DFLP >= dte);
                                        lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN2" && lp.DDLP <= dte && lp.DFLP >= dte);
                                    }
                                    else
                                    {
                                        lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN1" && lp.DDLP <= dte && lp.DFLP >= dte);
                                        lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN1" && lp.DDLP <= dte && lp.DFLP >= dte);
                                    }
                                }

                                #endregion
                                
                                bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                      where ef.IdVeh == idVeh && (ef.LIGNE_PRIX.CodeArticle == 1801) && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                                      select ef).ToList<ELEMENT_FACTURATION>().Count != 0;

                                if (!isEltsNotFree)
                                {
                                    if (matchedVehicule.ELEMENT_FACTURATION.Count(el => el.LIGNE_PRIX.CodeArticle == 1605) != 0)
                                    {
                                        #region bl vae
                                        double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                                        ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();
                                        eltFactSejourParcAuto.ID_QUOTATION = idquotation;

                                        eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                        eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                        eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                        eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                        eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                        eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                        eltFactSejourParcAuto.EltFacture = "Veh";
                                        //eltFactSejourParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                        eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                        //AH "Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                        eltFactSejourParcAuto.DateJEF = DateTime.Now;
                                        eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                                        eltFactSejourParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                                        eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                                        eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                                        eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                                        eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                        eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                                        eltFactSejourParcAuto.DestEF = "C";
                                        eltFactSejourParcAuto.StatutEF = "En cours";
                                        eltFactSejourParcAuto.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                                        ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();
                                        eltFactDeboursPADParcAuto.ID_QUOTATION = idquotation;

                                        eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                        eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                        eltFactDeboursPADParcAuto.CodeTVA = articleDeboursPADPenalite.CodeTVA;// "TVAEX";
                                        eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                        eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                        eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                        eltFactDeboursPADParcAuto.EltFacture = "Veh";
                                        //eltFactDeboursPADParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                        eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                        //AH "Débours PAD : Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                        eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                                        eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                                        eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                                        eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                                        eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                                        eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                                        eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                        eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                                        eltFactDeboursPADParcAuto.DestEF = "C";
                                        eltFactDeboursPADParcAuto.StatutEF = "En cours";
                                        eltFactDeboursPADParcAuto.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                                        #endregion
                                    }
                                    else
                                    {
                                        double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                                        if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9)
                                        {
                                            #region niveau 9
                                            ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAuto.ID_QUOTATION = idquotation;

                                            eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAuto.EltFacture = "Veh";
                                            //eltFactSejourParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            //AH "Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactSejourParcAuto.DateJEF = DateTime.Now;
                                            eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                                            eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAuto.DestEF = "C";
                                            eltFactSejourParcAuto.StatutEF = "En cours";
                                            eltFactSejourParcAuto.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAuto.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAuto.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAuto.EltFacture = "Veh";
                                            //eltFactDeboursPADParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            //AH "Débours PAD : Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                                            eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAuto.DestEF = "C";
                                            eltFactDeboursPADParcAuto.StatutEF = "En cours";
                                            eltFactDeboursPADParcAuto.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                                            #endregion
                                        }
                                        else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20)
                                        {
                                            #region niveau 9 20
                                            ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN1.EltFacture = "Veh";
                                            eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            //AH "Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN1.QTEEF = 9;
                                            eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN1.DestEF = "C";
                                            eltFactSejourParcAutoN1.StatutEF = "En cours";
                                            eltFactSejourParcAutoN1.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVATI
                                            eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            //AH "Débours PAD : Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN1.QTEEF = 9;
                                            eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN1.DestEF = "C";
                                            eltFactDeboursPADParcAutoN1.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN1.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN2.EltFacture = "Veh";
                                            //AH Pénalité de stationnement Chassis
                                            eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - 9;
                                            eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN2.DestEF = "C";
                                            eltFactSejourParcAutoN2.StatutEF = "En cours";
                                            eltFactSejourParcAutoN2.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                            //Ah Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - 9;
                                            eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN2.DestEF = "C";
                                            eltFactDeboursPADParcAutoN2.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN2.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                            #endregion
                                            
                                        }
                                        else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20 + 30)
                                        {
                                            #region niveau 9 20 30
                                            ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN1.EltFacture = "Veh";
                                            //AH Pénalité de stationnement Chassis
                                            eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN1.QTEEF = 9;
                                            eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN1.DestEF = "C";
                                            eltFactSejourParcAutoN1.StatutEF = "En cours";
                                            eltFactSejourParcAutoN1.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement Chassis
                                            eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN1.QTEEF = 9;
                                            eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN1.DestEF = "C";
                                            eltFactDeboursPADParcAutoN1.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN1.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN2.EltFacture = "Veh";
                                            //AH Pénalité de stationnement Chassis
                                            eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                            eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN2.QTEEF = 20;
                                            eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN2.DestEF = "C";
                                            eltFactSejourParcAutoN2.StatutEF = "En cours";
                                            eltFactSejourParcAutoN2.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement Chassis
                                            eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                            eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN2.QTEEF = 20;
                                            eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN2.DestEF = "C";
                                            eltFactDeboursPADParcAutoN2.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN2.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN3.EltFacture = "Veh";
                                            //AH Pénalité de stationnement Chassis
                                            eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20;
                                            eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN3.DestEF = "C";
                                            eltFactSejourParcAutoN3.StatutEF = "En cours";
                                            eltFactSejourParcAutoN3.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20;
                                            eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN3.DestEF = "C";
                                            eltFactDeboursPADParcAutoN3.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN3.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                            #endregion
                                        }
                                        else
                                        {
                                            #region niveau 4
                                            ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN1.EltFacture = "Veh";
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN1.QTEEF = 9;
                                            eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN1.DestEF = "C";
                                            eltFactSejourParcAutoN1.StatutEF = "En cours";
                                            eltFactSejourParcAutoN1.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //
                                            eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement 
                                            eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                            eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN1.QTEEF = 9;
                                            eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN1.DestEF = "C";
                                            eltFactDeboursPADParcAutoN1.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN1.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN2.EltFacture = "Veh";
                                            //AH Pénalité de stationnement 
                                            eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                            eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN2.QTEEF = 20;
                                            eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN2.DestEF = "C";
                                            eltFactSejourParcAutoN2.StatutEF = "En cours";
                                            eltFactSejourParcAutoN2.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                            eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN2.QTEEF = 20;
                                            eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN2.DestEF = "C";
                                            eltFactDeboursPADParcAutoN2.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN2.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN3.EltFacture = "Veh";
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20 + 30).ToShortDateString();
                                            eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN3.QTEEF = 30;
                                            eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN3.DestEF = "C";
                                            eltFactSejourParcAutoN3.StatutEF = "En cours";
                                            eltFactSejourParcAutoN3.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement 
                                            eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20 + 30).ToShortDateString();
                                            eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN3.QTEEF = 30;
                                            eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN3.DestEF = "C";
                                            eltFactDeboursPADParcAutoN3.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN3.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN4 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN4.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN4.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                            eltFactSejourParcAutoN4.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                            eltFactSejourParcAutoN4.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN4.TauxTVA = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN4.CCArticle = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN4.EltFacture = "Veh";
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN4.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20 + 30).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactSejourParcAutoN4.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN4.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20 - 30;
                                            eltFactSejourParcAutoN4.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN4.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN4.DestEF = "C";
                                            eltFactSejourParcAutoN4.StatutEF = "En cours";
                                            eltFactSejourParcAutoN4.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN4);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN4 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN4.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN4.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                            eltFactDeboursPADParcAutoN4.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                            eltFactDeboursPADParcAutoN4.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAutoN4.TauxTVA = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN4.CCArticle = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN4.EltFacture = "Veh";
                                            //AH Débours PAD : Pénalité de stationnement 
                                            eltFactDeboursPADParcAutoN4.LibEF = articleDeboursPADPenalite.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20 + 30).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                            eltFactDeboursPADParcAutoN4.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN4.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20 - 30;
                                            eltFactDeboursPADParcAutoN4.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN4.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN4.DestEF = "C";
                                            eltFactDeboursPADParcAutoN4.StatutEF = "En cours";
                                            eltFactDeboursPADParcAutoN4.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN4);

                                            #endregion
                                        }
                                    }
                                }
                                else
                                {

                                    List<ELEMENT_FACTURATION> eltSejourCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                                   where ef.IdVeh == idVeh && (ef.LIGNE_PRIX.CodeArticle == 1801) && ef.StatutEF != "Annule"
                                                                                   select ef).ToList<ELEMENT_FACTURATION>();

                                    if (matchedVehicule.ELEMENT_FACTURATION.Count(el => el.LIGNE_PRIX.CodeArticle == 1605) != 0)
                                    {
                                        #region niveau VAE
                                        // Gestion pour les véhicules vendus aux enchères
                                        double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                                        ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();
                                        eltFactSejourParcAuto.ID_QUOTATION = idquotation;
                                        eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                        eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                        eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                        eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                        eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                        eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                        eltFactSejourParcAuto.EltFacture = "Veh";
                                        eltFactSejourParcAuto.DateJEF = DateTime.Now;
                                        eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                                        eltFactSejourParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                        //AH  "Pénalité de stationnement
                                        eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAuto.QTEEF)).ToShortDateString();
                                        eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                                        eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                                        eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                                        eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                        eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                                        eltFactSejourParcAuto.DestEF = "C";
                                        eltFactSejourParcAuto.StatutEF = "En cours";
                                        eltFactSejourParcAuto.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                                        ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();
                                        eltFactDeboursPADParcAuto.ID_QUOTATION = idquotation;
                                        eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                        eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                        eltFactDeboursPADParcAuto.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                        eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                        eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                        eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                        eltFactDeboursPADParcAuto.EltFacture = "Veh";
                                        eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                                        eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                                        eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                        //AH Débours PAD : Pénalité de stationnement
                                        eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAuto.QTEEF)).ToShortDateString();
                                        eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                                        eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                                        eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                                        eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                        eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                                        eltFactDeboursPADParcAuto.DestEF = "C";
                                        eltFactDeboursPADParcAuto.StatutEF = "En cours";
                                        eltFactDeboursPADParcAuto.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                                        #endregion
                                    }
                                    else
                                    {
                                        // Gestion pour les véhicules suivant le flux normal
                                        double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                                        if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9)
                                        {
                                            #region niveau 9
                                            ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAuto.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAuto.EltFacture = "Veh";
                                            eltFactSejourParcAuto.DateJEF = DateTime.Now;
                                            eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAuto.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAuto.DestEF = "C";
                                            eltFactSejourParcAuto.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAuto.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAuto.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                            eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAuto.EltFacture = "Veh";
                                            eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAuto.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAuto.DestEF = "C";
                                            eltFactDeboursPADParcAuto.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                                            #endregion
                                        }
                                        else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20)
                                        {
                                            #region niveau 9 20
                                            ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN1.EltFacture = "Veh";
                                            eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH "Pénalité de stationnement
                                            eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN1.DestEF = "C";
                                            eltFactSejourParcAutoN1.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement 
                                            eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN1.DestEF = "C";
                                            eltFactDeboursPADParcAutoN1.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN2.EltFacture = "Veh";
                                            eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactSejourParcAutoN1.QTEEF;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN2.DestEF = "C";
                                            eltFactSejourParcAutoN2.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactDeboursPADParcAutoN1.QTEEF;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN2.DestEF = "C";
                                            eltFactDeboursPADParcAutoN2.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                            #endregion
                                        }
                                        else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20 + 30)
                                        {
                                            #region niveau 9 20 30
                                            ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN1.EltFacture = "Veh";
                                            eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN1.DestEF = "C";
                                            eltFactSejourParcAutoN1.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN1.DestEF = "C";
                                            eltFactDeboursPADParcAutoN1.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN2.EltFacture = "Veh";
                                            eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN2.DestEF = "C";
                                            eltFactSejourParcAutoN2.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN2.DestEF = "C";
                                            eltFactDeboursPADParcAutoN2.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN3.EltFacture = "Veh";
                                            eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactSejourParcAutoN1.QTEEF - eltFactSejourParcAutoN2.QTEEF;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN3.DestEF = "C";
                                            eltFactSejourParcAutoN3.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactDeboursPADParcAutoN1.QTEEF - eltFactDeboursPADParcAutoN2.QTEEF;
                                            //AH Débours PAD : Pénalité de stationnement 
                                            eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN3.DestEF = "C";
                                            eltFactDeboursPADParcAutoN3.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                            #endregion
                                        }
                                        else
                                        {
                                      #region niveau 4
		                                    ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                            eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN1.EltFacture = "Veh";
                                            eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Pénalité de stationnement 
                                            eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN1.DestEF = "C";
                                            eltFactSejourParcAutoN1.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN1.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                            eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN1.DestEF = "C";
                                            eltFactDeboursPADParcAutoN1.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                            eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN2.EltFacture = "Veh";
                                            eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN2.DestEF = "C";
                                            eltFactSejourParcAutoN2.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN2.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                            eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN2.DestEF = "C";
                                            eltFactDeboursPADParcAutoN2.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                            eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN3.EltFacture = "Veh";
                                            eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN3.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 30) ? 30 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Pénalité de stationnement 
                                            eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN3.DestEF = "C";
                                            eltFactSejourParcAutoN3.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN3.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                            eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN3.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 30) ? 30 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN3.DestEF = "C";
                                            eltFactDeboursPADParcAutoN3.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                            ELEMENT_FACTURATION eltFactSejourParcAutoN4 = new ELEMENT_FACTURATION();
                                            eltFactSejourParcAutoN4.ID_QUOTATION = idquotation;
                                            eltFactSejourParcAutoN4.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                            eltFactSejourParcAutoN4.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                            eltFactSejourParcAutoN4.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                            eltFactSejourParcAutoN4.TauxTVA = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactSejourParcAutoN4.CCArticle = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                            eltFactSejourParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactSejourParcAutoN4.EltFacture = "Veh";
                                            eltFactSejourParcAutoN4.DateJEF = DateTime.Now;
                                            eltFactSejourParcAutoN4.IdLP = lpSejourParcAuto.IdLP;
                                            eltFactSejourParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU4LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU4LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactSejourParcAutoN1.QTEEF - eltFactSejourParcAutoN2.QTEEF - eltFactSejourParcAutoN3.QTEEF;
                                            //AH Pénalité de stationnement
                                            eltFactSejourParcAutoN4.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF + eltFactSejourParcAutoN4.QTEEF)).ToShortDateString();
                                            eltFactSejourParcAutoN4.UnitEF = lpSejourParcAuto.UniteLP;
                                            eltFactSejourParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                            eltFactSejourParcAutoN4.IdMan = matchedVehicule.IdMan;
                                            eltFactSejourParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactSejourParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                            eltFactSejourParcAutoN4.DestEF = "C";
                                            eltFactSejourParcAutoN4.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN4);

                                            ELEMENT_FACTURATION eltFactDeboursPADParcAutoN4 = new ELEMENT_FACTURATION();
                                            eltFactDeboursPADParcAutoN4.ID_QUOTATION = idquotation;
                                            eltFactDeboursPADParcAutoN4.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                            eltFactDeboursPADParcAutoN4.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                            eltFactDeboursPADParcAutoN4.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                            eltFactDeboursPADParcAutoN4.TauxTVA = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                            eltFactDeboursPADParcAutoN4.CCArticle = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                            eltFactDeboursPADParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                            eltFactDeboursPADParcAutoN4.EltFacture = "Veh";
                                            eltFactDeboursPADParcAutoN4.DateJEF = DateTime.Now;
                                            eltFactDeboursPADParcAutoN4.IdLP = lpDeboursPADPenalite.IdLP;
                                            eltFactDeboursPADParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU4LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU4LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactDeboursPADParcAutoN1.QTEEF - eltFactDeboursPADParcAutoN2.QTEEF - eltFactDeboursPADParcAutoN3.QTEEF;
                                            //AH Débours PAD : Pénalité de stationnement
                                            eltFactDeboursPADParcAutoN4.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF + eltFactDeboursPADParcAutoN4.QTEEF)).ToShortDateString();
                                            eltFactDeboursPADParcAutoN4.UnitEF = lpDeboursPADPenalite.UniteLP;
                                            eltFactDeboursPADParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                            eltFactDeboursPADParcAutoN4.IdMan = matchedVehicule.IdMan;
                                            eltFactDeboursPADParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                            eltFactDeboursPADParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                            eltFactDeboursPADParcAutoN4.DestEF = "C";
                                            eltFactDeboursPADParcAutoN4.StatutEF = "En cours";

                                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN4);

                                      #endregion
                                        }
                                    }
                                }

                                dcAcc.SubmitChanges();
                                 
                            } 
                        }
                       // dcAcc.SubmitChanges();
                        transaction.Complete();
                    }
                    else
                        throw new ApplicationException("Aucun chassis trouvé.");
                }
                else
                    throw new ApplicationException("Le connaissement indique n'existe pas.");
            }
        }

        public VEHICULE CalculerSejourVehicule(int idVeh, DateTime dateFin, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedVehicule = (from veh in dcAcc.GetTable<VEHICULE>()
                                       where veh.IdVeh == idVeh
                                       select veh).SingleOrDefault<VEHICULE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Véhicule : Calcul du stationnement").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour calculer le stationnement d'un véhicule. Veuillez contacter un administrateur");
                }

                if (matchedVehicule == null)
                {
                    throw new EnregistrementInexistant("Véhicule inexistant");
                }

                var opIdentification = (from op in dcAcc.GetTable<OPERATION_VEHICULE>()
                                        where op.IdTypeOp == 1 && op.IdVeh == idVeh
                                        select op).FirstOrDefault<OPERATION_VEHICULE>();

                //if (matchedVehicule.VehPorte == "Y")
                //{
                //    throw new ApplicationException("vous ne pouvez pas calculer le séjour pour un véhicule porté");
                //}

                if (matchedVehicule.ESCALE.RGPEsc != "Y")
                {
                    throw new FacturationException("Il n'est pas possible de facturer le séjour sur ce véhicue, car le rôle Gestionnaire de Parc n'est pas activé sur l'escale");
                }

                if (opIdentification == null)
                {
                    throw new FacturationException("Vous ne pouvez pas calculer le séjour parc auto sur ce chassis s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                }

                // Vérification qu'il n'existe pas de véhicule de ce connaissement en cubage
                //var matchedCubageVehicule = (from veh in dcAcc.GetTable<VEHICULE>()
                //                             from cub in dcAcc.GetTable<CUBAGE_VEHICULE>()
                //                             where cub.IdVeh == veh.IdVeh && !cub.DateCV.HasValue
                //                             select veh).ToList<VEHICULE>();

                //if (matchedCubageVehicule != null)
                //{
                //    throw new FacturationException("Calcul du séjour impossible : ce véhicule est en cubage");
                //}

                //if (matchedVehicule.IdVehAP.HasValue)
                //{
                //    throw new FacturationException("Calcul du séjour impossible : ce véhicule est attellé ou porté");
                //}

                if (!matchedVehicule.IdVehAP.HasValue)
                {
                    DateTime dte = DateTime.Now;

                    OPERATION_VEHICULE opVeh = new OPERATION_VEHICULE();

                    opVeh.IdVeh = idVeh;
                    opVeh.DateOp = dte;
                    opVeh.IdTypeOp = 11;
                    opVeh.AIOp = matchedVehicule.FSVeh.Value.AddDays(1).ToShortDateString() + " - " + dateFin.ToShortDateString(); ;
                    opVeh.IdU = idUser;

                    dcAcc.GetTable<OPERATION_VEHICULE>().InsertOnSubmit(opVeh);

                    DateTime finAncienSejour = DateTime.Now;

                    if (matchedVehicule.FSVeh.HasValue)
                    {
                        finAncienSejour = matchedVehicule.FSVeh.Value;
                    }

                    matchedVehicule.FSVeh = dateFin;

                    List<VEHICULE> vehsAP = (from v in dcAcc.GetTable<VEHICULE>()
                                             where v.IdVehAP == matchedVehicule.IdVeh
                                             select v).ToList<VEHICULE>();

                    foreach (VEHICULE v in vehsAP)
                    {
                        v.FSVeh = dateFin;
                    }

                    List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                    List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                    /*AH if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                         where ef.IdVeh == idVeh && (ef.LibEF.Contains("Séjour Parc Auto") || ef.LibEF.Contains("Pénalité de stationnement"))
                         select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0) */

                    if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                         where ef.IdVeh == idVeh && (ef.CodeArticle=="1801" || ef.CodeArticle=="1815")
                         select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                    {
                        /*List<ELEMENT_FACTURATION> eltsSejourParc = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                    where ef.IdVeh == idVeh && (ef.LibEF.Contains("Séjour Parc Auto") || ef.LibEF.Contains("Pénalité de stationnement"))
                                                                    select ef).ToList<ELEMENT_FACTURATION>();
                        */
                        List<ELEMENT_FACTURATION> eltsSejourParc = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                    where ef.IdVeh == idVeh 
                                                                    && (ef.CodeArticle=="1801" || ef.CodeArticle=="1815")
                                                                    select ef).ToList<ELEMENT_FACTURATION>();
                        foreach (ELEMENT_FACTURATION elt in eltsSejourParc)
                        {
                            elt.StatutEF = "Annule";
                        }
                    }

                    /*AH ARTICLE articleSejourParcAuto = (from art in articles
                                                     from par in parametres
                                                     where art.CodeArticle == par.CodeAF && par.NomAF == "Séjour Parc Auto"
                                                     select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleSejourParcAuto = (from art in articles  where art.CodeArticle == 1801 select art).FirstOrDefault<ARTICLE>();
                    LIGNE_PRIX lpSejourParcAuto = null;

                    /*AH ARTICLE articleDeboursPADPenalite = (from art in articles
                                                         from par in parametres
                                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Debours PAD - Pénalité de stationnement"
                                                         select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleDeboursPADPenalite = (from art in articles  where art.CodeArticle == 1815 select art).FirstOrDefault<ARTICLE>();
                    LIGNE_PRIX lpDeboursPADPenalite = null;

                    /* AH Plus utile
                     * ARTICLE articleTVACpteTiers = (from art in articles
                                                   from par in parametres
                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "Debours PAD - TVA sur Pénalité de stationnement"
                                                   select art).FirstOrDefault<ARTICLE>();
                    

                    LIGNE_PRIX lpTVACpteTiers = articleTVACpteTiers.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                    */
                    if (matchedVehicule.StatutCVeh == "U")
                    {
                        if (matchedVehicule.VolCVeh >= 50)
                        {
                            lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU3" && lp.DDLP <= dte && lp.DFLP >= dte);
                            lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU3" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                        else if (matchedVehicule.VolCVeh >= 16)
                        {
                            lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU2" && lp.DDLP <= dte && lp.DFLP >= dte);
                            lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU2" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                        else
                        {
                            lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU1" && lp.DDLP <= dte && lp.DFLP >= dte);
                            lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VU1" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                    }
                    else if (matchedVehicule.StatutCVeh == "N")
                    {
                        if (matchedVehicule.VolCVeh >= 50)
                        {
                            lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN3" && lp.DDLP <= dte && lp.DFLP >= dte);
                            lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN3" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                        else if (matchedVehicule.VolCVeh >= 16)
                        {
                            lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN2" && lp.DDLP <= dte && lp.DFLP >= dte);
                            lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN2" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                        else
                        {
                            lpSejourParcAuto = articleSejourParcAuto.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN1" && lp.DDLP <= dte && lp.DFLP >= dte);
                            lpDeboursPADPenalite = articleDeboursPADPenalite.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "VN1" && lp.DDLP <= dte && lp.DFLP >= dte);
                        }
                    }

                    bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                          where ef.IdVeh == idVeh && (ef.LIGNE_PRIX.CodeArticle == 1801) && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                          select ef).ToList<ELEMENT_FACTURATION>().Count != 0;

                    if (!isEltsNotFree)
                    {
                        #region bl free whitout EF
                        if (matchedVehicule.ELEMENT_FACTURATION.Count(el => el.LIGNE_PRIX.CodeArticle == 1605) != 0)
                        {
                            #region bl vae
                            double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                            ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();

                            eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                            eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                            eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                            eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSejourParcAuto.EltFacture = "Veh";
                            //eltFactSejourParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            //AH "Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            eltFactSejourParcAuto.DateJEF = DateTime.Now;
                            eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                            eltFactSejourParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                            eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                            eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                            eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                            eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                            eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                            eltFactSejourParcAuto.DestEF = "C";
                            eltFactSejourParcAuto.StatutEF = "En cours";
                            eltFactSejourParcAuto.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                            ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();

                            eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                            eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                            eltFactDeboursPADParcAuto.CodeTVA = articleDeboursPADPenalite.CodeTVA;// "TVAEX";
                            eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                            eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactDeboursPADParcAuto.EltFacture = "Veh";
                            //eltFactDeboursPADParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            //AH "Débours PAD : Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                            eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                            eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                            eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                            eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                            eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                            eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                            eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                            eltFactDeboursPADParcAuto.DestEF = "C";
                            eltFactDeboursPADParcAuto.StatutEF = "En cours";
                            eltFactDeboursPADParcAuto.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);
                            #endregion

                            /* AH12sept2016 plus besoin de ceci du fait du code tva tvati
                            ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                            eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                            eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                            eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                            eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                            eltFactDeboursPADPenTVA.TauxTVA = 0;
                            eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactDeboursPADPenTVA.EltFacture = "Veh";
                            eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                            eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                            eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                            eltFactDeboursPADPenTVA.QTEEF = 1;
                            eltFactDeboursPADPenTVA.PTDIT = 0;
                            eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                            eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                            eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                            eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                            eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                            eltFactDeboursPADPenTVA.DestEF = "C";
                            eltFactDeboursPADPenTVA.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                             * 
                             */
                        }
                        else
                        {
                            double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                            if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9)
                            {
                                #region niveau 1 <9jrs
                                ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();

                                eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAuto.EltFacture = "Veh";
                                //eltFactSejourParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                //AH "Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactSejourParcAuto.DateJEF = DateTime.Now;
                                eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                                eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAuto.DestEF = "C";
                                eltFactSejourParcAuto.StatutEF = "En cours";
                                eltFactSejourParcAuto.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAuto.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAuto.EltFacture = "Veh";
                                //eltFactDeboursPADParcAuto.LibEF = "Séjour Parc Auto Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                //AH "Débours PAD : Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < matchedVehicule.FFVeh ? 0 : (dateFin.Date - matchedVehicule.FFVeh.Value).Days;
                                eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAuto.DestEF = "C";
                                eltFactDeboursPADParcAuto.StatutEF = "En cours";
                                eltFactDeboursPADParcAuto.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                                #endregion

                                /* puls besoin a cause du nouveau code tva tvati
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                 eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                 eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                 eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                 eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                 eltFactDeboursPADPenTVA.TauxTVA = 0;
                                 eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                 eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                 eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                 eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                 eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                 eltFactDeboursPADPenTVA.QTEEF = 1;
                                 eltFactDeboursPADPenTVA.PTDIT = 0;
                                 eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                 eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                 eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                 eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                 eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                 eltFactDeboursPADPenTVA.DestEF = "C";
                                 eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                 dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * 
                                 */
                            }
                            else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20)
                            {
                                #region niveau 2 9+20 jrs
                                ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN1.EltFacture = "Veh";
                                eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                //AH "Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN1.QTEEF = 9;
                                eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN1.DestEF = "C";
                                eltFactSejourParcAutoN1.StatutEF = "En cours";
                                eltFactSejourParcAutoN1.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVATI
                                eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                //AH "Débours PAD : Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN1.QTEEF = 9;
                                eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN1.DestEF = "C";
                                eltFactDeboursPADParcAutoN1.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN1.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN2.EltFacture = "Veh";
                                //AH Pénalité de stationnement Chassis
                                eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - 9;
                                eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN2.DestEF = "C";
                                eltFactSejourParcAutoN2.StatutEF = "En cours";
                                eltFactSejourParcAutoN2.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                //Ah Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - 9;
                                eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN2.DestEF = "C";
                                eltFactDeboursPADParcAutoN2.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN2.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                #endregion

                                /*
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                 eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                 eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                 eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                 eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                 eltFactDeboursPADPenTVA.TauxTVA = 0;
                                 eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                 eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                 eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                 eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                 eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                 eltFactDeboursPADPenTVA.QTEEF = 1;
                                 eltFactDeboursPADPenTVA.PTDIT = 0;
                                 eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                 eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                 eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                 eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                 eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                 eltFactDeboursPADPenTVA.DestEF = "C";
                                 eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                 dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * */
                            }
                            else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20 + 30)
                            {
                                #region niveau 3 9+20+30jrs
                                ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN1.EltFacture = "Veh";
                                //AH Pénalité de stationnement Chassis
                                eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN1.QTEEF = 9;
                                eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN1.DestEF = "C";
                                eltFactSejourParcAutoN1.StatutEF = "En cours";
                                eltFactSejourParcAutoN1.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement Chassis
                                eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN1.QTEEF = 9;
                                eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN1.DestEF = "C";
                                eltFactDeboursPADParcAutoN1.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN1.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN2.EltFacture = "Veh";
                                //AH Pénalité de stationnement Chassis
                                eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN2.QTEEF = 20;
                                eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN2.DestEF = "C";
                                eltFactSejourParcAutoN2.StatutEF = "En cours";
                                eltFactSejourParcAutoN2.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement Chassis
                                eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN2.QTEEF = 20;
                                eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN2.DestEF = "C";
                                eltFactDeboursPADParcAutoN2.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN2.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN3.EltFacture = "Veh";
                                //AH Pénalité de stationnement Chassis
                                eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20;
                                eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN3.DestEF = "C";
                                eltFactSejourParcAutoN3.StatutEF = "En cours";
                                eltFactSejourParcAutoN3.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20;
                                eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN3.DestEF = "C";
                                eltFactDeboursPADParcAutoN3.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN3.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                #endregion

                                /*
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                 eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                 eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                 eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                 eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                 eltFactDeboursPADPenTVA.TauxTVA = 0;
                                 eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                 eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                 eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                 eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                 eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                 eltFactDeboursPADPenTVA.QTEEF = 1;
                                 eltFactDeboursPADPenTVA.PTDIT = 0;
                                 eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                 eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                 eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                 eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                 eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                 eltFactDeboursPADPenTVA.DestEF = "C";
                                 eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                 dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * */
                            }
                            else
                            {
                                #region niveau4
                                ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN1.EltFacture = "Veh";
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN1.QTEEF = 9;
                                eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN1.DestEF = "C";
                                eltFactSejourParcAutoN1.StatutEF = "En cours";
                                eltFactSejourParcAutoN1.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //
                                eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement 
                                eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9).ToShortDateString();
                                eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN1.QTEEF = 9;
                                eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN1.DestEF = "C";
                                eltFactDeboursPADParcAutoN1.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN1.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN2.EltFacture = "Veh";
                                //AH Pénalité de stationnement 
                                eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN2.QTEEF = 20;
                                eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN2.DestEF = "C";
                                eltFactSejourParcAutoN2.StatutEF = "En cours";
                                eltFactSejourParcAutoN2.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20).ToShortDateString();
                                eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN2.QTEEF = 20;
                                eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN2.DestEF = "C";
                                eltFactDeboursPADParcAutoN2.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN2.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN3.EltFacture = "Veh";
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20 + 30).ToShortDateString();
                                eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN3.QTEEF = 30;
                                eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN3.DestEF = "C";
                                eltFactSejourParcAutoN3.StatutEF = "En cours";
                                eltFactSejourParcAutoN3.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement 
                                eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays(9 + 20 + 30).ToShortDateString();
                                eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN3.QTEEF = 30;
                                eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN3.DestEF = "C";
                                eltFactDeboursPADParcAutoN3.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN3.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN4 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN4.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                eltFactSejourParcAutoN4.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                eltFactSejourParcAutoN4.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN4.TauxTVA = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN4.CCArticle = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN4.EltFacture = "Veh";
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN4.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20 + 30).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactSejourParcAutoN4.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN4.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20 - 30;
                                eltFactSejourParcAutoN4.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN4.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN4.DestEF = "C";
                                eltFactSejourParcAutoN4.StatutEF = "En cours";
                                eltFactSejourParcAutoN4.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN4);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN4 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN4.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                eltFactDeboursPADParcAutoN4.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                eltFactDeboursPADParcAutoN4.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAutoN4.TauxTVA = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN4.CCArticle = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN4.EltFacture = "Veh";
                                //AH Débours PAD : Pénalité de stationnement 
                                eltFactDeboursPADParcAutoN4.LibEF = articleDeboursPADPenalite.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1 + 9 + 20 + 30).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactDeboursPADParcAutoN4.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN4.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - 9 - 20 - 30;
                                eltFactDeboursPADParcAutoN4.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN4.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN4.DestEF = "C";
                                eltFactDeboursPADParcAutoN4.StatutEF = "En cours";
                                eltFactDeboursPADParcAutoN4.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN4);

                                #endregion

                                /*
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value + eltFactDeboursPADParcAutoN4.PUEF.Value * eltFactDeboursPADParcAutoN4.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value + eltFactDeboursPADParcAutoN4.PUEF.Value * eltFactDeboursPADParcAutoN4.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                eltFactDeboursPADPenTVA.TauxTVA = 0;
                                eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + matchedVehicule.FFVeh.Value.AddDays(1).ToShortDateString() + " - " + matchedVehicule.FFVeh.Value.AddDays((dateFin - matchedVehicule.FFVeh.Value).Days).ToShortDateString();
                                eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursPADPenTVA.QTEEF = 1;
                                eltFactDeboursPADPenTVA.PTDIT = 0;
                                eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADPenTVA.DestEF = "C";
                                eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * 
                                 */
                            }
                        } 
                        #endregion
                    }
                    else
                    {

                        List<ELEMENT_FACTURATION> eltSejourCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                       where ef.IdVeh == idVeh && (ef.LIGNE_PRIX.CodeArticle == 1801) && ef.StatutEF != "Annule"
                                                                       select ef).ToList<ELEMENT_FACTURATION>();

                        if (matchedVehicule.ELEMENT_FACTURATION.Count(el => el.LIGNE_PRIX.CodeArticle == 1605) != 0)
                        {
                            // Gestion pour les véhicules vendus aux enchères
                            #region vae
                            double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                            ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();

                            eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                            eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                            eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                            eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSejourParcAuto.EltFacture = "Veh";
                            eltFactSejourParcAuto.DateJEF = DateTime.Now;
                            eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                            eltFactSejourParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                            //AH  "Pénalité de stationnement
                            eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAuto.QTEEF)).ToShortDateString();
                            eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                            eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                            eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                            eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                            eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                            eltFactSejourParcAuto.DestEF = "C";
                            eltFactSejourParcAuto.StatutEF = "En cours";
                            eltFactSejourParcAuto.CodeArticle = lpSejourParcAuto.CodeArticle.ToString();
                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                            ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();

                            eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                            eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                            eltFactDeboursPADParcAuto.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                            eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                            eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactDeboursPADParcAuto.EltFacture = "Veh";
                            eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                            eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                            eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU4LP * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                            //AH Débours PAD : Pénalité de stationnement
                            eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAuto.QTEEF)).ToShortDateString();
                            eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                            eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                            eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                            eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                            eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                            eltFactDeboursPADParcAuto.DestEF = "C";
                            eltFactDeboursPADParcAuto.StatutEF = "En cours";
                            eltFactDeboursPADParcAuto.CodeArticle = lpDeboursPADPenalite.CodeArticle.ToString();
                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                            #endregion
                            /*ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                            eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                            eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                            eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                            eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                            eltFactDeboursPADPenTVA.TauxTVA = 0;
                            eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactDeboursPADPenTVA.EltFacture = "Veh";
                            eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                            eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                            eltFactDeboursPADPenTVA.QTEEF = 1;
                            eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAuto.QTEEF)).ToShortDateString();
                            eltFactDeboursPADPenTVA.PTDIT = 0;
                            eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                            eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                            eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                            eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                            eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                            eltFactDeboursPADPenTVA.DestEF = "C";
                            eltFactDeboursPADPenTVA.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                             * 
                             */
                        }
                        else
                        {
                            // Gestion pour les véhicules suivant le flux normal
                            double derogation = (matchedVehicule.CONNAISSEMENT.BLIL == "Y" || matchedVehicule.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                            if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9)
                            {
                                #region niveau1 <9
                                ELEMENT_FACTURATION eltFactSejourParcAuto = new ELEMENT_FACTURATION();

                                eltFactSejourParcAuto.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAuto.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAuto.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAuto.TauxTVA = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAuto.CCArticle = eltFactSejourParcAuto.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAuto.EltFacture = "Veh";
                                eltFactSejourParcAuto.DateJEF = DateTime.Now;
                                eltFactSejourParcAuto.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAuto.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAuto.QTEEF)).ToShortDateString();
                                eltFactSejourParcAuto.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAuto.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAuto.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAuto.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAuto.DestEF = "C";
                                eltFactSejourParcAuto.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAuto);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAuto = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAuto.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAuto.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAuto.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA; //TVAEX
                                eltFactDeboursPADParcAuto.TauxTVA = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAuto.CCArticle = eltFactDeboursPADParcAuto.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAuto.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAuto.EltFacture = "Veh";
                                eltFactDeboursPADParcAuto.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAuto.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAuto.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) <= 9) ? (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAuto.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAuto.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAuto.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAuto.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAuto.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAuto.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAuto.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAuto.DestEF = "C";
                                eltFactDeboursPADParcAuto.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAuto);

                                #endregion
                                
                                /*
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursPADParcAuto.PUEF.Value * eltFactDeboursPADParcAuto.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                eltFactDeboursPADPenTVA.TauxTVA = 0;
                                eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursPADPenTVA.QTEEF = 1;
                                eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAuto.QTEEF)).ToShortDateString();
                                eltFactDeboursPADPenTVA.PTDIT = 0;
                                eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADPenTVA.DestEF = "C";
                                eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * 
                                 */
                            }
                            else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20)
                            {
                                #region niveau2 9+20
                                ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN1.EltFacture = "Veh";
                                eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH "Pénalité de stationnement
                                eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN1.DestEF = "C";
                                eltFactSejourParcAutoN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement 
                                eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN1.DestEF = "C";
                                eltFactDeboursPADParcAutoN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN2.EltFacture = "Veh";
                                eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactSejourParcAutoN1.QTEEF;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN2.DestEF = "C";
                                eltFactSejourParcAutoN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN2.QTEEF = (dateFin - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactDeboursPADParcAutoN1.QTEEF;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN2.DestEF = "C";
                                eltFactDeboursPADParcAutoN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                #endregion
                                
                                /*
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                eltFactDeboursPADPenTVA.TauxTVA = 0;
                                eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursPADPenTVA.QTEEF = 1;
                                eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays((dateFin - finAncienSejour).Days).ToShortDateString();
                                eltFactDeboursPADPenTVA.PTDIT = 0;
                                eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADPenTVA.DestEF = "C";
                                eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * */
                            }
                            else if ((dateFin - matchedVehicule.FFVeh.Value).Days <= 9 + 20 + 30)
                            {
                                #region niveau3 9+20+30
                                ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN1.EltFacture = "Veh";
                                eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN1.DestEF = "C";
                                eltFactSejourParcAutoN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN1.DestEF = "C";
                                eltFactDeboursPADParcAutoN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN2.EltFacture = "Veh";
                                eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN2.DestEF = "C";
                                eltFactSejourParcAutoN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN2.DestEF = "C";
                                eltFactDeboursPADParcAutoN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN3.EltFacture = "Veh";
                                eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactSejourParcAutoN1.QTEEF - eltFactSejourParcAutoN2.QTEEF;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN3.DestEF = "C";
                                eltFactSejourParcAutoN3.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN3.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactDeboursPADParcAutoN1.QTEEF - eltFactDeboursPADParcAutoN2.QTEEF;
                                //AH Débours PAD : Pénalité de stationnement 
                                eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN3.DestEF = "C";
                                eltFactDeboursPADParcAutoN3.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                #endregion
                                
                                /*
                                 * ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursPADPenTVA.CodeTVA = "TVAEX";
                                eltFactDeboursPADPenTVA.TauxTVA = 0;
                                eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursPADPenTVA.QTEEF = 1;
                                eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays((dateFin - finAncienSejour).Days).ToShortDateString();
                                eltFactDeboursPADPenTVA.PTDIT = 0;
                                eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADPenTVA.DestEF = "C";
                                eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);
                                 * */
                            }
                            else
                            {
                                #region niveau4 
                                ELEMENT_FACTURATION eltFactSejourParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN1.PUEF = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.PUEFBase = lpSejourParcAuto.PU1LP - lpSejourParcAuto.PU1LP * derogation;
                                eltFactSejourParcAutoN1.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN1.TauxTVA = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN1.CCArticle = eltFactSejourParcAutoN1.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN1.EltFacture = "Veh";
                                eltFactSejourParcAutoN1.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN1.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Pénalité de stationnement 
                                eltFactSejourParcAutoN1.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN1.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN1.DestEF = "C";
                                eltFactSejourParcAutoN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN1);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN1.PUEF = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.PUEFBase = lpDeboursPADPenalite.PU1LP - lpDeboursPADPenalite.PU1LP * derogation;
                                eltFactDeboursPADParcAutoN1.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN1.TauxTVA = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN1.CCArticle = eltFactDeboursPADParcAutoN1.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN1.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN1.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN1.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN1.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 9) ? 9 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN1.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN1.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN1.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN1.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN1.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN1.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN1.DestEF = "C";
                                eltFactDeboursPADParcAutoN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN1);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN2.PUEF = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.PUEFBase = lpSejourParcAuto.PU2LP - lpSejourParcAuto.PU2LP * derogation;
                                eltFactSejourParcAutoN2.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN2.TauxTVA = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN2.CCArticle = eltFactSejourParcAutoN2.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN2.EltFacture = "Veh";
                                eltFactSejourParcAutoN2.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN2.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN2.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN2.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN2.DestEF = "C";
                                eltFactSejourParcAutoN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN2);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN2.PUEF = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.PUEFBase = lpDeboursPADPenalite.PU2LP - lpDeboursPADPenalite.PU2LP * derogation;
                                eltFactDeboursPADParcAutoN2.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN2.TauxTVA = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN2.CCArticle = eltFactDeboursPADParcAutoN2.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN2.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN2.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN2.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN2.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN2.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN2.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN2.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN2.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN2.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN2.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN2.DestEF = "C";
                                eltFactDeboursPADParcAutoN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN2);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN3.PUEF = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.PUEFBase = lpSejourParcAuto.PU3LP - lpSejourParcAuto.PU3LP * derogation;
                                eltFactSejourParcAutoN3.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN3.TauxTVA = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN3.CCArticle = eltFactSejourParcAutoN3.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN3.EltFacture = "Veh";
                                eltFactSejourParcAutoN3.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN3.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN3.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 30) ? 30 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Pénalité de stationnement 
                                eltFactSejourParcAutoN3.LibEF = articleSejourParcAuto.LibArticle + "Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN3.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN3.DestEF = "C";
                                eltFactSejourParcAutoN3.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN3);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN3 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN3.PUEF = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.PUEFBase = lpDeboursPADPenalite.PU3LP - lpDeboursPADPenalite.PU3LP * derogation;
                                eltFactDeboursPADParcAutoN3.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN3.TauxTVA = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN3.CCArticle = eltFactDeboursPADParcAutoN3.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN3.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN3.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN3.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN3.IdLP = lpDeboursPADPenalite.IdLP;
                                eltFactDeboursPADParcAutoN3.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) < 30) ? 30 - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) : 0;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN3.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN3.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN3.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN3.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN3.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN3.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN3.DestEF = "C";
                                eltFactDeboursPADParcAutoN3.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN3);

                                ELEMENT_FACTURATION eltFactSejourParcAutoN4 = new ELEMENT_FACTURATION();

                                eltFactSejourParcAutoN4.PUEF = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                eltFactSejourParcAutoN4.PUEFBase = lpSejourParcAuto.PU4LP - lpSejourParcAuto.PU4LP * derogation;
                                eltFactSejourParcAutoN4.CodeTVA = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedVehicule.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedVehicule.CONNAISSEMENT.CLIENT.CodeTVA);
                                eltFactSejourParcAutoN4.TauxTVA = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactSejourParcAutoN4.CCArticle = eltFactSejourParcAutoN4.CodeTVA == "TVAEX" ? articleSejourParcAuto.CCArticleEx : articleSejourParcAuto.CCArticle;
                                eltFactSejourParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactSejourParcAutoN4.EltFacture = "Veh";
                                eltFactSejourParcAutoN4.DateJEF = DateTime.Now;
                                eltFactSejourParcAutoN4.IdLP = lpSejourParcAuto.IdLP;
                                eltFactSejourParcAutoN4.QTEEF = (dateFin.Date - matchedVehicule.FFVeh.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU4LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU4LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU3LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU2LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourParcAuto.PU1LP * (1 - derogation) || el.PUEFBase == lpSejourParcAuto.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactSejourParcAutoN1.QTEEF - eltFactSejourParcAutoN2.QTEEF - eltFactSejourParcAutoN3.QTEEF;
                                //AH Pénalité de stationnement
                                eltFactSejourParcAutoN4.LibEF = articleSejourParcAuto.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourParcAutoN1.QTEEF + eltFactSejourParcAutoN2.QTEEF + eltFactSejourParcAutoN3.QTEEF + eltFactSejourParcAutoN4.QTEEF)).ToShortDateString();
                                eltFactSejourParcAutoN4.UnitEF = lpSejourParcAuto.UniteLP;
                                eltFactSejourParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                eltFactSejourParcAutoN4.IdMan = matchedVehicule.IdMan;
                                eltFactSejourParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactSejourParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                eltFactSejourParcAutoN4.DestEF = "C";
                                eltFactSejourParcAutoN4.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourParcAutoN4);

                                ELEMENT_FACTURATION eltFactDeboursPADParcAutoN4 = new ELEMENT_FACTURATION();

                                eltFactDeboursPADParcAutoN4.PUEF = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                eltFactDeboursPADParcAutoN4.PUEFBase = lpDeboursPADPenalite.PU4LP - lpDeboursPADPenalite.PU4LP * derogation;
                                eltFactDeboursPADParcAutoN4.CodeTVA = lpDeboursPADPenalite.ARTICLE.CodeTVA;//TVAEX
                                eltFactDeboursPADParcAutoN4.TauxTVA = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? 0 : matchedVehicule.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedVehicule.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                                eltFactDeboursPADParcAutoN4.CCArticle = eltFactDeboursPADParcAutoN4.CodeTVA == "TVAEX" ? articleDeboursPADPenalite.CCArticleEx : articleDeboursPADPenalite.CCArticle;
                                eltFactDeboursPADParcAutoN4.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADParcAutoN4.EltFacture = "Veh";
                                eltFactDeboursPADParcAutoN4.DateJEF = DateTime.Now;
                                eltFactDeboursPADParcAutoN4.IdLP = lpDeboursPADPenalite.IdLP;
                                int nbrdays = (dateFin.Date - matchedVehicule.FFVeh.Value).Days;

                                eltFactDeboursPADParcAutoN4.QTEEF = nbrdays - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU4LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU4LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU3LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU3LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU2LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU2LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpDeboursPADPenalite.PU1LP * (1 - derogation) || el.PUEFBase == lpDeboursPADPenalite.PU1LP * 1.6 * (1 - derogation)).Sum(el => el.QTEEF) - eltFactDeboursPADParcAutoN1.QTEEF - eltFactDeboursPADParcAutoN2.QTEEF - eltFactDeboursPADParcAutoN3.QTEEF;
                                //AH Débours PAD : Pénalité de stationnement
                                eltFactDeboursPADParcAutoN4.LibEF = articleDeboursPADPenalite.LibArticle + " Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactDeboursPADParcAutoN1.QTEEF + eltFactDeboursPADParcAutoN2.QTEEF + eltFactDeboursPADParcAutoN3.QTEEF + eltFactDeboursPADParcAutoN4.QTEEF)).ToShortDateString();
                                eltFactDeboursPADParcAutoN4.UnitEF = lpDeboursPADPenalite.UniteLP;
                                eltFactDeboursPADParcAutoN4.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADParcAutoN4.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADParcAutoN4.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADParcAutoN4.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADParcAutoN4.DestEF = "C";
                                eltFactDeboursPADParcAutoN4.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADParcAutoN4);

                                #endregion
                               
                                /*ELEMENT_FACTURATION eltFactDeboursPADPenTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursPADPenTVA.PUEF = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value + eltFactDeboursPADParcAutoN4.PUEF.Value * eltFactDeboursPADParcAutoN4.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.PUEFBase = matchedVehicule.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursPADParcAutoN1.PUEF.Value * eltFactDeboursPADParcAutoN1.QTEEF.Value + eltFactDeboursPADParcAutoN2.PUEF.Value * eltFactDeboursPADParcAutoN2.QTEEF.Value + eltFactDeboursPADParcAutoN3.PUEF.Value * eltFactDeboursPADParcAutoN3.QTEEF.Value + eltFactDeboursPADParcAutoN4.PUEF.Value * eltFactDeboursPADParcAutoN4.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursPADPenTVA.CCArticle = matchedVehicule.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursPADPenTVA.CodeTVA = "TVATI";//TVAEX
                                eltFactDeboursPADPenTVA.TauxTVA = 0;
                                eltFactDeboursPADPenTVA.CCCP = matchedVehicule.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursPADPenTVA.EltFacture = "Veh";
                                eltFactDeboursPADPenTVA.DateJEF = DateTime.Now;
                                eltFactDeboursPADPenTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursPADPenTVA.QTEEF = 1;
                                eltFactDeboursPADPenTVA.LibEF = "Débours PAD : TVA sur Pénalité de stationnement Chassis N° " + matchedVehicule.NumChassis + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays((dateFin - finAncienSejour).Days).ToShortDateString();
                                eltFactDeboursPADPenTVA.PTDIT = 0;
                                eltFactDeboursPADPenTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursPADPenTVA.IdEsc = matchedVehicule.IdEsc;
                                eltFactDeboursPADPenTVA.IdMan = matchedVehicule.IdMan;
                                eltFactDeboursPADPenTVA.IdBL = matchedVehicule.CONNAISSEMENT.IdBL;
                                eltFactDeboursPADPenTVA.IdVeh = matchedVehicule.IdVeh;
                                eltFactDeboursPADPenTVA.DestEF = "C";
                                eltFactDeboursPADPenTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursPADPenTVA);*/
                            }
                        }
                    }

                    dcAcc.SubmitChanges();

                    //if (matchedVehicule.CONNAISSEMENT.DEMANDE_REDUCTION.FirstOrDefault<DEMANDE_REDUCTION>(red => red.DatevDDR.HasValue) != null)
                    //{
                    //    DEMANDE_REDUCTION reduction = matchedVehicule.CONNAISSEMENT.DEMANDE_REDUCTION.FirstOrDefault<DEMANDE_REDUCTION>(red => red.DatevDDR.HasValue);
                    //    foreach (ELEMENT_FACTURATION elt in reduction.CONNAISSEMENT.ELEMENT_FACTURATION.Where(el => el.LIGNE_PRIX.CodeArticle == 1801 && (el.StatutEF == "En cours" || el.StatutEF == "Proforma")))
                    //    {
                    //        elt.PUEF = Math.Round(elt.PUEFBase.Value * (1 - reduction.Pourcent.Value / 100), 0, MidpointRounding.AwayFromZero);
                    //    }

                    //    foreach (PROFORMA prof in matchedVehicule.CONNAISSEMENT.PROFORMA.Where(p => !p.DVFP.HasValue && p.StatutFP == "O"))
                    //    {
                    //        UpdateProforma(prof.IdFP, prof.IdBL.Value, GetLignesProf(prof.IdFP), prof.AIFP, idUser);
                    //    }
                    //}
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedVehicule;
            }
        }

        #endregion

        #region booking

        /// <summary>
        /// marque le statu du conteneur a cargo laoding
        /// </summary>
        /// <param name="idCtr"></param>
        /// <param name="listeSinistre"></param>
        /// <param name="seal1">numero de plon</param>
        /// <param name="seal2">numero de plon</param>
        /// <param name="observations"></param>
        /// <param name="idUser"></param>
        /// <param name="dateop">AH21juin16 date effective de loperation</param>
        /// <returns></returns>
        public CONTENEUR ReceptionExportConteneur(int idCtr, List<TYPE_SINISTRE> listeSinistre, string seal1, string seal2, 
                string observations, int idUser, DateTime? dateop)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                //correspond au conteneur export
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).FirstOrDefault<CONTENEUR>();
                 
                var matchedConteneurTC = (from ctr in dcAcc.GetTable<CONTENEUR_TC>()
                                          where ctr.IdCtrExport == idCtr
                                          select ctr).FirstOrDefault<CONTENEUR_TC>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Booking : Gestion des embarquements").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour réceptionner un conteneur. Veuillez contacter un administrateur");
                }

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                if (!matchedConteneur.ESCALE.DRAEsc.HasValue)
                {
                    throw new ApplicationException("Echec de la réception : Le navire n'est pas encore arrivé");
                }

                if (!matchedConteneur.CONNAISSEMENT.DVCBLI.HasValue)
                {
                    throw new ApplicationException("Echec de la réception : La clearance n'a pas encore été validée");
                }

                if (matchedConteneur.StatCtr != "Final Booking")
                {
                    throw new ApplicationException("Ce conteneur a déjà été réceptionné");
                }

                if (matchedConteneur.ESCALE.SOP == "C")
                {
                    throw new ApplicationException("Echec de la réception : Le summary of operations a déjà été clôturé");
                }

                dcAcc.SubmitChanges();

                matchedConteneur.Seal1Ctr = seal1;
                matchedConteneur.Seal2Ctr = seal2;
                matchedConteneur.StatCtr = "Cargo Loading";


                if (matchedConteneurTC != null)
                {

                    var matchedOpCtr = (from op in dcAcc.GetTable<OPERATION_CONTENEUR>()
                                        where op.IdTypeOp == 282 && op.IdCtr == matchedConteneur.IdCtr
                                        select op).FirstOrDefault<OPERATION_CONTENEUR>();


                    if(matchedOpCtr == null)
                    {
                        // inserer opération de retour
                        OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();
                        opCtr.IdCtr = matchedConteneur.IdCtr;
                        opCtr.IdTypeOp = 282;
                        opCtr.DateOp = dateop; //AH 21juin16  DateTime.Now;
                        opCtr.IdU = idUser;
                        opCtr.AIOp = observations;

                        dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);
                        
                        //TODO: controller mouvement TC
                       
                        MOUVEMENT_TC mvtTC = new MOUVEMENT_TC();

                        mvtTC.DateMvt = dateop;//AH 21juin16  DateTime.Now;
                        mvtTC.IdBL = matchedConteneur.IdBL;
                        mvtTC.IdEsc = matchedConteneur.IdEsc;
                        mvtTC.IdParc = 4;
                        mvtTC.IdTC = matchedConteneurTC.IdTC;
                        mvtTC.IdTypeOp = 282;
                        mvtTC.IdUser = matchedUser.IdU;

                        dcAcc.GetTable<MOUVEMENT_TC>().InsertOnSubmit(mvtTC);

                    }

                    matchedConteneurTC.StatutTC = "Cargo Loading";
                    matchedConteneurTC.DateRetourPlein = dateop; //AH 21juin16 DateTime.Now;
                    matchedConteneurTC.IdUserRetourPlein = matchedUser.IdU;
                    
                    dcAcc.SubmitChanges();

                    foreach (TYPE_SINISTRE typeSin in listeSinistre)
                    {
                        var listInterchange = (from inter in dcAcc.GetTable<INTERCHANGE>()
                                               where inter.IdCtr == matchedConteneur.IdCtr
                                               select inter).ToList<INTERCHANGE>();

                        listInterchange.FirstOrDefault<INTERCHANGE>(ctr => ctr.IdTypeSinistre == typeSin.IdTypeSinistre).InfoRetourPlein = "Y";
                        dcAcc.INTERCHANGE.Context.SubmitChanges();
                    }

                    dcAcc.SubmitChanges();
                }

                foreach (TYPE_SINISTRE typeSin in listeSinistre)
                {
                    var listInterchange = (from inter in dcAcc.GetTable<INTERCHANGE>()
                                           where inter.IdCtr == idCtr
                                           select inter).ToList<INTERCHANGE>();

                    listInterchange.FirstOrDefault<INTERCHANGE>(ctr => ctr.IdTypeSinistre == typeSin.IdTypeSinistre).InfoIdentification = "Y";
                    dcAcc.INTERCHANGE.Context.SubmitChanges();
                }

                dcAcc.SubmitChanges();

                if (matchedConteneur.CONNAISSEMENT.CONTENEUR.Count(ctr => ctr.StatCtr == "Cargo Loading") + matchedConteneur.CONNAISSEMENT.CONVENTIONNEL.Count(conv => conv.StatGC == "Cargo Loading") == matchedConteneur.CONNAISSEMENT.CONTENEUR.Count + matchedConteneur.CONNAISSEMENT.CONVENTIONNEL.Count)
                {
                    matchedConteneur.CONNAISSEMENT.StatutBL = "Cargo Loading";
                }
                //DEtention retour plein export

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }
        }

        public CONTENEUR EmbarquerConteneur(int idCtr, List<TYPE_SINISTRE> listeSinistre, string seal1, string seal2, string observations, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).FirstOrDefault<CONTENEUR>();

                var matchedConteneurTC = (from ctr in dcAcc.GetTable<CONTENEUR_TC>()
                                          where ctr.IdCtrExport == idCtr
                                          select ctr).FirstOrDefault<CONTENEUR_TC>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Booking : Gestion des embarquements").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour embarquer un conteneur. Veuillez contacter un administrateur");
                }

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                if (!matchedConteneur.ESCALE.DRAEsc.HasValue)
                {
                    throw new ApplicationException("Echec de l'embarquement : Le navire n'est pas encore arrivé");
                }

                if (!matchedConteneur.CONNAISSEMENT.DVCBLI.HasValue)
                {
                    throw new ApplicationException("Echec de l'embarquement : La clearance n'a pas encore été validée");
                }

                if (matchedConteneur.StatCtr == "Cargo Loaded")
                {
                    throw new ApplicationException("Ce conteneur a déjà été embarqué");
                }

                if (matchedConteneur.ESCALE.SOP == "C")
                {
                    throw new ApplicationException("Echec de l'embarquement : Le summary of operations a déjà été clôturé");
                }

                if (matchedConteneur.ESCALE.RAEsc == "Y")
                {

                    //Mise à jour du summary of operation
                    if (matchedConteneur.TypeCCtr.Substring(0, 2) == "20")
                    {
                        OPERATION_ARMATEUR matchedOpArm = null;
                        if (matchedConteneur.ESCALE.IdArm == 1)
                        {
                            matchedOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                            where opArm.IdEsc == matchedConteneur.IdEsc && opArm.IdTypeOp == 160
                                            select opArm).FirstOrDefault<OPERATION_ARMATEUR>();
                        }
                        else
                        {
                            matchedOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                            where opArm.IdEsc == matchedConteneur.IdEsc && opArm.IdTypeOp == 276
                                            select opArm).FirstOrDefault<OPERATION_ARMATEUR>();
                        }


                        if (matchedOpArm != null)
                        {
                            if (matchedOpArm.QTE != null)
                            {
                                matchedOpArm.QTE = matchedOpArm.QTE + 1;
                                matchedOpArm.Poids = matchedOpArm.Poids + 1;
                            }
                            else
                            {
                                matchedOpArm.QTE = 1;
                                matchedOpArm.Poids = 1;
                            }
                        }
                        
                    }
                    else if (matchedConteneur.TypeCCtr.Substring(0, 2) == "40")
                    {
                        OPERATION_ARMATEUR matchedOpArm = null;
                        if (matchedConteneur.ESCALE.IdArm == 1)
                        {
                            matchedOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                            where opArm.IdEsc == matchedConteneur.IdEsc && opArm.IdTypeOp == 161
                                            select opArm).FirstOrDefault<OPERATION_ARMATEUR>();
                        }
                        else
                        {
                            matchedOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                            where opArm.IdEsc == matchedConteneur.IdEsc && opArm.IdTypeOp == 277
                                            select opArm).FirstOrDefault<OPERATION_ARMATEUR>();
                        }

                        if (matchedOpArm != null)
                        {
                            if (matchedOpArm.QTE != null)
                            {
                                matchedOpArm.QTE = matchedOpArm.QTE + 1;
                                matchedOpArm.Poids = matchedOpArm.Poids + 1;
                            }
                            else
                            {
                                matchedOpArm.QTE = 1;
                                matchedOpArm.Poids = 1;
                            }
                        }
                        
                    }

                    //Date actuelle du système
                    DateTime dte = DateTime.Now;

                    // Sélection des articles dans les tables de paramétrage
                    List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                    List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                    
                }

                dcAcc.SubmitChanges();

                matchedConteneur.Seal1Ctr = seal1;
                matchedConteneur.Seal2Ctr = seal2;
                matchedConteneur.StatCtr = "Cargo Loaded";

                if (matchedConteneurTC != null)
                {

                    var matchedOpCtr = (from op in dcAcc.GetTable<OPERATION_CONTENEUR>()
                                        where op.IdTypeOp == 283 && op.IdCtr == matchedConteneurTC.IdCtrExport
                                        select op).FirstOrDefault<OPERATION_CONTENEUR>();

                    if(matchedOpCtr == null)
                    {
                        // inserer opération de retour
                        OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();
                        opCtr.IdCtr = matchedConteneurTC.IdCtrExport;
                        opCtr.IdTypeOp = 283;
                        opCtr.DateOp = DateTime.Now;
                        opCtr.IdU = idUser;
                        opCtr.AIOp = observations;

                        dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);

                        MOUVEMENT_TC mvtTC = new MOUVEMENT_TC();

                        mvtTC.DateMvt = DateTime.Now;
                        mvtTC.IdBL = matchedConteneur.IdBL;
                        mvtTC.IdEsc = matchedConteneur.IdEsc;
                        mvtTC.IdParc = 4;
                        mvtTC.IdTC = matchedConteneurTC.IdTC;
                        mvtTC.IdTypeOp = 283;
                        mvtTC.IdUser = matchedUser.IdU;

                        dcAcc.GetTable<MOUVEMENT_TC>().InsertOnSubmit(mvtTC);
                    }

                    matchedConteneurTC.StatutTC = "Cargo Loaded";
                    matchedConteneurTC.DateRetourPlein = DateTime.Now;
                    matchedConteneurTC.IdUserRetourPlein = matchedUser.IdU;

                    dcAcc.SubmitChanges();

                    foreach (TYPE_SINISTRE typeSin in listeSinistre)
                    {
                        var listInterchange = (from inter in dcAcc.GetTable<INTERCHANGE>()
                                               where inter.IdCtr == matchedConteneurTC.IdCtrExport
                                               select inter).ToList<INTERCHANGE>();

                        listInterchange.FirstOrDefault<INTERCHANGE>(ctr => ctr.IdTypeSinistre == typeSin.IdTypeSinistre).InfoRetourPlein = "Y";
                        dcAcc.INTERCHANGE.Context.SubmitChanges();
                    }

                    dcAcc.SubmitChanges();
                }

                foreach (TYPE_SINISTRE typeSin in listeSinistre)
                {
                    var listInterchange = (from inter in dcAcc.GetTable<INTERCHANGE>()
                                           where inter.IdCtr == idCtr
                                           select inter).ToList<INTERCHANGE>();

                    listInterchange.FirstOrDefault<INTERCHANGE>(ctr => ctr.IdTypeSinistre == typeSin.IdTypeSinistre).InfoEmbarquement = "Y";
                    dcAcc.INTERCHANGE.Context.SubmitChanges();
                }

                dcAcc.SubmitChanges();

                if (matchedConteneur.CONNAISSEMENT.CONTENEUR.Count(ctr => ctr.StatCtr == "Cargo Loaded") + matchedConteneur.CONNAISSEMENT.CONVENTIONNEL.Count(conv => conv.StatGC == "Cargo Loaded") == matchedConteneur.CONNAISSEMENT.CONTENEUR.Count + matchedConteneur.CONNAISSEMENT.CONVENTIONNEL.Count)
                {
                    matchedConteneur.CONNAISSEMENT.StatutBL = "Cargo Loaded";
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }
        }

        public CONNAISSEMENT UpdateClientBooking(int idBooking, int idClient, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedBooking = (from book in dcAcc.GetTable<CONNAISSEMENT>()
                                      where book.IdBL == idBooking
                                      select book).SingleOrDefault<CONNAISSEMENT>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Booking : Changement de client").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour changer de client sur ce booking. Veuillez contacter un administrateur");
                }

                var matchedClient = (from clt in dcAcc.GetTable<CLIENT>()
                                     where clt.IdClient == idClient
                                     select clt).FirstOrDefault<CLIENT>();

                if (matchedClient == null)
                {
                    throw new EnregistrementInexistant("Client introuvable");
                }

                if (matchedBooking == null)
                {
                    throw new EnregistrementInexistant("Booking inexistant");
                }

                if (matchedBooking.ELEMENT_FACTURATION.Count(el => el.IdFD.HasValue || el.StatutEF == "Facturé") > 0)
                {
                    throw new ApplicationException("Impossible de changer de client : une facture a déjà été émise");
                }

                matchedBooking.CLIENT = matchedClient;
                dcAcc.SubmitChanges();

                foreach (PROFORMA prof in matchedBooking.PROFORMA.Where(p => !p.DVFP.HasValue && p.StatutFP == "O"))
                {
                    UpdateProforma(prof.IdFP, prof.IdBL.Value, prof.ClientFacture, GetLignesProf(prof.IdFP,dcAcc), prof.AIFP, idUser);
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedBooking;
            }
        }

        public CONVENTIONNEL EmbarquerConventionnel(int idGC, string descGC, double volume, double poids, int qte, string observations, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConventionnel = (from ctr in dcAcc.GetTable<CONVENTIONNEL>()
                                            where ctr.IdGC == idGC
                                            select ctr).FirstOrDefault<CONVENTIONNEL>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Booking : Gestion des embarquements").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour embarquer un conventionnel. Veuillez contacter un administrateur");
                }

                if (matchedConventionnel == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                if (!matchedConventionnel.ESCALE.DRAEsc.HasValue)
                {
                    throw new ApplicationException("Echec de l'embarquement : Le navire n'est pas encore arrivé");
                }

                if (!matchedConventionnel.CONNAISSEMENT.DVCBLI.HasValue)
                {
                    throw new ApplicationException("Echec de l'embarquement : La clearance n'a pas encore été validée");
                }

                if (matchedConventionnel.StatGC != "Cargo Loading")
                {
                    throw new ApplicationException("Ce conventionnel a déjà été embarqué");
                }

                if (matchedConventionnel.ESCALE.SOP == "C")
                {
                    throw new ApplicationException("Echec de l'embarquement : Le summary of operations a déjà été clôturé");
                }

                matchedConventionnel.DescGCEmbarq = descGC;
                matchedConventionnel.VolCGC = volume;
                matchedConventionnel.PoidsCGC = poids;
                matchedConventionnel.NumItem = (short)qte;
                matchedConventionnel.StatGC = "Cargo Loaded";

                if (matchedConventionnel.NumItem < matchedConventionnel.QteRGC)
                {
                    NOTE noteShortDelivered = new NOTE();
                    noteShortDelivered.IdGC = matchedConventionnel.IdGC;
                    noteShortDelivered.DateNote = DateTime.Now;
                    noteShortDelivered.IdU = idUser;
                    noteShortDelivered.TitreNote = "Short Shipped";
                    noteShortDelivered.DescNote = "Booked : " + matchedConventionnel.QteBGC + "\nDelivered : " + matchedConventionnel.QteRGC + "\nShipped : " + matchedConventionnel.NumItem;

                    dcAcc.NOTE.InsertOnSubmit(noteShortDelivered);
                }

                if (matchedConventionnel.ESCALE.RAEsc == "Y")
                {
                    //Date actuelle du système
                    DateTime dte = DateTime.Now;

                    // Sélection des articles dans les tables de paramétrage
                    List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                    List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                    double derogation = (matchedConventionnel.CONNAISSEMENT.BLIL == "Y" || matchedConventionnel.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                    if (matchedConventionnel.TypeMGC == "200")
                    {
                        //ARTICLE articleDeboursDITManutTerreExport = (from art in articles
                        //                                             from par in parametres
                        //                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Manutention Terre Export"
                        //                                             select art).FirstOrDefault<ARTICLE>();

                        //LIGNE_PRIX lpDeboursDITManutTerreExport200 = articleDeboursDITManutTerreExport.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "200" && lp.DDLP <= dte && lp.DFLP >= dte);

                        //ARTICLE articleDeboursDITTVA = (from art in articles
                        //                                from par in parametres
                        //                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : TVA"
                        //                                select art).FirstOrDefault<ARTICLE>();

                        //LIGNE_PRIX lpTva = articleDeboursDITTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        var matchedOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                            where opArm.IdEsc == matchedConventionnel.IdEsc && opArm.IdTypeOp == 164
                                            select opArm).FirstOrDefault<OPERATION_ARMATEUR>();

                        if (matchedOpArm.QTE != null)
                        {
                            matchedOpArm.QTE = matchedOpArm.QTE + 1;
                            matchedOpArm.Poids = matchedOpArm.Poids + matchedConventionnel.PoidsCGC;
                            matchedOpArm.Volume = matchedOpArm.Volume + matchedConventionnel.VolCGC;
                        }
                        else
                        {
                            matchedOpArm.QTE = 1;
                            matchedOpArm.Poids = matchedConventionnel.PoidsCGC;
                            matchedOpArm.Volume = matchedConventionnel.VolCGC;
                        }


                    }
                    else
                    {
                        /*AH ARTICLE articleManutTerreExport = (from art in articles
                                                           from par in parametres
                                                           where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre"
                                                           select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleManutTerreExport = (from art in articles  where art.CodeArticle == 3002 select art).FirstOrDefault<ARTICLE>();
                        LIGNE_PRIX lpManutTerre = articleManutTerreExport.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConventionnel.TypeCGC && lp.DDLP <= dte && lp.DFLP >= dte);

                        /*AH ARTICLE articleManutTerreSupplementTonnage = (from art in articles
                                                                      from par in parametres
                                                                      where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre - Supplément tonnage"
                                                                      select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleManutTerreSupplementTonnage = (from art in articles  where art.CodeArticle == 3004 select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpManutTerreSupplementTonnage = articleManutTerreSupplementTonnage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "E11" && lp.DDLP <= dte && lp.DFLP >= dte);

                        /* ARTICLE articleManutTerreSupplementVolume = (from art in articles
                                                                      from par in parametres
                                                                      where art.CodeArticle == par.CodeAF && par.NomAF == "Manutention Terre - Supplément volume"
                                                                      select art).FirstOrDefault<ARTICLE>();
                        */
                        ARTICLE articleManutTerreSupplementVolume = (from art in articles  where art.CodeArticle ==3005 select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpManutTerreSupplementVolume = articleManutTerreSupplementVolume.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "E12" && lp.DDLP <= dte && lp.DFLP >= dte);

                        //ARTICLE articleDeboursDITTVA = (from art in articles
                        //                                from par in parametres
                        //                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : TVA"
                        //                                select art).FirstOrDefault<ARTICLE>();

                        //LIGNE_PRIX lpTva = articleDeboursDITTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                        var matchedOpArm = (from opArm in dcAcc.GetTable<OPERATION_ARMATEUR>()
                                            where opArm.IdEsc == matchedConventionnel.IdEsc && opArm.IdTypeOp == 163
                                            select opArm).FirstOrDefault<OPERATION_ARMATEUR>();

                        if (matchedOpArm.QTE != null)
                        {
                            matchedOpArm.QTE = matchedOpArm.QTE + 1;
                            matchedOpArm.Poids = matchedOpArm.Poids + matchedConventionnel.PoidsCGC;
                            matchedOpArm.Volume = matchedOpArm.Volume + matchedConventionnel.VolCGC;
                        }
                        else
                        {
                            matchedOpArm.QTE = 1;
                            matchedOpArm.Poids = matchedConventionnel.PoidsCGC;
                            matchedOpArm.Volume = matchedConventionnel.VolCGC;
                        }

                        // Element de facturation manutention terre
                        ELEMENT_FACTURATION eltFactManutTerre = new ELEMENT_FACTURATION();

                        eltFactManutTerre.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactManutTerre.EltFacture = "GC";
                        eltFactManutTerre.LibEF =articleManutTerreExport.LibArticle+ " - Colis N° " + matchedConventionnel.NumGC; //AH Manutention Terre
                        eltFactManutTerre.DateJEF = DateTime.Now;
                        eltFactManutTerre.IdLP = lpManutTerre.IdLP;
                        eltFactManutTerre.QTEEF = matchedConventionnel.PoidsCGC;
                        eltFactManutTerre.PUEF = Math.Round(Convert.ToDouble(articleManutTerreExport.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == matchedConventionnel.TypeCGC).PU1LP - articleManutTerreExport.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == matchedConventionnel.TypeCGC).PU1LP * derogation), 0, MidpointRounding.AwayFromZero);
                        eltFactManutTerre.UnitEF = articleManutTerreExport.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte && lp.LP == matchedConventionnel.TypeCGC).UniteLP;
                        eltFactManutTerre.IdEsc = matchedConventionnel.IdEsc;
                        eltFactManutTerre.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactManutTerre.IdGC = matchedConventionnel.IdGC;
                        eltFactManutTerre.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactManutTerre.TauxTVA = eltFactManutTerre.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactManutTerre.CCArticle = eltFactManutTerre.CodeTVA == "TVAEX" ? articleManutTerreExport.CCArticleEx : articleManutTerreExport.CCArticle;
                        eltFactManutTerre.DestEF = "C";
                        eltFactManutTerre.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactManutTerre);

                        // Element de facturation supplément tonnage
                        ELEMENT_FACTURATION eltFactSupplementTonage = new ELEMENT_FACTURATION();

                        eltFactSupplementTonage.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSupplementTonage.EltFacture = "GC";
                        eltFactSupplementTonage.LibEF =articleManutTerreSupplementTonnage.LibArticle+ " - Colis N° " + matchedConventionnel.NumGC; //AH Manutention Terre - Supplément tonnage
                        eltFactSupplementTonage.DateJEF = DateTime.Now;
                        eltFactSupplementTonage.IdLP = lpManutTerreSupplementTonnage.IdLP;
                        eltFactSupplementTonage.UnitEF = lpManutTerreSupplementTonnage.UniteLP;
                        eltFactSupplementTonage.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSupplementTonage.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSupplementTonage.IdGC = matchedConventionnel.IdGC;
                        eltFactSupplementTonage.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSupplementTonage.TauxTVA = eltFactSupplementTonage.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSupplementTonage.CCArticle = eltFactSupplementTonage.CodeTVA == "TVAEX" ? articleManutTerreSupplementTonnage.CCArticleEx : articleManutTerreSupplementTonnage.CCArticle;
                        eltFactSupplementTonage.DestEF = "C";
                        eltFactSupplementTonage.StatutEF = "En cours";

                        if (matchedConventionnel.TypeMGC == "E402" || matchedConventionnel.TypeMGC == "E403" || matchedConventionnel.TypeMGC == "E404")
                        {
                            if (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) > 10)
                            {
                                eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU3LP - lpManutTerreSupplementTonnage.PU3LP * derogation), 0, MidpointRounding.AwayFromZero);
                                eltFactSupplementTonage.QTEEF = (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) - 10) * matchedConventionnel.NumItem;
                            }
                            else if (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) > 5)
                            {
                                eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU4LP - lpManutTerreSupplementTonnage.PU4LP * derogation), 0, MidpointRounding.AwayFromZero);
                                eltFactSupplementTonage.QTEEF = (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) - 5) * matchedConventionnel.NumItem;
                            }
                        }
                        else
                        {
                            if (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) > 10)
                            {
                                eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU1LP - lpManutTerreSupplementTonnage.PU1LP * derogation), 0, MidpointRounding.AwayFromZero);
                                eltFactSupplementTonage.QTEEF = (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) - 10) * matchedConventionnel.NumItem;
                            }
                            else if (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) > 5)
                            {
                                eltFactSupplementTonage.PUEF = Math.Round(Convert.ToDouble(lpManutTerreSupplementTonnage.PU2LP - lpManutTerreSupplementTonnage.PU2LP * derogation), 0, MidpointRounding.AwayFromZero);
                                eltFactSupplementTonage.QTEEF = (Math.Round(matchedConventionnel.PoidsCGC.Value / matchedConventionnel.NumItem.Value, 3) - 5) * matchedConventionnel.NumItem;
                            }
                        }

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementTonage);

                        // Element de facturation supplément volume
                        ELEMENT_FACTURATION eltFactSupplementVolume = new ELEMENT_FACTURATION();

                        eltFactSupplementVolume.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSupplementVolume.EltFacture = "GC";
                        eltFactSupplementVolume.LibEF =articleManutTerreSupplementVolume.LibArticle+ " - Colis N° " + matchedConventionnel.NumGC; //Manutention Terre Export - Supplément volume
                        eltFactSupplementVolume.DateJEF = DateTime.Now;
                        eltFactSupplementVolume.IdLP = lpManutTerreSupplementVolume.IdLP;
                        eltFactSupplementVolume.PUEF = Math.Round(matchedConventionnel.VolCGC.Value / matchedConventionnel.NumItem.Value, 3) > 5 ? Math.Round(Convert.ToDouble(lpManutTerreSupplementVolume.PU2LP - lpManutTerreSupplementVolume.PU2LP * derogation), 0, MidpointRounding.AwayFromZero) : 0;
                        eltFactSupplementVolume.QTEEF = Math.Round(matchedConventionnel.VolCGC.Value / matchedConventionnel.NumItem.Value, 3) > 5 ? (Math.Round(matchedConventionnel.VolCGC.Value / matchedConventionnel.NumItem.Value, 3) - 5) * matchedConventionnel.NumItem : 0;
                        eltFactSupplementVolume.UnitEF = lpManutTerreSupplementVolume.UniteLP;
                        eltFactSupplementVolume.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSupplementVolume.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSupplementVolume.IdGC = matchedConventionnel.IdGC;
                        eltFactSupplementVolume.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSupplementVolume.TauxTVA = eltFactSupplementVolume.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSupplementVolume.CCArticle = eltFactSupplementVolume.CodeTVA == "TVAEX" ? articleManutTerreSupplementVolume.CCArticleEx : articleManutTerreSupplementVolume.CCArticle;
                        eltFactSupplementVolume.DestEF = "C";
                        eltFactSupplementVolume.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSupplementVolume);
                    }

                }

                dcAcc.SubmitChanges();

                if (matchedConventionnel.CONNAISSEMENT.CONVENTIONNEL.Count(conv => conv.StatGC == "Cargo Loaded") + matchedConventionnel.CONNAISSEMENT.CONTENEUR.Count(ctr => ctr.StatCtr == "Cargo Loaded") == matchedConventionnel.CONNAISSEMENT.CONVENTIONNEL.Count + matchedConventionnel.CONNAISSEMENT.CONTENEUR.Count)
                {
                    matchedConventionnel.CONNAISSEMENT.StatutBL = "Cargo Loaded";
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConventionnel;
            }
        }

        public CONNAISSEMENT GenererBLExport(int idBL, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                // Vérification de l'existance des enregistrements pour contrainte d'intégrité
                var matchedBooking = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                if (matchedBooking == null)
                {
                    throw new EnregistrementInexistant("Le booking auquel vous faites référence n'existe pas");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Booking : Impression des connaissements").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour générer un BL export. Veuillez contacter un administrateur");
                }

                if (matchedBooking.StatutBL != "Cargo Loaded")
                {
                    throw new ConnaissementException("Générarion impossible : n'est pas en statut cargo loaded");
                }

                if (matchedBooking.DCLBL.HasValue)
                {
                    throw new ConnaissementException("Ce BL export a déjà été généré.\nDate de génération : " + matchedBooking.DCLBL.Value);
                }

                //if (matchedBooking.ESCALE.SOP == "C")
                //{
                //    throw new ApplicationException("Echec de la génération du BL : Le summary of operations a déjà été clôturé");
                //}

                if (matchedBooking.CONTENEUR.Count != 0)
                {
                    if (matchedBooking.CONTENEUR.Count(ctr => ctr.StatCtr == "Cargo Loaded") != matchedBooking.CONTENEUR.Count)
                    {
                        throw new ApplicationException("Génération du BL export impossible : Veuillez embarquer tous les conteneurs de ce booking");
                    }
                }

                if (matchedBooking.CONVENTIONNEL.Count != 0)
                {
                    if (matchedBooking.CONVENTIONNEL.Count(conv => conv.StatGC == "Cargo Loaded") != matchedBooking.CONVENTIONNEL.Count)
                    {
                        throw new ApplicationException("Génération du BL export impossible : Veuillez embarquer tous les general cargo de ce booking");
                    }
                }

                //Date actuelle du système
                DateTime dte = DateTime.Now;

                //matchedBooking.NumBL = matchedBooking.LDBL.Substring(2, 3) + FormatReferenceBooking(matchedBooking.IdBL);
                matchedBooking.DCLBL = DateTime.Now;
                matchedBooking.AIDCLBL = autresInfos;
                matchedBooking.StatutBL = "BL généré";

                // Sélection des articles dans les tables de paramétrage
                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                //selection des lignes de prix concernant le BL
                /*AH ARTICLE articleFraisDossier = (from art in articles
                                               from par in parametres
                                               where art.CodeArticle == par.CodeAF && par.NomAF == "Frais de dossiers BL"
                                               select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleFraisDossier = (from art in articles  where art.CodeArticle == 1601 select art).FirstOrDefault<ARTICLE>();
                LIGNE_PRIX lpFraisDossier = articleFraisDossier.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*ARTICLE articleTimbre = (from art in articles
                                         from par in parametres
                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Timbre de connaissement"
                                         select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleTimbre = (from art in articles where art.CodeArticle == 2101 select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpTimbre = articleTimbre.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                //AH 12sept changement du lib ds bd Debours SEPBC - Sous traitance concession => Debours SEPBC - Prestations de sous traitance
               /*AH ARTICLE articleDeboursSEPBCConcession = (from art in articles
                                                         from par in parametres
                                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Debours SEPBC - Prestations de sous traitance"
                                                         select art).FirstOrDefault<ARTICLE>();
                */
                ARTICLE articleDeboursSEPBCConcession = (from art in articles  where art.CodeArticle == 1101 select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursSEPBCConcession = articleDeboursSEPBCConcession.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH 12sept2016 a ne plus utiliser puisque le debours utilise le code tva tvati 
                ARTICLE articleDeboursSEPBCTVA = (from art in articles
                                                  from par in parametres
                                                  where art.CodeArticle == par.CodeAF && par.NomAF == "Debours SEPBC - TVA"
                                                  select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursSEPBCTVA = articleDeboursSEPBCTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                */

                // Les frais de dossier et timbre de connaissement ne sont calculés que pour les escales dont Socomar est consignataire
                // Pareil pour SEPBC
                if (matchedBooking.ESCALE.RCEsc == "Y")
                {
                    // Element de facturation frais de dossier
                    ELEMENT_FACTURATION eltFactFraisDossier = new ELEMENT_FACTURATION();

                    eltFactFraisDossier.CCCP = matchedBooking.CLIENT.CodeClient;
                    eltFactFraisDossier.EltFacture = "BL";
                    eltFactFraisDossier.LibEF = articleFraisDossier.LibArticle + " BL N° " + matchedBooking.NumBL;//AH "Frais de dossiers BL N° " + matchedBooking.NumBL;
                    eltFactFraisDossier.DateJEF = DateTime.Now;
                    eltFactFraisDossier.IdLP = lpFraisDossier.IdLP;
                    eltFactFraisDossier.PUEF = lpFraisDossier.PU1LP;
                    eltFactFraisDossier.QTEEF = 1;
                    eltFactFraisDossier.UnitEF = "U";
                    eltFactFraisDossier.IdEsc = matchedBooking.IdEsc;
                    eltFactFraisDossier.IdMan = matchedBooking.IdMan;
                    eltFactFraisDossier.IdBL = matchedBooking.IdBL;
                    eltFactFraisDossier.CodeTVA = matchedBooking.BLIL == "Y" ? "TVAEX" : (matchedBooking.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedBooking.CLIENT.CodeTVA);
                    eltFactFraisDossier.TauxTVA = eltFactFraisDossier.CodeTVA == "TVAEX" ? 0 : matchedBooking.CODE_TVA.TauxTVA == 0 ? 0 : matchedBooking.CLIENT.CODE_TVA.TauxTVA;
                    eltFactFraisDossier.CCArticle = eltFactFraisDossier.CodeTVA == "TVAEX" ? articleFraisDossier.CCArticleEx : articleFraisDossier.CCArticle;
                    eltFactFraisDossier.DestEF = "C";
                    eltFactFraisDossier.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactFraisDossier);

                    // Element de facturation timbre de connaissement
                    ELEMENT_FACTURATION eltFactTimbre = new ELEMENT_FACTURATION();

                    eltFactTimbre.CCCP = matchedBooking.CLIENT.CodeClient;
                    eltFactTimbre.EltFacture = "BL";
                    eltFactTimbre.LibEF = articleTimbre.LibArticle + " BL N° " + matchedBooking.NumBL; // AH "Timbre de connaissement BL N° " + matchedBooking.NumBL;
                    eltFactTimbre.DateJEF = DateTime.Now;
                    eltFactTimbre.IdLP = lpTimbre.IdLP;
                    eltFactTimbre.PUEF = lpTimbre.PU1LP;
                    eltFactTimbre.QTEEF = 1;
                    eltFactTimbre.UnitEF = "U";
                    eltFactTimbre.IdEsc = matchedBooking.IdEsc;
                    eltFactTimbre.IdMan = matchedBooking.IdMan;
                    eltFactTimbre.IdBL = matchedBooking.IdBL;
                    eltFactTimbre.CodeTVA = articleTimbre.CodeTVA == "TVAEX" ? "TVAEX" : (matchedBooking.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedBooking.CLIENT.CodeTVA);
                    eltFactTimbre.TauxTVA = eltFactTimbre.CodeTVA == "TVAEX" ? 0 : matchedBooking.CODE_TVA.TauxTVA == 0 ? 0 : matchedBooking.CLIENT.CODE_TVA.TauxTVA;
                    eltFactTimbre.CCArticle = eltFactTimbre.CodeTVA == "TVAEX" ? articleTimbre.CCArticleEx : articleTimbre.CCArticle;
                    eltFactTimbre.DestEF = "C";
                    eltFactTimbre.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactTimbre);
                }

                if (matchedBooking.ESCALE.RAEsc == "Y")
                {
                    // Element de facturation debours SEPBC Concession
                    ELEMENT_FACTURATION eltFactDeboursSEPBCConcession = new ELEMENT_FACTURATION();

                    eltFactDeboursSEPBCConcession.CCArticle = articleDeboursSEPBCConcession.CCArticle;
                    eltFactDeboursSEPBCConcession.CCCP = matchedBooking.CLIENT.CodeClient;
                    eltFactDeboursSEPBCConcession.EltFacture = "BL";
                    eltFactDeboursSEPBCConcession.LibEF =articleDeboursSEPBCConcession.LibArticle+" - BL N°" + matchedBooking.NumBL; //AH "Debours SEPBC - Prestations de sous traitance - BL N°" + matchedBooking.NumBL;
                    eltFactDeboursSEPBCConcession.DateJEF = DateTime.Now;
                    eltFactDeboursSEPBCConcession.IdLP = lpDeboursSEPBCConcession.IdLP;
                    eltFactDeboursSEPBCConcession.PUEF = lpDeboursSEPBCConcession.PU1LP;
                    eltFactDeboursSEPBCConcession.QTEEF = matchedBooking.NoSEPBC == "N" ? matchedBooking.CONTENEUR.Count(ctr => ctr.TypeMses == "Bois débité") : 0;
                    eltFactDeboursSEPBCConcession.UnitEF = "U";
                    eltFactDeboursSEPBCConcession.IdEsc = matchedBooking.IdEsc;
                    eltFactDeboursSEPBCConcession.IdBL = matchedBooking.IdBL;
                    eltFactDeboursSEPBCConcession.CodeTVA = articleDeboursSEPBCConcession.CodeTVA;//"TVAEX";
                    eltFactDeboursSEPBCConcession.TauxTVA = (articleDeboursSEPBCConcession.CodeTVA=="TVAEX") ? 0 : 19.25F;
                    eltFactDeboursSEPBCConcession.DestEF = "C";
                    eltFactDeboursSEPBCConcession.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursSEPBCConcession);

                   /*AH12sept2016 plus besoin de cette ligne puisque c'est passe en taxable avec tvati
                    * 
                    // Element de facturation Debours SEPBC TVA
                    ELEMENT_FACTURATION eltFactDeboursSEPBCTVA = new ELEMENT_FACTURATION();

                    eltFactDeboursSEPBCTVA.CCArticle = articleDeboursSEPBCTVA.CCArticle;
                    eltFactDeboursSEPBCTVA.CCCP = matchedBooking.CLIENT.CodeClient;
                    eltFactDeboursSEPBCTVA.EltFacture = "BL";
                    eltFactDeboursSEPBCTVA.LibEF = "Debours SEPBC - TVA - BL N°" + matchedBooking.NumBL;
                    eltFactDeboursSEPBCTVA.DateJEF = DateTime.Now;
                    eltFactDeboursSEPBCTVA.IdLP = lpDeboursSEPBCTVA.IdLP;
                    //eltFactDeboursSEPBCTVA.PUEF = (matchedBooking.BLIL == "Y" || matchedBooking.CodeTVA == "TVAEX") ? 0 : Math.Round(Convert.ToDouble((eltFactDeboursSEPBCConcession.PUEF.Value) * eltFactDeboursSEPBCConcession.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100)), 0, MidpointRounding.AwayFromZero);
                    eltFactDeboursSEPBCTVA.PUEF = eltFactDeboursSEPBCConcession.QTEEF == 0 ? 0 : Math.Round(Convert.ToDouble((eltFactDeboursSEPBCConcession.PUEF.Value) * eltFactDeboursSEPBCConcession.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100)), 0, MidpointRounding.AwayFromZero);
                    eltFactDeboursSEPBCTVA.QTEEF = (matchedBooking.BLIL == "Y" || matchedBooking.NoSEPBC == "Y" || matchedBooking.CodeTVA == "TVAEX") ? 0 : 1;
                    eltFactDeboursSEPBCTVA.UnitEF = "U";
                    eltFactDeboursSEPBCTVA.IdEsc = matchedBooking.IdEsc;
                    eltFactDeboursSEPBCTVA.IdBL = matchedBooking.IdBL;
                    eltFactDeboursSEPBCTVA.CodeTVA = "TVAEX";
                    eltFactDeboursSEPBCTVA.TauxTVA = 0;
                    eltFactDeboursSEPBCTVA.DestEF = "C";
                    eltFactDeboursSEPBCTVA.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursSEPBCTVA);
                    * 
                    */ 
                }
                
                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedBooking;
            }
        }

        #endregion

        #region Proforma

        //
        public PROFORMA InsertProforma(int idBL, string clientAFacturer, List<ElementFacturation> eltFact, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Proforma : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour créer une proforma. Veuillez contacter un administrateur");
                }

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Le connaissement auquel vous faites référence n'existe pas");
                }

                if (eltFact.Count(e => e.Qte > 0) != 0 && eltFact.Count(e => e.Qte < 0) != 0)
                {
                    throw new ApplicationException("Enregistrement de la proforma impossible : veuillez à ne selectionner que les éléments de factures de même signe");
                }

                // Insertion de la proforma
                PROFORMA proforma = new PROFORMA();

                proforma.DCFP = DateTime.Now;
                proforma.IdArm = matchedConnaissement.ESCALE.IdArm;
                proforma.AIFP = autresInfos;
                proforma.StatutFP = "O";
                proforma.IdBL = matchedConnaissement.IdBL;
                proforma.IdU = idUser;
                proforma.IdClient = matchedConnaissement.IdClient;
                proforma.ClientFacture = clientAFacturer;
                proforma.MHT = Convert.ToInt32(eltFact.Sum(elt => Math.Abs(elt.MontantHT)));
                proforma.MTVA = Convert.ToInt32(eltFact.Sum(elt => Math.Abs(elt.MontantTVA)));
                proforma.MTTC = proforma.MHT + proforma.MTVA;

                List<Int32> idJEFs = new List<int>();
                foreach (ElementFacturation e in eltFact)
                {
                    idJEFs.Add(e.IdElt);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                proforma.AIFP = "";

                foreach (ARTICLE art in listArts)
                {
                    if (proforma.AIFP != "")
                    {
                        proforma.AIFP = proforma.AIFP + " - " + art.LibArticle;
                    }
                    else
                    {
                        proforma.AIFP = art.LibArticle;
                    }
                }

                dcAcc.GetTable<PROFORMA>().InsertOnSubmit(proforma);

                dcAcc.SubmitChanges();

                //// Vérification qu'il n'existe pas de véhicule de ce connaissement en cubage
                //var matchedVehiculesEnCubage = (from veh in dcAcc.GetTable<VEHICULE>()
                //                                from cub in dcAcc.GetTable<CUBAGE_VEHICULE>()
                //                                from el in eltFact
                //                                where veh.IdBL == idBL && cub.IdVeh == veh.IdVeh && !cub.DateCV.HasValue// && veh.ELEMENT_FACTURATION.Count(id => id.IdVeh == veh.IdVeh) == 0
                //                                select veh).ToList<VEHICULE>();

                //if (matchedVehiculesEnCubage.Count != 0)
                //{
                //    throw new CubageException("Edition de la proforma impossible. Il exite des véhicules de ce connaissement appartenant à un projet de cubage en cours");
                //}

                if (eltFact.Count > 1 && eltFact.Count(elt => elt.CodeArticle == 1204 || elt.CodeArticle == 1202) != 0)
                {
                    throw new FacturationException("Edition de proforma impossible. Les proformas de fret/dette SOCAR ne doivent contenir que l'element de fret/dette SOCAR");
                }

                StringBuilder msgVehEnProforma = new StringBuilder();

                foreach (ElementFacturation elt in eltFact)
                {
                    LIGNE_PROFORMA ligne = new LIGNE_PROFORMA();
                    ligne.IdJEF = elt.IdElt;
                    ligne.IdFP = proforma.IdFP;
                    ligne.StatutLP = "O";

                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    ligne.PUEF = matchedElt.PUEF;
                    ligne.QTEEF = matchedElt.QTEEF;
                    ligne.TauxTVA = matchedElt.TauxTVA;

                    //if (matchedVehiculesEnCubage.Count(veh => veh.IdVeh == matchedElt.IdVeh && matchedElt.LibEF.Contains("Manutention")) != 0)
                    //{
                        
                    //}

                    if (matchedElt.VEHICULE != null && matchedElt.VEHICULE.CUBAGE_VEHICULE.Count(cb => !cb.DateVal.HasValue) != 0 && (matchedElt.LibEF.Contains("Manutention") || matchedElt.LibEF.Contains("Séjour Parc Auto")))
                    {
                        msgVehEnProforma.Append(matchedElt.VEHICULE.NumChassis + " " + matchedElt.VEHICULE.DescVeh).Append(Environment.NewLine);
                    }

                    //if (matchedElt.VEHICULE != null && matchedElt.VEHICULE.CUBAGE_VEHICULE.Count(cb => !cb.DateVal.HasValue) != 0 && (matchedElt.LibEF.Contains("Manutention") || matchedElt.LibEF.Contains("Séjour Parc Auto")))
                    //{
                    //    throw new CubageException("Edition de la proforma impossible. Le véhicule " + matchedElt.VEHICULE.NumChassis + " " + matchedElt.VEHICULE.DescVeh + " est en cubage");
                    //}

                    if(matchedElt.StatutEF == "Facturé")
                    {
                        throw new ApplicationException("Cet élément de facture a déjà été facturé : " + matchedElt.LibEF + ".\nEchec de création de la proforma");
                    }

                    matchedElt.StatutEF = "Proforma";
                    dcAcc.GetTable<LIGNE_PROFORMA>().InsertOnSubmit(ligne);
                }

                if (msgVehEnProforma.ToString().Trim() != "")
                {
                    throw new ApplicationException("Les véhicules suivants : \n" + msgVehEnProforma.ToString() + " Sont en cubage. Veuillez au préalable valider les cubages des véhicules concernés");
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return proforma;
            }
        }

        public PROFORMA UpdateProforma(int idFP, int idBL, string clientAFacturer, List<ElementFacturation> eltFact, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedProforma = (from pf in dcAcc.GetTable<PROFORMA>()
                                       where pf.IdFP == idFP
                                       select pf).SingleOrDefault<PROFORMA>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Proforma : Modification des informations sur un élément existant").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour une proforma. Veuillez contacter un administrateur");
                }

                if (matchedProforma == null)
                {
                    throw new EnregistrementInexistant("Proforma Inexistante");
                }

                if (matchedProforma.StatutFP == "A")
                {
                    throw new FacturationException("Echec de la mise à jour. Cette proforma a été annulée");
                }

                if (matchedProforma.DVFP.HasValue)
                {
                    throw new FacturationException("Echec de la mise à jour : Cette profoma a déjà été validée en date du " + matchedProforma.DVFP.Value);
                }

                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Connaissement Inexistant");
                }

                //var matchedVehiculesEnCubage = (from veh in dcAcc.GetTable<VEHICULE>()
                //                                from cub in dcAcc.GetTable<CUBAGE_VEHICULE>()
                //                                where veh.IdBL == idBL && cub.IdVeh == veh.IdVeh && cub.VolCVeh.Value == 0
                //                                select veh).ToList<VEHICULE>();

                //if (matchedVehiculesEnCubage.Count != 0)
                //{
                //    throw new CubageException("Edition de la proforma impossible. Il exite des véhicules de ce connaissement appartenant à un projet de cubage en cours");
                //}

                if (eltFact.Count > 1 && eltFact.Count(elt => elt.CodeArticle == 1204 || elt.CodeArticle == 1202) != 0)
                {
                    throw new FacturationException("Edition de proforma impossible. Les proformas de fret/dette SOCAR ne doivent contenir que l'element de fret/dette SOCAR");
                }

                matchedProforma.AIFP = autresInfos;
                matchedProforma.CONNAISSEMENT = matchedConnaissement;
                matchedProforma.IdClient = matchedConnaissement.IdClient;
                matchedProforma.ClientFacture = clientAFacturer;
                matchedProforma.MHT = Convert.ToInt32(eltFact.Sum(elt => Math.Abs(elt.MontantHT)));
                matchedProforma.MTVA = Convert.ToInt32(eltFact.Sum(elt => Math.Abs(elt.MontantTVA)));
                matchedProforma.MTTC = matchedProforma.MHT + matchedProforma.MTVA;

                List<Int32> idJEFs = new List<int>();
                foreach (ElementFacturation e in eltFact)
                {
                    idJEFs.Add(e.IdElt);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                matchedProforma.AIFP = "";

                foreach (ARTICLE art in listArts)
                {
                    if (matchedProforma.AIFP != "")
                    {
                        matchedProforma.AIFP = matchedProforma.AIFP + " - " + art.LibArticle;
                    }
                    else
                    {
                        matchedProforma.AIFP = art.LibArticle;
                    }
                }

                dcAcc.SubmitChanges();

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                               where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                                               select elt).ToList<ELEMENT_FACTURATION>();

                foreach (ELEMENT_FACTURATION elt in matchedElementsFactures)
                {
                    elt.StatutEF = "En cours";
                }

                dcAcc.GetTable<LIGNE_PROFORMA>().DeleteAllOnSubmit(matchedProforma.LIGNE_PROFORMA);

                StringBuilder msgVehEnProforma = new StringBuilder();

                foreach (ElementFacturation elt in eltFact)
                {
                    LIGNE_PROFORMA ligne = new LIGNE_PROFORMA();
                    ligne.IdFP = matchedProforma.IdFP;
                    ligne.IdJEF = elt.IdElt;
                    ligne.StatutLP = "O";

                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    ligne.PUEF = matchedElt.PUEF;
                    ligne.QTEEF = matchedElt.QTEEF;
                    ligne.TauxTVA = matchedElt.TauxTVA;

                    //if (matchedElt.VEHICULE != null && matchedElt.VEHICULE.CUBAGE_VEHICULE.Count(cb => !cb.DateVal.HasValue) != 0 && (matchedElt.LibEF.Contains("Manutention") || matchedElt.LibEF.Contains("Séjour Parc Auto")))
                    //{
                    //    throw new CubageException("Edition de la proforma impossible. Le véhicule " + matchedElt.VEHICULE.NumChassis + " " + matchedElt.VEHICULE.DescVeh + " est en cubage");
                    //}

                    if (matchedElt.VEHICULE != null && matchedElt.VEHICULE.CUBAGE_VEHICULE.Count(cb => !cb.DateVal.HasValue) != 0 && (matchedElt.LibEF.Contains("Manutention") || matchedElt.LibEF.Contains("Séjour Parc Auto")))
                    {
                        msgVehEnProforma.Append(matchedElt.VEHICULE.NumChassis + " " + matchedElt.VEHICULE.DescVeh).Append(Environment.NewLine);
                    }

                    matchedElt.StatutEF = "Proforma";

                    dcAcc.GetTable<LIGNE_PROFORMA>().InsertOnSubmit(ligne);
                }

                if (msgVehEnProforma.ToString().Trim() != "")
                {
                    throw new ApplicationException("Les véhicules suivants : \n" + msgVehEnProforma.ToString() + " Sont en cubage. Veuillez au préalable valider les cubages des véhicules concernés");
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedProforma;
            }
        }

        public PROFORMA AnnulerProforma(int idFP, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedProforma = (from prof in dcAcc.GetTable<PROFORMA>()
                                      where prof.IdFP == idFP
                                       select prof).SingleOrDefault<PROFORMA>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Proforma : Annulation d'un élément existant").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour annuler une proforma. Veuillez contacter un administrateur");
                }

                if (matchedProforma == null)
                {
                    throw new EnregistrementInexistant("Proforma Inexistante");
                }

                if (matchedProforma.StatutFP != "A")
                {
                    matchedProforma.StatutFP = "A";
                }
                else
                {
                    throw new ApplicationException("Cette proforma a déjà été annulée");
                }

                if (autresInfos.Trim() != "")
                {
                    NOTE noteAnnulation = new NOTE();
                    noteAnnulation.IdFP = matchedProforma.IdFP;
                    noteAnnulation.DateNote = DateTime.Now;
                    noteAnnulation.IdU = idUser;
                    noteAnnulation.TitreNote = "Note d'annulation";
                    noteAnnulation.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteAnnulation);
                }
                

                foreach (LIGNE_PROFORMA lg in matchedProforma.LIGNE_PROFORMA)
                {
                    if (lg.ELEMENT_FACTURATION.IdFD.HasValue && lg.PROFORMA.DVFP.HasValue)
                    {
                        throw new ApplicationException("Annulation de la proforma impossible car celle-ci a déjà été validée");
                    }
                    //if (lg.ELEMENT_FACTURATION.LIGNE_PROFORMA.Count(lp => lp.PROFORMA.StatutFP == "A" && (lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1201 || lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1202 || lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1204)) == 1)
                    //{
                    //    lg.ELEMENT_FACTURATION.StatutEF = "En cours";
                    //}
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedProforma;
            }
        }

        public PROFORMA ValiderProforma(int idFP, string autresInfos, int idUser)
        {
            //var matchedProf = (from pf in dcAcc.GetTable<PROFORMA>()
            //                   where pf.IdFP == idFP
            //                   select pf).SingleOrDefault<PROFORMA>();

            //SAPDataClassesDataContext dcSAP = new SAPDataClassesDataContext();
            //OINV invoiceSAP = dcSAP.OINV.SingleOrDefault<OINV>(inv => inv.NumAtCard == matchedProf.CONNAISSEMENT.ESCALE.NumEsc + "-" + matchedProf.CONNAISSEMENT.NumBL + "-" + matchedProf.IdFP);

            //if (invoiceSAP != null)
            //{
            //    throw new ApplicationException("Echec d'envoi des données à l'ERP : Doublon sur facture " + invoiceSAP.DocEntry);
            //}

            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedProforma = (from pf in dcAcc.GetTable<PROFORMA>()
                                       where pf.IdFP == idFP
                                       select pf).SingleOrDefault<PROFORMA>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Proforma : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour valider une proforma. Veuillez contacter un administrateur");
                }

                if (matchedProforma == null)
                {
                    throw new EnregistrementInexistant("Proforma Inexistante");
                }

                if (matchedProforma.StatutFP == "A")
                {
                    throw new FacturationException("Echec de validation de la proforma : Cette proforma fait l'objet d'une annulation");
                }

                if (matchedProforma.DVFP.HasValue)
                {
                    throw new FacturationException("Cette proforma a déjà été validée en date du " + matchedProforma.DVFP.Value);
                }

                matchedProforma.DVFP = DateTime.Now;
                matchedProforma.IdUV = idUser;
                matchedProforma.AIVFP = autresInfos;
                matchedProforma.StatutFP = "V";

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdFP = matchedProforma.IdFP;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

                dcAcc.SubmitChanges();

                FACTURE fact = new FACTURE();

                fact.DCFD = DateTime.Now;
                fact.DEFD = DateTime.Now;
                fact.IdFP = idFP;
                fact.IdU = idUser;
                fact.IdClient = matchedProforma.IdClient;
                //fact.DateComptable = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                //                      from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                //                      where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                //                      select elt).Count(el => el.LibEF.Contains("Manutention")) != 0 ? matchedProforma.CONNAISSEMENT.ESCALE.DRAEsc : DateTime.Now;
                fact.DateComptable = DateTime.Now;
                fact.AIFD = matchedProforma.AIFP;
                fact.MHT = matchedProforma.MHT;
                fact.MTVA = matchedProforma.MTVA;
                fact.MTTC = matchedProforma.MTTC;
                //fact.Solde = matchedProforma.MTTC;
                fact.StatutFD = "O";

                dcAcc.GetTable<FACTURE>().InsertOnSubmit(fact);
                dcAcc.SubmitChanges();

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                               where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                                               select elt).ToList<ELEMENT_FACTURATION>();

                foreach (ELEMENT_FACTURATION elt in matchedElementsFactures)
                {
                     
                    //if ((elt.LibEF.Contains("Manutention") || elt.LibEF.Contains("Séjour Parc Auto")) && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue)
                    if((elt.CodeArticle=="1401" || elt.CodeArticle=="1410" || elt.CodeArticle=="1411" || elt.CodeArticle=="1412" || elt.CodeArticle=="1701"
                        || elt.CodeArticle == "1702" || elt.CodeArticle == "1704" || elt.CodeArticle == "1705" || elt.CodeArticle == "1801")
                        && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue)
                    {
                        throw new FacturationException("Cette proforma contient l'élement de manutention/séjour : " + elt.LibEF + " alors que le navire n'est pas encore arrivé. Par conséquent, vous ne pouvez pas valider cette proforma.");
                    }

                    if (elt.StatutEF == "Annule")
                    {
                        throw new FacturationException("L'élement de facturation " + elt.LibEF + " a été annulé");
                    }

                    if (elt.IdFD.HasValue)
                    {
                        throw new FacturationException("L'élement de facturation " + elt.LibEF + " a déjà été facturé");
                    }
                    elt.IdFD = fact.IdFD;
                    elt.StatutEF = "Facturé";
                }
                dcAcc.SubmitChanges();

                //affectation du idfd a iddocsap
                fact.IdDocSAP = fact.IdFD;

                //Intégration à SAP

                #region AH arret integration SAP
                /*
                List<Int32> idJEFs = new List<int>();
                foreach (ELEMENT_FACTURATION e in matchedElementsFactures)
                {
                    idJEFs.Add(e.IdJEF);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                //si c'est code TVADA le prix unitaire devient le prix TTC avec le code tva tvaex
                List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                            from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                            where eltFact.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                                            select new LigneEcriture
                                            {
                                                CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                AccountCode = eltFact.CCArticle,
                                                CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                PrixUnitaire = eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value,
                                                Qte = Math.Abs(eltFact.QTEEF.Value)
                                            }).ToList<LigneEcriture>();

                string date = fact.DateComptable.Value.Year.ToString() + "-" + FormatChiffre(fact.DateComptable.Value.Month) + "-" + FormatChiffre(fact.DateComptable.Value.Day);
                string taxDate = fact.DCFD.Value.Year.ToString() + "-" + FormatChiffre(fact.DCFD.Value.Month) + "-" + FormatChiffre(fact.DCFD.Value.Day);

                //appel de la methode erp
                string idDocSAP = (new VsomSAP()).ValideProforma(elts, date, taxDate, fact.CLIENT.CodeClient, fact.PROFORMA.CONNAISSEMENT.ESCALE.NumEsc.ToString(),
                    fact.PROFORMA.CONNAISSEMENT.NumBL, fact.PROFORMA.IdFP, fact.PROFORMA.CONNAISSEMENT.ConsigneeBL.Replace("&", "et"));

                int result;
                fact.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

                if (fact.IdDocSAP == -1)
                {
                    throw new ApplicationException("Echec du transfert des données à l'ERP");
                }
                */
                #endregion

                //SAPDataClassesDataContext dcSAP = new SAPDataClassesDataContext();
                //OINV invoiceSAP = dcSAP.OINV.SingleOrDefault<OINV>(inv => inv.DocEntry == fact.IdDocSAP);

                //fact.MHT = Convert.ToInt32(Math.Round(invoiceSAP.GrosProfit.Value));
                //fact.MTVA = Convert.ToInt32(Math.Round(invoiceSAP.VatSum.Value));
                //fact.MTTC = Convert.ToInt32(Math.Round(invoiceSAP.DocTotal.Value));

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedProforma;
            }
        }

        /// <summary>
        /// facture tous les element en cour sur un BL
        /// </summary>
        /// <param name="idbl"></param>
        /// <returns></returns>
        public FACTURE FacturerQuotation(int idbl, string autresInfos, int idUser, string clientAFacturer)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idbl
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Le connaissement auquel vous faites référence n'existe pas");
                }

                //creer la proforma
                //recuperation des element en instance
                List<ElementFacturation> eltFact = GetElementFacturationBLFree(idbl,dcAcc);

                // Insertion de la proforma
                #region creation proforma
                PROFORMA proforma = new PROFORMA();

                proforma.DCFP = DateTime.Now;
                proforma.IdArm = matchedConnaissement.ESCALE.IdArm;
                proforma.AIFP = autresInfos;
                proforma.StatutFP = "O";
                proforma.IdBL = matchedConnaissement.IdBL;
                proforma.IdU = idUser;
                proforma.IdClient = matchedConnaissement.IdClient;
                proforma.ClientFacture = clientAFacturer;
                proforma.MHT = Convert.ToInt32(eltFact.Sum(elt => Math.Abs(elt.MontantHT)));
                proforma.MTVA = Convert.ToInt32(eltFact.Sum(elt => Math.Abs(elt.MontantTVA)));
                proforma.MTTC = proforma.MHT + proforma.MTVA;

                List<Int32> idJEFs = new List<int>();
                foreach (ElementFacturation e in eltFact)
                {
                    idJEFs.Add(e.IdElt);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                proforma.AIFP = "";

                foreach (ARTICLE art in listArts)
                {
                    if (proforma.AIFP != "")
                    {
                        proforma.AIFP = proforma.AIFP + " - " + art.LibArticle;
                    }
                    else
                    {
                        proforma.AIFP = art.LibArticle;
                    }
                }

                dcAcc.GetTable<PROFORMA>().InsertOnSubmit(proforma);

                dcAcc.SubmitChanges();

                //// Vérification qu'il n'existe pas de véhicule de ce connaissement en cubage
                //var matchedVehiculesEnCubage = (from veh in dcAcc.GetTable<VEHICULE>()
                //                                from cub in dcAcc.GetTable<CUBAGE_VEHICULE>()
                //                                from el in eltFact
                //                                where veh.IdBL == idBL && cub.IdVeh == veh.IdVeh && !cub.DateCV.HasValue// && veh.ELEMENT_FACTURATION.Count(id => id.IdVeh == veh.IdVeh) == 0
                //                                select veh).ToList<VEHICULE>();

                //if (matchedVehiculesEnCubage.Count != 0)
                //{
                //    throw new CubageException("Edition de la proforma impossible. Il exite des véhicules de ce connaissement appartenant à un projet de cubage en cours");
                //}

                if (eltFact.Count > 1 && eltFact.Count(elt => elt.CodeArticle == 1204 || elt.CodeArticle == 1202) != 0)
                {
                    throw new FacturationException("Edition de proforma impossible. Les proformas de fret/dette SOCAR ne doivent contenir que l'element de fret/dette SOCAR");
                }

                StringBuilder msgVehEnProforma = new StringBuilder();

                foreach (ElementFacturation elt in eltFact)
                {
                    LIGNE_PROFORMA ligne = new LIGNE_PROFORMA();
                    ligne.IdJEF = elt.IdElt;
                    ligne.IdFP = proforma.IdFP;
                    ligne.StatutLP = "O";

                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    ligne.PUEF = matchedElt.PUEF;
                    ligne.QTEEF = matchedElt.QTEEF;
                    ligne.TauxTVA = matchedElt.TauxTVA;

                    //if (matchedVehiculesEnCubage.Count(veh => veh.IdVeh == matchedElt.IdVeh && matchedElt.LibEF.Contains("Manutention")) != 0)
                    //{

                    //}

                    if (matchedElt.VEHICULE != null && matchedElt.VEHICULE.CUBAGE_VEHICULE.Count(cb => !cb.DateVal.HasValue) != 0 && (matchedElt.LibEF.Contains("Manutention") || matchedElt.LibEF.Contains("Séjour Parc Auto")))
                    {
                        msgVehEnProforma.Append(matchedElt.VEHICULE.NumChassis + " " + matchedElt.VEHICULE.DescVeh).Append(Environment.NewLine);
                    }

                    //if (matchedElt.VEHICULE != null && matchedElt.VEHICULE.CUBAGE_VEHICULE.Count(cb => !cb.DateVal.HasValue) != 0 && (matchedElt.LibEF.Contains("Manutention") || matchedElt.LibEF.Contains("Séjour Parc Auto")))
                    //{
                    //    throw new CubageException("Edition de la proforma impossible. Le véhicule " + matchedElt.VEHICULE.NumChassis + " " + matchedElt.VEHICULE.DescVeh + " est en cubage");
                    //}

                    if (matchedElt.StatutEF == "Facturé")
                    {
                        throw new ApplicationException("Cet élément de facture a déjà été facturé : " + matchedElt.LibEF + ".\nEchec de création de la proforma");
                    }

                    matchedElt.StatutEF = "Proforma";
                    dcAcc.GetTable<LIGNE_PROFORMA>().InsertOnSubmit(ligne);
                }

                if (msgVehEnProforma.ToString().Trim() != "")
                {
                    throw new ApplicationException("Les véhicules suivants : \n" + msgVehEnProforma.ToString() + " Sont en cubage. Veuillez au préalable valider les cubages des véhicules concernés");
                }

                dcAcc.SubmitChanges();
                #endregion

                #region creation facture

                proforma.DVFP = DateTime.Now;
                proforma.IdUV = idUser;
                proforma.AIVFP = autresInfos;
                proforma.StatutFP = "V";

                //if (autresInfos.Trim() != "")
                //{
                //    NOTE noteValid = new NOTE();
                //    noteValid.IdFP = proforma.IdFP;
                //    noteValid.DateNote = DateTime.Now;
                //    noteValid.IdU = idUser;
                //    noteValid.TitreNote = "Note de validation";
                //    noteValid.DescNote = autresInfos;

                //    dcAcc.NOTE.InsertOnSubmit(noteValid);
                //}

                dcAcc.SubmitChanges();

                FACTURE fact = new FACTURE();

                fact.DCFD = DateTime.Now;
                fact.DEFD = DateTime.Now;
                fact.IdFP = proforma.IdFP;
                fact.IdU = idUser;
                fact.IdClient = proforma.IdClient;
                //fact.DateComptable = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                //                      from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                //                      where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                //                      select elt).Count(el => el.LibEF.Contains("Manutention")) != 0 ? matchedProforma.CONNAISSEMENT.ESCALE.DRAEsc : DateTime.Now;
                fact.DateComptable = DateTime.Now;
                fact.AIFD = proforma.AIFP;
                fact.MHT = proforma.MHT;
                fact.MTVA = proforma.MTVA;
                fact.MTTC = proforma.MTTC;
                //fact.Solde = matchedProforma.MTTC;
                fact.StatutFD = "O";

                dcAcc.GetTable<FACTURE>().InsertOnSubmit(fact);
                dcAcc.SubmitChanges();

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                               where elt.IdJEF == lp.IdJEF && lp.IdFP == proforma.IdFP
                                               select elt).ToList<ELEMENT_FACTURATION>();

                foreach (ELEMENT_FACTURATION elt in matchedElementsFactures)
                {

                    //if ((elt.LibEF.Contains("Manutention") || elt.LibEF.Contains("Séjour Parc Auto")) && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue)
                    if ((elt.CodeArticle == "1401" || elt.CodeArticle == "1410" || elt.CodeArticle == "1411" || elt.CodeArticle == "1412" || elt.CodeArticle == "1701"
                        || elt.CodeArticle == "1702" || elt.CodeArticle == "1704" || elt.CodeArticle == "1705" || elt.CodeArticle == "1801")
                        && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue)
                    {
                        throw new FacturationException("Cette proforma contient l'élement de manutention/séjour : " + elt.LibEF + " alors que le navire n'est pas encore arrivé. Par conséquent, vous ne pouvez pas valider cette proforma.");
                    }

                    if (elt.StatutEF == "Annule")
                    {
                        throw new FacturationException("L'élement de facturation " + elt.LibEF + " a été annulé");
                    }

                    if (elt.IdFD.HasValue)
                    {
                        throw new FacturationException("L'élement de facturation " + elt.LibEF + " a déjà été facturé");
                    }
                    elt.IdFD = fact.IdFD;
                    elt.StatutEF = "Facturé";
                }
                dcAcc.SubmitChanges();

                //affectation du idfd a iddocsap
                fact.IdDocSAP = fact.IdFD;

                dcAcc.SubmitChanges();

                #endregion
                transaction.Complete();
                return fact;
            }
        }

        #endregion

        #region Facture
        public FACTURE InsertFactureSpot(CLIENT clien, List<ElementLigneFactureSpot> listelement,DateTime createDate, DateTime duedate, string observation, UTILISATEUR user)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                //creer la facture
                FACTURE fact = new FACTURE();
                fact.DCFD = DateTime.Now;
                fact.DEFD = duedate; //DateTime.Now;
               // fact.IdFP = idFP;
                fact.IdU = user.IdU;
                fact.DateComptable = createDate; //DateTime.Now;
                fact.IdClient = clien.IdClient;
                fact.AIFD = observation;
                double ht = Math.Abs(listelement.Sum(r=> r.PrixUnitaire*r.Qte));
                fact.MHT = Convert.ToInt32(ht);
                double tv=Math.Abs(Math.Round(Convert.ToDouble(listelement.Sum(r => r.TVA)),0, MidpointRounding.AwayFromZero));
                fact.MTVA = Convert.ToInt32(tv);
                fact.MTTC = fact.MHT+fact.MTVA;
                fact.StatutFD = "O";

                dcAcc.GetTable<FACTURE>().InsertOnSubmit(fact);
                dcAcc.SubmitChanges();

                //creer les element de facturation sur les ligne de facturation avec le statut facture
                List<ARTICLE> listArts = new List<ARTICLE>(); List<LigneEcriture> elts = new List<LigneEcriture>();
                foreach (ElementLigneFactureSpot lg in listelement)
                {
                    ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                    eltFact.CCArticle = (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.Articl.CCArticle : lg.Articl.CCArticleEx;
                    eltFact.CodeTVA = lg.CodeTVA;
                    eltFact.TauxTVA = /*lg.Articl.CODE_TVA.TauxTVA;*/ (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI" || lg.CodeTVA=="TVADA") ? 19.25f : 0;
                    eltFact.CCCP =clien.CodeClient;
                    eltFact.EltFacture = "Cli";
                    eltFact.LibEF = lg.Libelle ;
                    eltFact.DateJEF = DateTime.Now;
                    eltFact.IdLP = lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                    eltFact.QTEEF = lg.Qte;
                    eltFact.UnitEF = lg.Unite;
                    eltFact.PUEF = lg.PrixUnitaire;
                    if (lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 
                        || lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || 
                        lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 ||
                        lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 ||
                        lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                    {
                        eltFact.PUEFBase = eltFact.PUEF;
                    }
                  //  eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                  // eltFact.IdBL = lg.ORDRE_SERVICE.CONNAISSEMENT.IdBL;
                  //eltFact.IdOS = lg.IdOS;
                    eltFact.IdFD = fact.IdFD;
                    eltFact.DestEF = "C";
                    eltFact.StatutEF = "facturé";
                    eltFact.CodeArticle = lg.Code;

                    dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    listArts.Add(lg.Articl);


                    //si code tvada on retourne tvaex et le prix unitaire devient le prix ttc
                    /*AH plus utilise. arrete integration SAP
                     * elts.Add(new LigneEcriture{
                                                CodeArticle = lg.Articl.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle.Value,
                                                AccountCode = eltFact.CCArticle,
                                               // CodeTVA = eltFact.CodeTVA,
                                               // PrixUnitaire = eltFact.PUEF.Value,
                                                CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                PrixUnitaire = eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value,
                                                
                                                Qte = Math.Abs(eltFact.QTEEF.Value)
                                            });
                     */ 
                }
                
                // on garde le idfacture comme idsap
                fact.IdDocSAP = fact.IdFD;

                #region HA Arret integration a sap
                /*
                //integration a sap
                  
                string date = fact.DateComptable.Value.Year.ToString() + "-" + FormatChiffre(fact.DateComptable.Value.Month) + "-" + FormatChiffre(fact.DateComptable.Value.Day);
                string taxDate = fact.DCFD.Value.Year.ToString() + "-" + FormatChiffre(fact.DCFD.Value.Month) + "-" + FormatChiffre(fact.DCFD.Value.Day);
                
                //apppel de la methode erp
                string idDocSAP = (new VsomSAP()).FactureSpot(elts, date, taxDate, fact.CLIENT.CodeClient, fact.AIFD);

                int result;
                fact.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

                if (fact.IdDocSAP == -1)
                {
                    throw new ApplicationException("Echec du transfert des données à l'ERP : \n" + idDocSAP);
                }
                 */
                #endregion

                dcAcc.SubmitChanges();

                #region AH Integration données pour remote systeme
                //
                //insertion facture et details facture
                RMT_FACTURES rfact = new RMT_FACTURES();
                rfact.DCFD = (DateTime)fact.DCFD;
                rfact.IdCli = (int)fact.IdClient;
                rfact.IdPay = 0;
                rfact.MHT = (int)fact.MHT;
                rfact.MTTC = (int)fact.MTTC;
                rfact.MTVA = (int)fact.MTVA;
                rfact.StatutFD = fact.StatutFD;
                rfact.SysId = (int)fact.IdDocSAP;
                dcAcc.RMT_FACTURES.InsertOnSubmit(rfact);
                //details
                List<ELEMENT_FACTURATION> eltmfact = (from m in dcAcc.GetTable<ELEMENT_FACTURATION>() where m.IdFD == fact.IdFD select m).ToList();
                foreach (ELEMENT_FACTURATION item in eltmfact)
                {
                    RMT_ELEMENT_FACTURE rmef = new RMT_ELEMENT_FACTURE();
                    rmef.CodeArt = item.CodeArticle;
                    rmef.CodeTva = item.CodeTVA;
                    rmef.Elt = item.EltFacture;
                    rmef.IdFD = (int)item.IdFD;
                    rmef.Lib = item.LibEF;
                    rmef.PU = (int)item.PUEF;
                    rmef.Qte = (double)item.QTEEF;
                    rmef.Statut = item.StatutEF;
                    rmef.SysId = item.IdJEF;
                    rmef.TauxTva = item.TauxTVA.ToString();
                    rmef.Unite = item.UnitEF;
                    dcAcc.RMT_ELEMENT_FACTURE.InsertOnSubmit(rmef);
                } 
                #endregion

                dcAcc.SubmitChanges();
                transaction.Complete();
                 
                return fact;
            }
        }

        public FACTURE InsertFacture(int idFP, string autresInfos, int idUser)
        {
            //var matchedProf = (from pf in dcAcc.GetTable<PROFORMA>()
            //                   where pf.IdFP == idFP
            //                   select pf).SingleOrDefault<PROFORMA>();

            //SAPDataClassesDataContext dcSAP = new SAPDataClassesDataContext();
            //OINV invoiceSAP = dcSAP.OINV.SingleOrDefault<OINV>(inv => inv.NumAtCard == matchedProf.CONNAISSEMENT.ESCALE.NumEsc + "-" + matchedProf.CONNAISSEMENT.NumBL + "-" + matchedProf.IdFP);

            //if (invoiceSAP != null)
            //{
            //    throw new ApplicationException("Echec d'envoi des données à l'ERP : Doublon sur facture " + invoiceSAP.DocEntry);
            //}

            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedProforma = (from pf in dcAcc.GetTable<PROFORMA>()
                                       where pf.IdFP == idFP
                                       select pf).SingleOrDefault<PROFORMA>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Proforma : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour créer une facture définitive. Veuillez contacter un administrateur");
                }

                if (matchedProforma == null)
                {
                    throw new EnregistrementInexistant("Proforma Inexistante");
                }

                matchedProforma.DVFP = DateTime.Now;
                matchedProforma.IdUV = idUser;
                matchedProforma.AIVFP = autresInfos;
                matchedProforma.StatutFP = "V";

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdFP = matchedProforma.IdFP;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

                dcAcc.SubmitChanges();

                FACTURE fact = new FACTURE();

                fact.DCFD = DateTime.Now;
                fact.DEFD = DateTime.Now;
                fact.IdFP = idFP;
                fact.IdU = idUser;
                //fact.DateComptable = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                //                      from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                //                      where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                //                      select elt).Count(el => el.LibEF.Contains("Manutention")) != 0 ? matchedProforma.CONNAISSEMENT.ESCALE.DRAEsc : DateTime.Now;
                fact.DateComptable = DateTime.Now;
                fact.IdClient = matchedProforma.IdClient;
                fact.AIFD = matchedProforma.AIFP;
                fact.MHT = matchedProforma.MHT;
                fact.MTVA = matchedProforma.MTVA;
                fact.MTTC = matchedProforma.MTTC;
                //fact.Solde = matchedProforma.MTTC;
                fact.StatutFD = "O";

                dcAcc.GetTable<FACTURE>().InsertOnSubmit(fact);
                dcAcc.SubmitChanges();

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdFD = fact.IdFD;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                               where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                                               select elt).ToList<ELEMENT_FACTURATION>();

                foreach (ELEMENT_FACTURATION elt in matchedElementsFactures)
                {

                    //if ((elt.LibEF.Contains("Manutention") || elt.LibEF.Contains("Séjour Parc Auto")) && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue)
                    if((elt.CodeArticle=="1401" || elt.CodeArticle=="1410" || elt.CodeArticle=="1411" || elt.CodeArticle=="1412" || elt.CodeArticle=="1701"
                        || elt.CodeArticle == "1702" || elt.CodeArticle == "1704" || elt.CodeArticle == "1705" || elt.CodeArticle == "1801")
                        && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue) 
                    {
                        throw new FacturationException("Cette proforma contient l'élement de manutention/séjour : " + elt.LibEF + " alors que le navire n'est pas encore arrivé. Par conséquent, vous ne pouvez pas valider cette proforma.");
                    }

                    if (elt.IdFD.HasValue)
                    {
                        throw new ApplicationException("L'élement de facturation " + elt.LibEF + " a déjà été facturé");
                    }
                    elt.IdFD = fact.IdFD;
                    elt.StatutEF = "Facturé";
                }

                //affectation de code SAP : numero facture devient code sap
                fact.IdDocSAP = fact.IdFD;

                dcAcc.SubmitChanges();

                #region  HA arrete integration SAP

                /*. 
                //Intégration à SAP

                List<Int32> idJEFs = new List<int>();
                foreach (ELEMENT_FACTURATION e in matchedElementsFactures)
                {
                    idJEFs.Add(e.IdJEF);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                            from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                            where eltFact.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                                            select new LigneEcriture
                                            {
                                                CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                AccountCode = eltFact.CCArticle,
                                                //CodeTVA = eltFact.CodeTVA,
                                                //PrixUnitaire = eltFact.PUEF.Value,
                                                CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                PrixUnitaire = eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value,
                                                
                                                Qte = Math.Abs(eltFact.QTEEF.Value)
                                            }).ToList<LigneEcriture>();

                string date = fact.DateComptable.Value.Year.ToString() + "-" + FormatChiffre(fact.DateComptable.Value.Month) + "-" + FormatChiffre(fact.DateComptable.Value.Day);
                string taxDate = fact.DCFD.Value.Year.ToString() + "-" + FormatChiffre(fact.DCFD.Value.Month) + "-" + FormatChiffre(fact.DCFD.Value.Day);
                
                //appel de la methode erp
                string idDocSAP = (new VsomSAP()).Facture(elts, date, taxDate, fact.CLIENT.CodeClient, fact.PROFORMA.CONNAISSEMENT.ESCALE.NumEsc.ToString(),
                    fact.PROFORMA.CONNAISSEMENT.NumBL.Replace("&", "et"), fact.PROFORMA.IdFP, fact.PROFORMA.CONNAISSEMENT.ConsigneeBL.Replace("&", "et"));
                int result;
                fact.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

                if (fact.IdDocSAP == -1)
                {
                    throw new ApplicationException("Echec du transfert des données à l'ERP : \n" + idDocSAP);
                }

                */
                #endregion

                //SAPDataClassesDataContext dcSAP = new SAPDataClassesDataContext();
                //OINV invoiceSAP = dcSAP.OINV.SingleOrDefault<OINV>(inv => inv.DocEntry == fact.IdDocSAP);

                //fact.MHT = Convert.ToInt32(Math.Round(invoiceSAP.GrosProfit.Value));
                //fact.MTVA = Convert.ToInt32(Math.Round(invoiceSAP.VatSum.Value));
                //fact.MTTC = Convert.ToInt32(Math.Round(invoiceSAP.DocTotal.Value));

                #region AH Integration données pour remote systeme
                //
                //insertion facture et details facture
                RMT_FACTURES rfact = new RMT_FACTURES();
                rfact.DCFD = (DateTime)fact.DCFD;
                rfact.IdCli = (int)fact.IdClient;
                rfact.IdPay = 0;
                rfact.MHT = (int)fact.MHT;
                rfact.MTTC = (int)fact.MTTC;
                rfact.MTVA = (int)fact.MTVA;
                rfact.StatutFD = fact.StatutFD;
                rfact.SysId = (int)fact.IdDocSAP;
                rfact.IdBl = fact.PROFORMA.IdBL;
                dcAcc.RMT_FACTURES.InsertOnSubmit(rfact);
                //details
                List<ELEMENT_FACTURATION> eltmfact = (from m in dcAcc.GetTable<ELEMENT_FACTURATION>() where m.IdFD == fact.IdFD select m).ToList();
                foreach (ELEMENT_FACTURATION item in eltmfact)
                {
                    RMT_ELEMENT_FACTURE rmef = new RMT_ELEMENT_FACTURE();
                    rmef.CodeArt = item.CodeArticle;
                    rmef.CodeTva = item.CodeTVA;
                    rmef.Elt = item.EltFacture;
                    rmef.IdFD = (int)item.IdFD;
                    rmef.Lib = item.LibEF;
                    rmef.PU = (int)item.PUEF;
                    rmef.Qte = (double)item.QTEEF;
                    rmef.Statut = item.StatutEF;
                    rmef.SysId = item.IdJEF;
                    rmef.TauxTva = item.TauxTVA.ToString();
                    rmef.Unite = item.UnitEF;
                    rmef.IdBl = item.IdBL;
                    dcAcc.RMT_ELEMENT_FACTURE.InsertOnSubmit(rmef);
                }
                #endregion

                dcAcc.SubmitChanges();
                transaction.Complete();
                return fact;
            }
        }

        #endregion

        #region Facture DIT

        public FACTURE_DIT InsertFactureDIT(int idBL, string numFactDIT, DateTime dateFact, List<ElementFacturation> eltFact, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Mise à jour des prix DIT").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour créer une facture DIT. Veuillez contacter un administrateur");
                }

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Le connaissement auquel vous faites référence n'existe pas");
                }

                // Insertion de la facture
                FACTURE_DIT facture = new FACTURE_DIT();

                facture.DateTrans = DateTime.Now;
                facture.DateFact = dateFact;
                facture.NumFactDIT = numFactDIT;
                facture.IdBL = matchedConnaissement.IdBL;
                facture.MntFact = Convert.ToInt32(eltFact.Sum(elt => elt.MontantTTC));

                dcAcc.GetTable<FACTURE_DIT>().InsertOnSubmit(facture);

                dcAcc.SubmitChanges();

                foreach (ElementFacturation elt in eltFact)
                {

                    var matchedElt = (from e in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where e.IdJEF == elt.IdElt
                                      select e).SingleOrDefault<ELEMENT_FACTURATION>();

                    if (matchedElt.IdFactDIT.HasValue)
                    {
                        throw new CubageException("Impossible de créer cette facture DIT car l'élément " + matchedElt.LibEF + " fait partie d'une autre facture");
                    }

                    matchedElt.IdFactDIT = facture.IdFactDIT;
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return facture;
            }
        }

        #endregion

        #region payement

        /// <summary>
        /// Ecran appurement facture : Plus 
        /// </summary>
        /// <param name="client"></param>
        /// <param name="modePaiement"></param>
        /// <param name="comptComptablPay"></param>
        /// <param name="comptCaisse"></param>
        /// <param name="banque"></param>
        /// <param name="agence"></param>
        /// <param name="numCompte"></param>
        /// <param name="numCheque"></param>
        /// <param name="refVirt"></param>
        /// <param name="ccBanque"></param>
        /// <param name="montantAPayer"></param>
        /// <param name="montantRecu"></param>
        /// <param name="autresInfos"></param>
        /// <param name="idBanque"></param>
        /// <param name="idUser"></param>
        /// <param name="_Facture"></param>
        /// <returns></returns>
        public PAYEMENT InsertPaiementClient(CLIENT client, short modePaiement, string comptComptablPay, string comptCaisse, string banque,
                        string agence, string numCompte, string numCheque, string refVirt, string ccBanque, int montantAPayer, int montantRecu,
                        string autresInfos, int idBanque, int idUser, List<FacturePaiementClient> _Facture)
        {
            int idFactSAP = 0;
            PAYEMENT payement = null;
            List<PAYEMENT> _lpayement = new List<PAYEMENT>();

            using (var transaction = new System.Transactions.TransactionScope())
            {
                //List<FacturePaiementClient> _spot = (from m in _Facture where m.Facture.PROFORMA == null select m).ToList<FacturePaiementClient>();
                //List<FacturePaiementClient> _classic = (from m in _Facture where m.Facture.PROFORMA != null select m).ToList<FacturePaiementClient>();

                string cashAccount = null;

                #region compte par mode de paiement

                if (modePaiement == 1)
                {
                    cashAccount = comptCaisse;
                }
                else if (modePaiement == 2)
                {
                    cashAccount = "5131100";
                }
                else if (modePaiement == 3)
                {
                    cashAccount = "5211100";
                }
                else if (modePaiement == 4)//traitre
                {
                    cashAccount = "5111100";
                }

                #endregion

                if (_Facture.Count != 0)//facture spot
                {
                    //enregistrement paiement
                    #region paiement
                    payement = new PAYEMENT();

                    payement.ObjetPay = 1;//facture
                    payement.DatePay = DateTime.Now;
                    payement.ModePay = modePaiement;
                    payement.CCPay = comptComptablPay;
                    payement.MAPay = montantAPayer;
                    payement.MRPay = montantRecu;
                    payement.AIPay = autresInfos;
                    //payement.CONNAISSEMENT = matchedConnaissement;
                    payement.IdU = idUser;
                    payement.IdClient = client.IdClient;
                    payement.Caisse = comptCaisse;
                    payement.RefVirement = refVirt;
                    payement.NumCheque = numCheque;
                    payement.NumCompte = numCompte;
                    payement.Banque = banque;
                    payement.Agence = agence;
                    //payement.RetIS = retIS;
                    payement.StatutPay = "O";
                    if (idBanque != 0)
                    {
                        payement.IdBanque = idBanque;
                    }

                    dcAcc.GetTable<PAYEMENT>().InsertOnSubmit(payement);

                    dcAcc.SubmitChanges();

                    #endregion

                    #region copie remote sys
                    RMT_PAYEMENT rmtpay = new RMT_PAYEMENT();
                    rmtpay.AIPay = autresInfos;
                    rmtpay.Banque = payement.Banque;
                    rmtpay.DatePay = payement.DatePay;
                    rmtpay.IdBL = payement.IdBL;
                    rmtpay.IdClient = payement.IdClient;
                    rmtpay.MAPay = payement.MAPay;
                    rmtpay.ModePay = payement.ModePay;
                    rmtpay.MRPay = payement.MRPay;
                    rmtpay.NumCheque = payement.NumCheque;
                    rmtpay.NumCompte = payement.NumCompte;
                    rmtpay.RefVirement = payement.RefVirement;
                    rmtpay.StatutPay = "O";
                    rmtpay.SysId = payement.IdPaySAP;
                    dcAcc.RMT_PAYEMENT.InsertOnSubmit(rmtpay);
                    #endregion

                    //enregsitrement comande paiement

                    string date = payement.DatePay.Value.Year.ToString() + "-" + FormatChiffre(payement.DatePay.Value.Month) + "-" + FormatChiffre(payement.DatePay.Value.Day);
      

                    #region maj facture , creation ligne paiement, et liste facture paiement
                    foreach (FacturePaiementClient fact in _Facture)
                    {
                        //a cause de la logique de paiement d'avoir ajoute ce jour 25janv16
                        if (fact.Facture != null)
                        {
                            FACTURE f = (from fct in dcAcc.GetTable<FACTURE>()
                                         where fct.IdFD == fact.Facture.IdFD
                                         select fct).SingleOrDefault<FACTURE>();

                            if (idFactSAP == 0)
                            {
                                idFactSAP = f.IdDocSAP.Value;
                            }

                            f.IdPay = payement.IdPay;
                            f.StatutFD = "P";

                            LIGNE_PAYEMENT lignePay = new LIGNE_PAYEMENT();
                            lignePay.IdFD = fact.Facture.IdFD;
                            lignePay.IdPay = payement.IdPay;
                            lignePay.Type = "Facture";
                            dcAcc.LIGNE_PAYEMENT.InsertOnSubmit(lignePay);
                        }
                        else
                        {
                            AVOIR av = (from m in dcAcc.GetTable<AVOIR>() where m.IdFA == fact.Avoir.IdFA select m).SingleOrDefault<AVOIR>();
                            av.IdPay = payement.IdPay;
                            LIGNE_PAYEMENT lignePay = new LIGNE_PAYEMENT();
                            lignePay.IdFD = av.IdFA;
                            lignePay.IdPay = payement.IdPay;
                            lignePay.Type = "Avoir";
                            dcAcc.LIGNE_PAYEMENT.InsertOnSubmit(lignePay);
                        }

                       /*AH compte associe a la nouvelle caissier 
                        * if (f.PROFORMA.LIGNE_PROFORMA.Count(lp => lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1204 ||
                            lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1202) != 0)
                        {
                            cashAccount = "5711104";
                        }*/

                        
                    }

                    dcAcc.SubmitChanges(); 
                    #endregion

                    #region envoie commande paiement sap
                    
                    /*if (modePaiement == 1)
                    {
                        string idPaySAP = sapWS.AddPayment(sessionID, payement.CLIENT.CodeClient, date, cashAccount, payement.MRPay.Value, date, date, listFacturesPayement.ToArray());
                        if (!idPaySAP.Contains("La facture est déjà clôturée ou bloquée"))
                        {
                            throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n " + idPaySAP);
                        }
                    }
                    else if (modePaiement == 2)
                    {
                        string idPaySAP = sapWS.AddPaymentCheck(sessionID, payement.CLIENT.CodeClient, date, banque, agence, numCompte, payement.MAPay.ToString(), numCheque, listFacturesPayement.ToArray());
                        if (!idPaySAP.Contains("La facture est déjà clôturée ou bloquée"))
                        {
                            throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n " + idPaySAP);
                        }
                    }
                    else if (modePaiement == 4)//traite
                    {
                        string idPaySAP = sapWS.AddPaymentCheck(sessionID, payement.CLIENT.CodeClient, date, banque, agence, numCompte, payement.MAPay.ToString(), numCheque, listFacturesPayement.ToArray());
                        if (!idPaySAP.Contains("La facture est déjà clôturée ou bloquée"))
                        {
                            throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n " + idPaySAP);
                        }
                    }
                    else if (modePaiement == 3)
                    {
                        string idPaySAP = sapWS.AddPaymentAccount(sessionID, payement.CLIENT.CodeClient, date, "5141100", refVirt, date, payement.MAPay.ToString(), listFacturesPayement.ToArray());
                        if (!idPaySAP.Contains("La facture est déjà clôturée ou bloquée"))
                        {
                            throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n " + idPaySAP);
                        }
                    } 
                    */
                    #endregion


                    //affectation de id comme idsap
                    payement.IdPaySAP = payement.IdPay;

                    dcAcc.SubmitChanges();

                    //sapWS.LogOut(sessionID);

                }
                 
                transaction.Complete();
                 
            }
            return payement; 
        }
        
        public PAYEMENT InsertPaiement(int idBL, short objetPay, short modePay, string ccPay, string compteCaisse, string retIS, string banque, string agence, string numCompte, string numCheque, string refVirt, string ccBanque, int montantAPayer, int montantRecu, List<PROFORMA> listProformas, List<FACTURE> listFactures, List<CONTENEUR> listConteneurs, List<PAYEMENT> listPayements, string autresInfos, int idBanque, int idUser)
        {
            int idFactSAP = 0;
            PAYEMENT payement = null;
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConnaissement = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                            where bl.IdBL == idBL
                                            select bl).SingleOrDefault<CONNAISSEMENT>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Paiement : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer un paiement. Veuillez contacter un administrateur");
                }

                if (matchedConnaissement == null)
                {
                    throw new EnregistrementInexistant("Connaissement Inexistant");
                }

                if (matchedConnaissement.SensBL == "I")
                {
                    if (!dcAcc.OPERATION_CONNAISSEMENT.SingleOrDefault<OPERATION_CONNAISSEMENT>(op => op.IdTypeOp == 36 && op.IdBL == matchedConnaissement.IdBL).DateOp.HasValue && matchedConnaissement.ESCALE.IdAcc == 1 && matchedConnaissement.SensBL == "I")
                    {
                        throw new ConnaissementException("Paiement impossible : le connaissement n'a pas encore été accompli");
                    }
                }

                payement = new PAYEMENT();

                payement.ObjetPay = objetPay;
                payement.DatePay = DateTime.Now;
                payement.ModePay = modePay;
                payement.CCPay = ccPay;
                payement.MAPay = montantAPayer;
                payement.MRPay = montantRecu;
                payement.AIPay = autresInfos;
                payement.CONNAISSEMENT = matchedConnaissement;
                payement.IdU = idUser;
                payement.IdClient = matchedConnaissement.IdClient;
                payement.Caisse = compteCaisse;
                payement.RefVirement = refVirt;
                payement.NumCheque = numCheque;
                payement.NumCompte = numCompte;
                payement.Banque = banque;
                payement.Agence = agence;
                payement.RetIS = retIS;
                payement.StatutPay = "O";
                if (idBanque != 0)
                {
                    payement.IdBanque = idBanque;
                }

                dcAcc.GetTable<PAYEMENT>().InsertOnSubmit(payement);

                dcAcc.SubmitChanges();

                #region copie remote sys
                RMT_PAYEMENT rmtpay = new RMT_PAYEMENT();
                rmtpay.AIPay = autresInfos;
                rmtpay.Banque = payement.Banque;
                rmtpay.DatePay = payement.DatePay;
                rmtpay.IdBL = payement.IdBL;
                rmtpay.IdClient = payement.IdClient;
                rmtpay.MAPay = payement.MAPay;
                rmtpay.ModePay = payement.ModePay;
                rmtpay.MRPay = payement.MRPay;
                rmtpay.NumCheque = payement.NumCheque;
                rmtpay.NumCompte = payement.NumCompte;
                rmtpay.RefVirement = payement.RefVirement;
                rmtpay.StatutPay = "O";
                rmtpay.SysId = payement.IdPay;
                dcAcc.RMT_PAYEMENT.InsertOnSubmit(rmtpay);
                #endregion

                string idPaySAP=string.Empty;
                if (objetPay == 0)
                {
                    //Intégration à SAP
                    string date = payement.DatePay.Value.Year.ToString() + "-" + FormatChiffre(payement.DatePay.Value.Month) + "-" + FormatChiffre(payement.DatePay.Value.Day);
                    string cashAccount = null;
                    if (modePay == 1)//espece
                    {
                        cashAccount = compteCaisse;
                    }
                    else if (modePay == 2)//cheque
                    {
                        cashAccount = "5131100";
                    }
                    else if (modePay == 3)//virement
                    {
                        cashAccount = "5211100";
                    }
                    else if (modePay == 4)//traitre
                    {
                        cashAccount = "5111100";
                    }
                   
                    Dictionary<string, int> lsfact = new Dictionary<string, int>();

                    foreach (PROFORMA prof in listProformas)
                    {
                        FACTURE fact = InsertFacture(prof.IdFP, autresInfos, idUser);

                        #region  facke
                        //var matchedProforma = (from pf in dcAcc.GetTable<PROFORMA>()
                        //                       where pf.IdFP == prof.IdFP
                        //                       select pf).SingleOrDefault<PROFORMA>();

                        //if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Proforma : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                        //{
                        //    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour créer une facture définitive. Veuillez contacter un administrateur");
                        //}

                        //if (matchedProforma == null)
                        //{
                        //    throw new EnregistrementInexistant("Proforma Inexistante");
                        //}

                        //matchedProforma.DVFP = DateTime.Now;
                        //matchedProforma.IdUV = idUser;
                        //matchedProforma.AIVFP = autresInfos;
                        //matchedProforma.StatutFP = "V";

                        //if (autresInfos.Trim() != "")
                        //{
                        //    NOTE noteValid = new NOTE();
                        //    noteValid.IdFP = matchedProforma.IdFP;
                        //    noteValid.DateNote = DateTime.Now;
                        //    noteValid.IdU = idUser;
                        //    noteValid.TitreNote = "Note de validation";
                        //    noteValid.DescNote = autresInfos;

                        //    dcAcc.NOTE.InsertOnSubmit(noteValid);
                        //}

                        //dcAcc.SubmitChanges();

                        //FACTURE fact = new FACTURE();

                        //fact.DCFD = DateTime.Now;
                        //fact.DEFD = DateTime.Now;
                        //fact.IdFP = prof.IdFP;
                        //fact.IdU = idUser;
                        //fact.DateComptable = DateTime.Now;
                        //fact.IdClient = matchedProforma.IdClient;
                        //fact.AIFD = matchedProforma.AIFP;
                        //fact.StatutFD = "O";
                        //fact.IdPay = payement.IdPay;

                        //dcAcc.GetTable<FACTURE>().InsertOnSubmit(fact);
                        //dcAcc.SubmitChanges();

                        //if (autresInfos.Trim() != "")
                        //{
                        //    NOTE noteValid = new NOTE();
                        //    noteValid.IdFD = fact.IdFD;
                        //    noteValid.DateNote = DateTime.Now;
                        //    noteValid.IdU = idUser;
                        //    noteValid.TitreNote = "Note de validation";
                        //    noteValid.DescNote = autresInfos;

                        //    dcAcc.NOTE.InsertOnSubmit(noteValid);
                        //}

                        //var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                        //                               from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                        //                               where elt.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                        //                               select elt).ToList<ELEMENT_FACTURATION>();

                        //foreach (ELEMENT_FACTURATION elt in matchedElementsFactures)
                        //{

                        //    if (elt.LibEF.Contains("Manutention") && !elt.CONNAISSEMENT.ESCALE.DRAEsc.HasValue)
                        //    {
                        //        throw new FacturationException("Cette proforma contient l'élement de manutention : " + elt.LibEF + " alors que le navire n'est pas encore arrivé. Par conséquent, vous ne pouvez pas valider cette proforma.");
                        //    }

                        //    if (elt.IdFD.HasValue)
                        //    {
                        //        throw new ApplicationException("L'élement de facturation " + elt.LibEF + " a déjà été facturé");
                        //    }
                        //    elt.IdFD = fact.IdFD;
                        //    elt.StatutEF = "Facturé";
                        //}

                        //dcAcc.SubmitChanges();

                        ////Intégration à SAP

                        //List<Int32> idJEFs = new List<int>();
                        //foreach (ELEMENT_FACTURATION e in matchedElementsFactures)
                        //{
                        //    idJEFs.Add(e.IdJEF);
                        //}

                        //List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                        //                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                        //                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                        //                          orderby art.LibArticle ascending
                        //                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                        //List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                        //                            from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                        //                            where eltFact.IdJEF == lp.IdJEF && lp.IdFP == matchedProforma.IdFP
                        //                            select new LigneEcriture
                        //                            {
                        //                                CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                        //                                AccountCode = eltFact.CCArticle,
                        //                                CodeTVA = eltFact.CodeTVA,
                        //                                PrixUnitaire = eltFact.PUEF.Value,
                        //                                Qte = eltFact.QTEEF.Value
                        //                            }).ToList<LigneEcriture>();

                        //string dateFact = fact.DateComptable.Value.Year.ToString() + "-" + FormatChiffre(fact.DateComptable.Value.Month) + "-" + FormatChiffre(fact.DateComptable.Value.Day);
                        //string taxDate = fact.DCFD.Value.Year.ToString() + "-" + FormatChiffre(fact.DCFD.Value.Month) + "-" + FormatChiffre(fact.DCFD.Value.Day);
                        //List<SocSAPWS.LigneFacture> lignes = new List<SocSAPWS.LigneFacture>();
                        //foreach (LigneEcriture ligne in elts)
                        //{
                        //    SocSAPWS.LigneFacture lg = new SocSAPWS.LigneFacture();
                        //    lg.ItemCode = ligne.CodeArticle.ToString();
                        //    lg.AccountCode = ligne.AccountCode;
                        //    lg.Quantity = ligne.Qte.ToString().Replace(",", ".");
                        //    lg.UnitPrice = ligne.PrixUnitaire;
                        //    lg.VATGroup = ligne.CodeTVA;
                        //    lignes.Add(lg);
                        //}
                        //string idDocSAP = sapWS.AddInvoice(sessionID, fact.CLIENT.CodeClient, date, taxDate, dateFact, fact.PROFORMA.CONNAISSEMENT.ESCALE.NumEsc + "-" + fact.PROFORMA.CONNAISSEMENT.NumBL, /*fact.AIFD*/ fact.PROFORMA.CONNAISSEMENT.ConsigneeBL, lignes.ToArray());

                        //int result;
                        //fact.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

                        //if (fact.IdDocSAP == -1)
                        //{
                        //    throw new ApplicationException("Echec du transfert des données à l'ERP");
                        //}

                        //SAPDataClassesDataContext dcSAP = new SAPDataClassesDataContext();
                        //OINV invoiceSAP = dcSAP.OINV.SingleOrDefault<OINV>(inv => inv.DocEntry == fact.IdDocSAP);

                        //fact.MHT = Convert.ToInt32(Math.Round(invoiceSAP.GrosProfit.Value));
                        //fact.MTVA = Convert.ToInt32(Math.Round(invoiceSAP.VatSum.Value));
                        //fact.MTTC = Convert.ToInt32(Math.Round(invoiceSAP.DocTotal.Value));

                        //dcAcc.SubmitChanges();

                        #endregion
                        
                        if (idFactSAP == 0)
                        {
                            idFactSAP = fact.IdDocSAP.Value;
                        }

                        fact.IdPay = payement.IdPay;
                        fact.StatutFD = "P";

                        LIGNE_PAYEMENT lignePay = new LIGNE_PAYEMENT();
                        lignePay.IdFD = fact.IdFD;
                        lignePay.IdPay = payement.IdPay;

                        dcAcc.LIGNE_PAYEMENT.InsertOnSubmit(lignePay);

                        if (fact.PROFORMA.LIGNE_PROFORMA.Count(lp => lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1204 || lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1202) != 0)
                        {
                            cashAccount = "5711104";
                        }

                        /*SocSAPWS.PayementFacture p = new SocSAPWS.PayementFacture();
                        p.DocEntry = fact.IdDocSAP.ToString();
                        p.PaidSum = fact.MTTC.Value;

                        listFacturesPayement.Add(p);
                        */

                        lsfact.Add(fact.IdDocSAP.ToString(), fact.MTTC.Value);
                    }

                    dcAcc.SubmitChanges();

                    #region HA arret integration SAP
                    /*
                    idPaySAP = (new VsomSAP()).PaiementProforma(lsfact,modePay, payement.CLIENT.CodeClient, date, cashAccount, payement.MRPay.Value,
                        banque, agence, numCompte, numCheque, payement.MAPay.ToString(), refVirt);

                    dcAcc.SubmitChanges();
                     */
                    #endregion
                }
                else if (objetPay == 1) //facture
                {
                    //Intégration à SAP
                    string date = payement.DatePay.Value.Year.ToString() + "-" + FormatChiffre(payement.DatePay.Value.Month) + "-" + FormatChiffre(payement.DatePay.Value.Day);
                    
                    string cashAccount = null;
                    if (modePay == 1)
                    {
                        cashAccount = compteCaisse;
                    }
                    else if (payement.ModePay == 2)
                    {
                        cashAccount = "5131100";
                    }
                    else if (payement.ModePay == 3)
                    {
                        cashAccount = "5211100";
                    }
                    else if (modePay == 4)//traitre
                    {
                        cashAccount = "5111100";
                    }
                    /*List<SocSAPWS.PayementFacture> listFacturesPayement = new List<SocSAPWS.PayementFacture>();*/

                    //int idFactSAP = 0;

                    //int montantRestant = payement.MRPay.Value;
                   
                    Dictionary<string, int> lsfact = new Dictionary<string, int>();

                    foreach (FACTURE fact in listFactures)
                    {
                        FACTURE f = (from fct in dcAcc.GetTable<FACTURE>()
                                     where fct.IdFD == fact.IdFD
                                     select fct).SingleOrDefault<FACTURE>();

                        if (idFactSAP == 0)
                        {
                            idFactSAP = f.IdDocSAP.Value;
                        }

                        f.IdPay = payement.IdPay;
                        f.StatutFD = "P";
                         

                        LIGNE_PAYEMENT lignePay = new LIGNE_PAYEMENT();
                        lignePay.IdFD = fact.IdFD;
                        lignePay.IdPay = payement.IdPay;

                        dcAcc.LIGNE_PAYEMENT.InsertOnSubmit(lignePay);

                        if (f.PROFORMA.LIGNE_PROFORMA.Count(lp => lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1204 || lp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle == 1202) != 0)
                        {
                            cashAccount = "5711104";
                        }

                       /* SocSAPWS.PayementFacture p = new SocSAPWS.PayementFacture();
                        p.DocEntry = fact.IdDocSAP.ToString();
                        p.PaidSum = fact.MTTC.Value;
                        //p.PaidSum = montantUtilise; 
                        listFacturesPayement.Add(p);*/

                        lsfact.Add(fact.IdDocSAP.ToString(), fact.MTTC.Value);
                    }                    

                    dcAcc.SubmitChanges();

                    #region arret intergation sap
                    /*
                   //appel methode erp
                    //string idPaySAP;
                    idPaySAP = (new VsomSAP()).PaiementFacture(lsfact, modePay, payement.CLIENT.CodeClient, date, cashAccount, payement.MRPay.Value,
                        banque, agence, numCompte, numCheque, payement.MAPay.ToString(), refVirt);
                    */
                    #endregion

                }
                else if (objetPay == 2) //encaissement caution
                {
                    //throw new ApplicationException("Cette action n'est plus autorisée. Veuillez l'executer sur GATLAS");
                     
                    TRANSACTIONS trans;
                    foreach (CONTENEUR ctr in listConteneurs)
                    {
                        CONTENEUR c = (from ct in dcAcc.GetTable<CONTENEUR>()
                                       where ct.IdCtr == ctr.IdCtr
                                       select ct).SingleOrDefault<CONTENEUR>();

                        c.IdPay = payement.IdPay;

                        //Intégration à SAP

                        string date = payement.DatePay.Value.Year.ToString() + "-" + FormatChiffre(payement.DatePay.Value.Month) + "-" + FormatChiffre(payement.DatePay.Value.Day);
                        string cashAccount = null;
                        if (modePay == 1)
                        {
                            cashAccount = compteCaisse;
                        }
                        else if (modePay == 2)
                        {
                            cashAccount = "5131100";
                        }
                        else if (modePay == 3)
                        {
                            cashAccount = "5211100";
                        }
                        else if (modePay == 4)//traite
                        {
                            cashAccount = "5111100";
                        }


                        #region AH Arret integration SAP

                        /*string idJE = (new VsomSAP()).EncaissementCaution(c.CONNAISSEMENT.CLIENT.CCClient, c.CONNAISSEMENT.CLIENT.CodeClient, c.MCCtr.Value, date, cashAccount,
                            c.NumCtr, c.ESCALE.NumEsc.ToString());
                        int result;
                        int idje = Int32.TryParse(idJE, out result) ? result : -1;

                        if (idje == -1)
                        {
                            throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n"+idJE);
                        }
                         */
                        
                        #endregion

                        #region AH integration ecriture comptable sage
                         //trans = new TRANSACTIONS();
                        
                        #endregion
                        dcAcc.SubmitChanges();

                    }
                      
                }
                else if (objetPay == 3) //rembourssement caution
                {
                   //throw new ApplicationException("Cette action n'est plus autorisée. Veuillez l'executer sur GATLAS");

                    #region masque desactivation SAP
                    foreach (PAYEMENT pay in listPayements)
                    {
                        PAYEMENT p = (from py in dcAcc.GetTable<PAYEMENT>()
                                      where py.IdPay == pay.IdPay
                                      select py).SingleOrDefault<PAYEMENT>();

                        p.IdPayDRC = payement.IdPay;

                        //Intégration à SAP

                        string date = payement.DatePay.Value.Year.ToString() + "-" + FormatChiffre(payement.DatePay.Value.Month) + "-" + FormatChiffre(payement.DatePay.Value.Day);
                        
                        string cashAccount = null;
                        if (modePay == 1)
                        {
                            cashAccount = compteCaisse;
                        }
                        else if (modePay == 2)
                        {
                            cashAccount = "5131100";
                        }
                        else if (modePay == 3)
                        {
                            cashAccount = "5211100";
                        }
                        else if (modePay == 4)//traitre
                        {
                            cashAccount = "5111100";
                        }

                        #region Arret intégration avec SAP
                        /*
                        string idJE = (new VsomSAP()).PaiementCaution(p.CONNAISSEMENT.CLIENT.CCClient, p.CONNAISSEMENT.CLIENT.CodeClient,
                                            p.MAPay.Value, date, cashAccount, p.CONTENEUR.FirstOrDefault<CONTENEUR>(pa => pa.IdPay == p.IdPay).NumCtr,
                                            p.CONNAISSEMENT.ESCALE.NumEsc.ToString());

                        int result;
                        int idje = Int32.TryParse(idJE, out result) ? result : -1;

                        if (idje == -1)
                        {
                            throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n " + idJE);
                        }
                        */
                        #endregion
                        dcAcc.SubmitChanges();

                    }
                    
                    #endregion
                }

                //affectation de id comme idsap
                payement.IdPaySAP = payement.IdPay;

                dcAcc.SubmitChanges();
                transaction.Complete();
            }

            if (objetPay == 0 || objetPay == 1)
            {
                //SAPDataClassesDataContext dcSAP = new SAPDataClassesDataContext();
                //OINV invoiceSAP = dcSAP.OINV.SingleOrDefault<OINV>(inv => inv.DocEntry == idFactSAP);

                //if (invoiceSAP.ReceiptNum.HasValue)
                //{
                //    payement.IdPaySAP = invoiceSAP.ReceiptNum.Value;
                //} 
                //dcAcc.SubmitChanges();
            }

          

            return payement;
        }

        /// <summary>
        /// recalcule les proforma qui comporte les manu et gest parc
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public List<PROFORMA> Promo2016(List<PROFORMA> list)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                List<PROFORMA> retur = new List<PROFORMA>();
                foreach (PROFORMA pr in list)
                {
                    if (pr.PROMO == null || pr.PROMO == 0)
                    {
                        PROFORMA p = (from pro in dcAcc.GetTable<PROFORMA>() where pro.IdFP == pr.IdFP select pro).SingleOrDefault<PROFORMA>();
                        //verifi si le detail de la proforma contient manu et gest parc.
                        List<ELEMENT_FACTURATION> check = (from lp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                                           from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                           from v in dcAcc.GetTable<VEHICULE>()
                                                           where lp.IdJEF == ef.IdJEF && lp.IdFP == p.IdFP && (ef.CodeArticle == "1701" || ef.CodeArticle == "1702"
                                                          || ef.CodeArticle == "1820") && v.IdVeh == ef.IdVeh && v.VolCVeh <= 18 
                                                           select ef).ToList<ELEMENT_FACTURATION>();
                        double mht = 0; double tva = 0;
                        if (check.Count > 0)
                        {
                            //pour chaque ligne on applique la remise et on cree la ligne de reduction
                            //List<Int32> idJEFs = new List<int>();
                            foreach (ELEMENT_FACTURATION ef in check)
                            {
                                //verifier si le 
                                ELEMENT_FACTURATION newef = new ELEMENT_FACTURATION();
                                newef.CCArticle = ef.CCArticle;
                                newef.CCCP = ef.CCCP;
                                newef.CODE_TVA = ef.CODE_TVA;
                                newef.CodeArticle = ef.CodeArticle;
                                newef.CodeTVA = ef.CodeTVA;
                                newef.DateJEF = DateTime.Now;
                                newef.DelaiEF = ef.DelaiEF;
                                newef.DestEF = ef.DestEF;
                                newef.EltFacture = ef.EltFacture;
                                newef.IdBL = ef.IdBL;
                                newef.IdCtr = ef.IdCtr;
                                newef.IdDDR = ef.IdDDR;
                                newef.IdEsc = ef.IdEsc;
                                newef.IdGC = ef.IdGC;
                                newef.IdLP = ef.IdLP;
                                newef.IdVeh = ef.IdVeh;
                                newef.LibEF = ef.LibEF;
                                newef.PUEF = Math.Round(Convert.ToDouble(ef.PUEF / 2), 0, MidpointRounding.AwayFromZero);
                                newef.PUEFBase = newef.PUEF;
                                newef.QTEEF = ef.QTEEF;
                                newef.REF_IDJEF = ef.IdJEF;
                                newef.StatutEF = "En Cours";
                                newef.TauxTVA = ef.TauxTVA;
                                newef.UnitEF = ef.UnitEF;
                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(newef);

                                ef.PUEF = (ef.PUEF - newef.PUEF);
                                LIGNE_PROFORMA lp = (from m in dcAcc.GetTable<LIGNE_PROFORMA>() where m.IdJEF == ef.IdJEF select m).Single();
                                lp.PUEF = ef.PUEF;
                                mht = mht + (newef.PUEF.Value * newef.QTEEF.Value);
                                tva = tva + (newef.TauxTVA == 0 ? 0 : (newef.PUEF.Value * newef.QTEEF.Value * 0.1925));
                            }
                            dcAcc.SubmitChanges();

                            //recalcule de la proforma.
                            p.MHT_EF = p.MHT; p.MTTC_EF = p.MTTC; p.MTVA_EF = p.MTVA;
                            p.MHT = p.MHT.Value - int.Parse(Math.Round(mht, 0, MidpointRounding.AwayFromZero).ToString());
                            p.MTVA = p.MTVA.Value - int.Parse(Math.Round(tva, 0, MidpointRounding.AwayFromZero).ToString());
                            p.MTTC = p.MHT + p.MTVA;
                            //marque la proforma comme promo pour eviter le recalcul
                            p.PROMO = 1;
                            dcAcc.SubmitChanges();

                            //ajout a la liste
                            retur.Add(p);
                        }
                        else
                            retur.Add(pr);

                    }
                }
                transaction.Complete();
                return retur;
            }
        }

        public PAYEMENT AnnulerPayement(int idPay, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedPay = (from pay in dcAcc.GetTable<PAYEMENT>()
                                  where pay.IdPay == idPay
                                  select pay).SingleOrDefault<PAYEMENT>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Paiement : Suppression d'un élément existant").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour annuler un paiement. Veuillez contacter un administrateur");
                }

                if (matchedPay == null)
                {
                    throw new EnregistrementInexistant("Paiement Inexistant");
                }

                if (matchedPay.StatutPay != "A")
                {
                    matchedPay.StatutPay = "A";
                }
                else
                {
                    throw new ApplicationException("Ce paiement a déjà été annulée");
                }

                if (autresInfos.Trim() != "")
                {
                    NOTE noteAnnulation = new NOTE();
                    noteAnnulation.IdPay = matchedPay.IdPay;
                    noteAnnulation.DateNote = DateTime.Now;
                    noteAnnulation.IdU = idUser;
                    noteAnnulation.TitreNote = "Note d'annulation";
                    noteAnnulation.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteAnnulation);
                }

                #region copie remote sys
                RMT_PAYEMENT rmtpay = new RMT_PAYEMENT();
                rmtpay.AIPay = autresInfos;
                rmtpay.Banque = matchedPay.Banque;
                rmtpay.DatePay = matchedPay.DatePay;
                rmtpay.IdBL = matchedPay.IdBL;
                rmtpay.IdClient = matchedPay.IdClient;
                rmtpay.MAPay = matchedPay.MAPay;
                rmtpay.ModePay = matchedPay.ModePay;
                rmtpay.MRPay = matchedPay.MRPay;
                rmtpay.NumCheque = matchedPay.NumCheque;
                rmtpay.NumCompte = matchedPay.NumCompte;
                rmtpay.RefVirement = matchedPay.RefVirement;
                rmtpay.StatutPay = "A";
                rmtpay.SysId = matchedPay.IdPaySAP;
                dcAcc.RMT_PAYEMENT.InsertOnSubmit(rmtpay);
                #endregion

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedPay;
            }
        }

        #endregion

        #region Avoir

        /// <summary>
        /// avoir facture spot
        /// </summary>
        /// <param name="iddocsap">idsap facture</param>
        /// <param name="autreinfo"></param>
        /// <param name="iduser"></param>
        /// <returns></returns>
        public AVOIR InsertAvoirFactureSpot(int iddocsap, string autreinfo, int iduser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
            var matchedFacture = (from fact in dcAcc.GetTable<FACTURE>()
                                  where fact.IdDocSAP == iddocsap
                                  select fact).SingleOrDefault<FACTURE>();
            var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                               where u.IdU == iduser
                               select u).FirstOrDefault<UTILISATEUR>();

            if (matchedUser == null)
            {
                throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
            }

            if (matchedFacture == null)
            {
                throw new EnregistrementInexistant("Facture Inexistante");
            }

            PAYEMENT pay;
            if (matchedFacture.IdPay.HasValue)
            {
                if (matchedFacture.PAYEMENT.StatutPay != "A")
                {
                    //TODO : annuler le paiement
                     pay = AnnulerPayement(matchedFacture.PAYEMENT.IdPay, autreinfo, iduser);

                    //TODO :  envoie commande annulation paiement sap

                }
            }

            matchedFacture.StatutFD = "A";

            #region creation avoir
            AVOIR av = new AVOIR();

            av.DCFA = DateTime.Now;
            av.AIFA = autreinfo;
            //av.IdArm = matchedFacture.PROFORMA.CONNAISSEMENT.ESCALE.IdArm;
            //av.IdBL = matchedFacture.PROFORMA.IdBL;
            av.IdClient = matchedFacture.CLIENT.IdClient;
            av.ClientAvoir = matchedFacture.CLIENT.NomClient;
            av.IdU = iduser;
            av.MHT = matchedFacture.MHT;
            av.MTVA = matchedFacture.MTVA;
            av.MTTC = matchedFacture.MTTC;
            av.IdFD = matchedFacture.IdFD;
            av.TypeAvoir = "Total";
            av.TypeFacture = "Cli";
            dcAcc.GetTable<AVOIR>().InsertOnSubmit(av);
            dcAcc.SubmitChanges(); 
            #endregion

            List<ELEMENT_FACTURATION> listElts = (from m in dcAcc.GetTable<ELEMENT_FACTURATION>() where m.IdFD == matchedFacture.IdFD select m).ToList<ELEMENT_FACTURATION>();


            #region copie pour remote sys
            RMT_AVOIR rmav = new RMT_AVOIR();
            rmav.DCFA = (DateTime)av.DCFA;
            rmav.MHT = (int)av.MHT;
            rmav.MTTC = (int)av.MTTC;
            rmav.MTVA = (int)av.MTVA;
            rmav.Note = autreinfo;
            rmav.SysId = av.IdFA;
            rmav.IdFD = av.IdFD; rmav.Typ = av.TypeAvoir;
            dcAcc.RMT_AVOIR.InsertOnSubmit(rmav);


            #endregion
                 

            #region creation ligne avoir et formation list ligneecriture
            List<LigneEcriture> elts = new List<LigneEcriture>();

            foreach (ELEMENT_FACTURATION elt in listElts)
            { 
                LIGNE_AVOIR ligne = new LIGNE_AVOIR();
                ligne.IdJEF = elt.IdJEF;
                ligne.IdFA = av.IdFA;
                ligne.StatutLP = "O";
                ligne.PUEF = elt.PUEF;
                ligne.QTEEF = elt.QTEEF;
                ligne.TauxTVA = elt.TauxTVA;

                dcAcc.GetTable<LIGNE_AVOIR>().InsertOnSubmit(ligne);

                #region copie pour remote sys
                RMT_ELEMENT_FACTURE rmef = new RMT_ELEMENT_FACTURE();
                rmef.CodeArt = elt.CodeArticle;
                rmef.CodeTva = elt.CodeTVA;
                rmef.Elt = elt.EltFacture;
                rmef.IdFA = av.IdFA;
                rmef.Lib = elt.LibEF;
                rmef.PU = (int)elt.PUEF;
                rmef.Qte = (double)elt.QTEEF;
                rmef.Statut = "Annule";
                rmef.SysId = elt.IdJEF;
                rmef.TauxTva = elt.TauxTVA.ToString();
                rmef.Unite = elt.UnitEF;
                 
                dcAcc.RMT_ELEMENT_FACTURE.InsertOnSubmit(rmef);
                #endregion

                /*Ah plus utiliser. Arret integration avec SAP.
                 * elts.Add(new LigneEcriture { 
                    CodeArticle=elt.LIGNE_PRIX.CodeArticle.Value, 
                    //PrixUnitaire=elt.PUEF.Value, 
                    Qte=elt.QTEEF.Value, 
                    AccountCode=elt.CCArticle, 
                    //CodeTVA=elt.CodeTVA 
                    CodeTVA = elt.CodeTVA=="TVADA" ? "TVAEX" : elt.CodeTVA,
                    PrixUnitaire = elt.CodeTVA == "TVADA" ? Convert.ToDouble(elt.PUEF.Value * (1 + (elt.CODE_TVA.TauxTVA / 100))) : elt.PUEF.Value
                                                
                });
                 * */
            } 

            dcAcc.SubmitChanges();
            #endregion
                 
            #region HA Arret Intégration à SAP
            /*
            List<Int32> idJEFs = new List<int>();
            foreach (ELEMENT_FACTURATION e in listElts)
            {
                idJEFs.Add(e.IdJEF);
            }

            List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                      from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                      where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                      orderby art.LibArticle ascending
                                      select art).Distinct<ARTICLE>().ToList<ARTICLE>();
                 

            string date = av.DCFA.Value.Year.ToString() + "-" + FormatChiffre(av.DCFA.Value.Month) + "-" + FormatChiffre(av.DCFA.Value.Day);
            string taxDate = av.DCFA.Value.Year.ToString() + "-" + FormatChiffre(av.DCFA.Value.Month) + "-" + FormatChiffre(av.DCFA.Value.Day);
            
            //appel de la methode erp
            string idDocSAP = string.Empty;
            idDocSAP = (new VsomSAP()).InsertAvoirFactureSpot(elts, date, taxDate, matchedFacture.IdDocSAP.Value, 
                       matchedFacture.CLIENT.CodeClient, matchedFacture.CLIENT.NomClient);
            
            if (idDocSAP.Contains("Un des documents de base a été fermé"))
            {
                throw new ApplicationException("Echec : cette facture est clôturée dans l'ERP. Veuillez au préalable annuler l'encaissement associé. \n" + idDocSAP.ToString());
            }

            int result;
            av.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

            if (av.IdDocSAP == -1)
            {
                throw new ApplicationException("Echec du transfert des données à l'ERP : \n" + idDocSAP.ToString());
            }
            */
            #endregion

            av.IdDocSAP = av.IdFA;

            #region log operation
            string machinename = string.Empty;
            try { machinename = Environment.MachineName; }
            catch { }
            string estmanuel = "Avoir FSPOT";

            JOURNAL journal = new JOURNAL
            {
                IdU = iduser,
                IdOp = 252,
                DOP = DateTime.Now,
                IDEC = string.Format("AvoirTotal;PC:{0};Valeur:{1};TypeOp:{2};", machinename, av.MTTC, estmanuel)
            };
            dcAcc.GetTable<JOURNAL>().InsertOnSubmit(journal); 
            #endregion

            string message = string.Empty;
            /*if (pay != null)
            {
                message="Annulation effectuée. Le paiement associé à cette facture est annulé. Veuillez l'an
            }*
             */ 
            dcAcc.SubmitChanges();
            transaction.Complete();
            return av;
        }
        }

        /// <summary>
        /// creation avoir spot
        /// </summary>
        /// <param name="listelts"></param>
        /// <param name="autresinfo"></param>
        /// <param name="iduser"></param>
        /// <param name="idclient"></param>
        /// <returns></returns>
        public AVOIR InsertAvoirSpot(List<ElementLigneFactureSpot> listelts,DateTime date, string autresinfo,string observation, int idUser, int idclient , string codeclient, double mht, double mttc , double tva)
        {

            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser, dcAcc).Where(op => op.NomOp == "Avoir : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour établir un avoir. Veuillez contacter un administrateur");
                }

                AVOIR av = new AVOIR();
                av.AIFA = autresinfo;
                av.AIVFA = observation;
                av.DCFA = date;
                av.IdClient = idclient;
                av.IdU = idUser;
                av.MHT = int.Parse(mht.ToString()); av.MTTC = int.Parse(mttc.ToString()); av.MTVA = int.Parse(tva.ToString()); av.StatutFA = "O";
                av.TypeAvoir = "Spot";
                dcAcc.GetTable<AVOIR>().InsertOnSubmit(av);
                dcAcc.SubmitChanges();
                av.IdDocSAP = av.IdFA;
                
                
                List<NOVA_SAGE> sage = new List<NOVA_SAGE>();

                foreach (ElementLigneFactureSpot lg in listelts)
                {
                    LIGNE_AVOIR_SPOT las = new LIGNE_AVOIR_SPOT();
                    las.CodeArticle = short.Parse(lg.Code);
                    las.IdFA = av.IdFA;
                    las.PUEF = (float)lg.PrixUnitaire;
                    las.QTEEF = lg.Qte;
                    las.TauxTVA = lg.TVA;
                    las.CCOMPTABLE = lg.CompteComptable;

                    las.Lib = lg.Libelle;
                    if (lg.EltCompulsory != null)
                    {
                        las.IDJEF = lg.EltCompulsory.IdElt;
                       
                    }
                    sage.Add(new NOVA_SAGE { Code="300", InvoiceDate=string.Format("{0:ddMMyy}", date), FC="AC", CodeTitle=lg.CompteComptable,
                        X="G", CustomerCode="", InvoiceNumber="AV"+av.IdFA,
                        Description=autresinfo, PayType="S", DatePay=string.Format("{0:ddMMyy}", date),DebitCredit="C", 
                        GrossAmount=(-1* Convert.ToDouble(lg.Qte*lg.PrixUnitaire)).ToString(), N="N" });
                    if (lg.CodeTVA == "TVAAP" && lg.TVA != 0)
                    {
                        sage.Add(new NOVA_SAGE
                        {
                            Code = "300",
                            InvoiceDate = string.Format("{0:ddMMyy}", date),
                            FC = "AC",
                            CodeTitle = "4432100",
                            X = "G",
                            CustomerCode = "",
                            InvoiceNumber = "AV" + av.IdFA,
                            Description = autresinfo,
                            PayType = "S",
                            DatePay = string.Format("{0:ddMMyy}", date),
                            DebitCredit = "C",
                            GrossAmount = Math.Round((-1 * lg.TVA),0, MidpointRounding.AwayFromZero).ToString(),
                            N = "N"
                        });
                    }
                    if (lg.CodeTVA == "TVATI" && lg.TVA != 0)
                    {
                        sage.Add(new NOVA_SAGE
                        {
                            Code = "300",
                            InvoiceDate = string.Format("{0:ddMMyy}", date),
                            FC = "AC",
                            CodeTitle = lg.CompteComptable,
                            X = "G",
                            CustomerCode = "4441101",
                            InvoiceNumber = "AV" + av.IdFA,
                            Description = autresinfo,
                            PayType = "S",
                            DatePay = string.Format("{0:ddMMyy}", date),
                            DebitCredit = "C",
                            GrossAmount = Math.Round((-1 *lg.TVA),0, MidpointRounding.AwayFromZero).ToString(),
                            N = "N"
                        });
                    }
                    dcAcc.GetTable<LIGNE_AVOIR_SPOT>().InsertOnSubmit(las);
                }
                dcAcc.SubmitChanges();
                
               
                //ecriture fichier de sortie
                //ajout ligne client
                sage.Add(new NOVA_SAGE
                {
                    Code = "300",
                    InvoiceDate = string.Format("{0:ddMMyy}", date),
                    FC = "AC",
                    CodeTitle = (codeclient == "C0570" || codeclient == "C0018") ? "4111104" : "4111100",
                    X = "X",
                    CustomerCode = codeclient,
                    InvoiceNumber = "AV" + av.IdFA,
                    Description = autresinfo,
                    PayType = "S",
                    DatePay = string.Format("{0:ddMMyy}", date),
                    DebitCredit = "D",
                    GrossAmount = (-1 * mttc).ToString(),
                    N = "N"
                });


                foreach (ElementLigneFactureSpot elfs in listelts)
                {
                    if (elfs.EltCompulsory != null)
                    {
                        ELEMENT_FACTURATION ef = (from m in dcAcc.GetTable<ELEMENT_FACTURATION>() where m.IdJEF == elfs.EltCompulsory.IdElt select m).SingleOrDefault<ELEMENT_FACTURATION>();
                        ef.StatutEF = "Facturé"; ef.IdFD = av.IdFA;
                    }
                }
                dcAcc.SubmitChanges();

                string _path = System.Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + String.Format("\\sage_avoir_spot_{0}_{1}.PNM", av.IdDocSAP, string.Format("{0:ddMMyy}", date));

                using (System.IO.StreamWriter sw = new System.IO.StreamWriter(_path))
                {
                    sw.WriteLine("SOCOMAR - NOVA");
                    foreach (NOVA_SAGE ns in sage)
                    {
                        sw.WriteLine(string.Format("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}",
                               ns.Code, ns.InvoiceDate, ns.FC, ns.CodeTitle, ns.X, ns.CustomerCode, ns.InvoiceNumber, ns.Description, ns.PayType, ns.DatePay, ns.DebitCredit,
                               ns.GrossAmount, ns.N));
                    }
                }

                transaction.Complete();
                return av;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="idFactSAP"></param>
        /// <param name="listElts"></param>
        /// <param name="autresInfos"></param>
        /// <param name="idUser"></param>
        /// <param name="writeSAP">indique sil faut ecrire dans SAP</param>
        /// <param name="idDocAvoirSAP"></param>
        /// <returns></returns>
        public AVOIR InsertAvoir(int idFactSAP, List<ElementFacturation> listElts, string autresInfos, int idUser , bool writeSAP, int idDocAvoirSAP)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedFacture = (from fact in dcAcc.GetTable<FACTURE>()
                                      where fact.IdDocSAP == idFactSAP
                                      select fact).SingleOrDefault<FACTURE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Avoir : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour établir un avoir. Veuillez contacter un administrateur");
                }

                if (matchedFacture == null)
                {
                    throw new EnregistrementInexistant("Facture Inexistante");
                }

                /* HA interruption SAP.
                 * on annule le paiement si la facture est payé
                 * if (matchedFacture.IdPay.HasValue)
                {
                    if (matchedFacture.PAYEMENT.StatutPay != "A")
                    {
                        throw new ApplicationException("Veuillez au préalable annuler le paiement associé dans l'ERP et dans NOVA");
                    }
                }*/

                if (matchedFacture.IdPay.HasValue)
                {
                    AnnulerPayement(matchedFacture.IdPay.Value, autresInfos, idUser);
                }

                matchedFacture.StatutFD = "A";

                AVOIR av = new AVOIR();

                av.DCFA = DateTime.Now;
                av.AIFA = autresInfos;
                av.IdArm = matchedFacture.PROFORMA.CONNAISSEMENT.ESCALE.IdArm;
                av.IdBL = matchedFacture.PROFORMA.IdBL;
                av.IdClient = matchedFacture.PROFORMA.IdClient;
                av.ClientAvoir = matchedFacture.PROFORMA.ClientFacture;
                av.IdU = idUser;
                av.MHT = Convert.ToInt32(listElts.Sum(el => el.MontantHT));
                av.MTVA = Convert.ToInt32(listElts.Sum(el => el.MontantTVA));
                av.MTTC = Convert.ToInt32(listElts.Sum(el => el.MontantTTC));
                av.IdFD = matchedFacture.IdFD;
                av.TypeAvoir = "Total";
                av.TypeFacture = "Cli";
                dcAcc.GetTable<AVOIR>().InsertOnSubmit(av);
                dcAcc.SubmitChanges();

                #region copie pour remote sys
                //RMT_AVOIR rmav = new RMT_AVOIR();
                //rmav.DCFA = (DateTime)av.DCFA;
                //rmav.MHT = (int)av.MHT;
                //rmav.MTTC = (int)av.MTTC;
                //rmav.MTVA = (int)av.MTVA;
                //rmav.Note = autresInfos;
                //rmav.SysId = av.IdFA;
                //rmav.IdFD = av.IdFD;
                //rmav.Typ = av.TypeAvoir;
                //dcAcc.RMT_AVOIR.InsertOnSubmit(rmav);


                #endregion

                foreach (ElementFacturation elt in listElts)
                {
                    if (!elt.IsFacture)
                    {
                        throw new ApplicationException("L'élement de facturation " + elt.LibArticle + " ne fait l'objet d'aucune facture en cours. Il a déjà fait l'objet d'un avoir");
                    }
                    LIGNE_PROFORMA matchedLigneFP = dcAcc.GetTable<LIGNE_PROFORMA>().SingleOrDefault<LIGNE_PROFORMA>(el => el.IdJEF == elt.IdElt && el.IdFP == matchedFacture.IdFP);
                    //AH pour garder une hstotique matchedLigneFP.ELEMENT_FACTURATION.IdFD = null;
                    matchedLigneFP.ELEMENT_FACTURATION.StatutEF = "Annule";
                    
                    ELEMENT_FACTURATION newel = new ELEMENT_FACTURATION();
                    newel.CCArticle= matchedLigneFP.ELEMENT_FACTURATION.CCArticle;
                    newel.CCCP= matchedLigneFP.ELEMENT_FACTURATION.CCCP;
                   // newel.CODE_TVA=matchedLigneFP.ELEMENT_FACTURATION.CODE_TVA;
                    newel.CodeArticle=matchedLigneFP.ELEMENT_FACTURATION.CodeArticle;
                    newel.CodeTVA=matchedLigneFP.ELEMENT_FACTURATION.CodeTVA;
                    newel.DateJEF=DateTime.Now;
                    newel.DestEF=matchedLigneFP.ELEMENT_FACTURATION.DestEF;
                    newel.EltFacture=matchedLigneFP.ELEMENT_FACTURATION.EltFacture;
                    newel.IdBL=matchedLigneFP.ELEMENT_FACTURATION.IdBL;
                    newel.IdCtr=matchedLigneFP.ELEMENT_FACTURATION.IdCtr;
                    newel.IdDDR=matchedLigneFP.ELEMENT_FACTURATION.IdDDR;
                    newel.IdEsc=matchedLigneFP.ELEMENT_FACTURATION.IdEsc;
                    newel.IdGC=matchedLigneFP.ELEMENT_FACTURATION.IdGC;
                    newel.IdLP=matchedLigneFP.ELEMENT_FACTURATION.IdLP;
                    newel.IdLS=matchedLigneFP.ELEMENT_FACTURATION.IdLS;
                    newel.IdMafi=matchedLigneFP.ELEMENT_FACTURATION.IdMafi;
                    newel.IdMan=matchedLigneFP.ELEMENT_FACTURATION.IdMan;
                    newel.IdOS=matchedLigneFP.ELEMENT_FACTURATION.IdOS;
                    newel.IdVeh=matchedLigneFP.ELEMENT_FACTURATION.IdVeh;
                    newel.LibEF=matchedLigneFP.ELEMENT_FACTURATION.LibEF;
                    newel.PUEF=matchedLigneFP.ELEMENT_FACTURATION.PUEF;
                    newel.PUEFBase=matchedLigneFP.ELEMENT_FACTURATION.PUEFBase;
                    newel.QTEEF=matchedLigneFP.ELEMENT_FACTURATION.QTEEF;
                    newel.StatutEF="En cours";
                    newel.TauxTVA=matchedLigneFP.ELEMENT_FACTURATION.TauxTVA;
                    newel.UnitEF=matchedLigneFP.ELEMENT_FACTURATION.UnitEF;

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(newel);
                     
                    LIGNE_AVOIR ligne = new LIGNE_AVOIR();
                    ligne.IdJEF = elt.IdElt;
                    ligne.IdFA = av.IdFA;
                    ligne.StatutLP = "O";
                    ligne.PUEF = matchedLigneFP.PUEF;
                    ligne.QTEEF = matchedLigneFP.QTEEF;
                    ligne.TauxTVA = matchedLigneFP.TauxTVA;

                    dcAcc.GetTable<LIGNE_AVOIR>().InsertOnSubmit(ligne);

                    #region copie pour remote sys
                    RMT_ELEMENT_FACTURE rmef = new RMT_ELEMENT_FACTURE();
                    rmef.CodeArt = matchedLigneFP.ELEMENT_FACTURATION.CodeArticle;
                    rmef.CodeTva = matchedLigneFP.ELEMENT_FACTURATION.CodeTVA;
                    rmef.Elt = matchedLigneFP.ELEMENT_FACTURATION.EltFacture;
                    rmef.IdFA = av.IdFA;
                    rmef.Lib = matchedLigneFP.ELEMENT_FACTURATION.LibEF;
                    rmef.PU = (int)matchedLigneFP.ELEMENT_FACTURATION.PUEF;
                    rmef.Qte = (double)matchedLigneFP.ELEMENT_FACTURATION.QTEEF;
                    rmef.Statut = "Annule";
                    rmef.SysId = matchedLigneFP.ELEMENT_FACTURATION.IdJEF;
                    rmef.TauxTva = matchedLigneFP.ELEMENT_FACTURATION.TauxTVA.ToString();
                    rmef.Unite = matchedLigneFP.ELEMENT_FACTURATION.UnitEF;
                    rmef.IdBl = matchedLigneFP.ELEMENT_FACTURATION.IdBL;
                    dcAcc.RMT_ELEMENT_FACTURE.InsertOnSubmit(rmef);
                    #endregion
                }
                dcAcc.SubmitChanges();
                 
                //dcAcc.SubmitChanges();

                #region ha arret integration SAP
                /* //Intégration à SAP

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               from la in dcAcc.GetTable<LIGNE_AVOIR>()
                                               where elt.IdJEF == la.IdJEF && la.IdFA == av.IdFA
                                               select elt).ToList<ELEMENT_FACTURATION>();

                List<Int32> idJEFs = new List<int>();
                foreach (ELEMENT_FACTURATION e in matchedElementsFactures)
                {
                    idJEFs.Add(e.IdJEF);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                List<LigneEcriture> elts = (from lfp in dcAcc.GetTable<LIGNE_PROFORMA>()
                                            from la in dcAcc.GetTable<LIGNE_AVOIR>()
                                            where lfp.IdJEF == la.IdJEF && la.IdFA == av.IdFA
                                            select new LigneEcriture
                                            {
                                                CodeArticle = lfp.ELEMENT_FACTURATION.LIGNE_PRIX.CodeArticle.Value,
                                                AccountCode = lfp.ELEMENT_FACTURATION.CCArticle,
                                                //CodeTVA = lfp.ELEMENT_FACTURATION.CodeTVA,
                                                //PrixUnitaire = lfp.PUEF.Value,
                                                Qte = lfp.QTEEF.Value,
                                                CodeTVA = lfp.ELEMENT_FACTURATION.CodeTVA == "TVADA" ? "TVAEX" : lfp.ELEMENT_FACTURATION.CodeTVA,
                                                PrixUnitaire = lfp.ELEMENT_FACTURATION.CodeTVA == "TVADA" ? Convert.ToDouble(lfp.PUEF.Value * (1 + (lfp.ELEMENT_FACTURATION.CODE_TVA.TauxTVA / 100))) : lfp.PUEF.Value

                                            }).ToList<LigneEcriture>();

                string date = av.DCFA.Value.Year.ToString() + "-" + FormatChiffre(av.DCFA.Value.Month) + "-" + FormatChiffre(av.DCFA.Value.Day);
                string taxDate = av.DCFA.Value.Year.ToString() + "-" + FormatChiffre(av.DCFA.Value.Month) + "-" + FormatChiffre(av.DCFA.Value.Day);

                //methode erp
                string idDocSAP = string.Empty;
                idDocSAP = (new VsomSAP()).InsertAvoir(elts, writeSAP, date, taxDate, av.CLIENT.CodeClient, matchedFacture.PROFORMA.CONNAISSEMENT.ESCALE.NumEsc.ToString(),
                    matchedFacture.PROFORMA.CONNAISSEMENT.NumBL, matchedFacture.PROFORMA.CONNAISSEMENT.ConsigneeBL.Replace("&", "et"), matchedFacture.IdDocSAP.Value, idDocAvoirSAP);

                if (idDocSAP.Contains("Un des documents de base a été fermé"))
                {
                    throw new ApplicationException("Echec : cette facture est clôturée dans l'ERP. Veuillez au préalable annuler l'encaissement associé. \n" + idDocSAP.ToString());
                }

                int result;
                av.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

                if (av.IdDocSAP == -1)
                {
                    throw new ApplicationException("Echec du transfert des données à l'ERP : \n" + idDocSAP.ToString());
                }
                */
                #endregion
                
                string machinename = string.Empty;
                try { machinename = Environment.MachineName; }
                catch { }
                string estmanuel = string.Empty;
                if (writeSAP == true)
                {
                    estmanuel = "Avoir manuel";
                }
                else
                { estmanuel = "Avoir Normal"; }


                JOURNAL journal = new JOURNAL
                {
                    IdU = idUser,
                    IdOp = 252,
                    DOP = DateTime.Now,
                    IDEC = string.Format("AvoirTotal;PC:{0};Valeur:{1};TypeOp:{2};", machinename,av.MTTC,estmanuel)
                };
                dcAcc.GetTable<JOURNAL>().InsertOnSubmit(journal);

                

                av.IdDocSAP = av.IdFA;
                dcAcc.SubmitChanges();
                transaction.Complete();
                return av;
            }
        }

        public AVOIR InsertAvoirPartiel(int idFactSAP, List<ElementFacturation> listElts, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedFacture = (from fact in dcAcc.GetTable<FACTURE>()
                                      where fact.IdDocSAP == idFactSAP
                                      select fact).SingleOrDefault<FACTURE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Avoir : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour établir un avoir. Veuillez contacter un administrateur");
                }

                if (matchedFacture == null)
                {
                    throw new EnregistrementInexistant("Facture Inexistante");
                }

                AVOIR av = new AVOIR();

                av.DCFA = DateTime.Now;
                av.AIFA = autresInfos;
                av.IdArm = matchedFacture.PROFORMA.CONNAISSEMENT.ESCALE.IdArm;
                av.IdBL = matchedFacture.PROFORMA.IdBL;
                av.IdClient = matchedFacture.PROFORMA.IdClient;
                av.ClientAvoir = matchedFacture.PROFORMA.ClientFacture;
                av.IdU = idUser;
                av.MHT = Convert.ToInt32(listElts.Sum(el => el.MontantHT));
                av.MTVA = Convert.ToInt32(listElts.Sum(el => el.MontantTVA));
                av.MTTC = Convert.ToInt32(listElts.Sum(el => el.MontantTTC));
                av.IdFD = matchedFacture.IdFD;
                
                av.TypeAvoir = "Partiel";
                av.TypeFacture = "Cli";
                dcAcc.GetTable<AVOIR>().InsertOnSubmit(av);
                dcAcc.SubmitChanges();


                #region copie pour remote sys
                RMT_AVOIR rmav = new RMT_AVOIR();
                rmav.DCFA = (DateTime)av.DCFA;
                rmav.MHT = (int)av.MHT;
                rmav.MTTC = (int)av.MTTC;
                rmav.MTVA = (int)av.MTVA;
                rmav.Note = autresInfos;
                rmav.SysId = av.IdFA;
                rmav.IdFD = av.IdFD; rmav.Typ = av.TypeAvoir;
                dcAcc.RMT_AVOIR.InsertOnSubmit(rmav);


                #endregion

                foreach (ElementFacturation elt in listElts)
                {
                    if (!elt.IsFacture)
                    {
                        throw new ApplicationException("L'élement de facturation " + elt.LibArticle + " ne fait l'objet d'aucune facture en cours. Il a déjà fait l'objet d'un avoir");
                    }
                    ELEMENT_FACTURATION matchedElt = dcAcc.GetTable<ELEMENT_FACTURATION>().SingleOrDefault<ELEMENT_FACTURATION>(el => el.IdJEF == elt.IdElt);

                    ELEMENT_FACTURATION newElt = new ELEMENT_FACTURATION();
                    newElt.CCArticle = matchedElt.CCArticle;
                    newElt.CCCP = matchedElt.CCCP;
                    newElt.CodeTVA = matchedElt.CodeTVA;
                    newElt.DateJEF = DateTime.Now;
                    newElt.DelaiEF = matchedElt.DelaiEF;
                    newElt.DestEF = matchedElt.DestEF;
                    newElt.EltFacture = matchedElt.EltFacture;
                    newElt.IdBL = matchedElt.IdBL;
                    newElt.IdCtr = matchedElt.IdCtr;
                    newElt.IdEsc = matchedElt.IdEsc;
                    newElt.IdGC = matchedElt.IdGC;
                    newElt.IdLP = matchedElt.IdLP;
                    newElt.IdMafi = matchedElt.IdMafi;
                    newElt.IdMan = matchedElt.IdMan;
                    newElt.IdVeh = matchedElt.IdVeh;
                    newElt.LibEF = matchedElt.LibEF;
                    newElt.PTDIT = matchedElt.PTDIT;
                    newElt.PUEF = elt.PrixUnitaire;
                    newElt.PUEFBase = matchedElt.PUEFBase;
                    newElt.QTEEF = -elt.Qte;
                    newElt.StatutEF = "Facturé";
                    newElt.IdFD = -1;
                    newElt.TauxTVA = matchedElt.TauxTVA;
                    newElt.UnitEF = matchedElt.UnitEF;

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(newElt);

                    dcAcc.SubmitChanges();

                    LIGNE_AVOIR ligne = new LIGNE_AVOIR();
                    ligne.IdJEF = newElt.IdJEF;
                    ligne.IdFA = av.IdFA;
                    ligne.StatutLP = "O";
                    ligne.PUEF = matchedElt.PUEF;
                    ligne.QTEEF = matchedElt.QTEEF;
                    ligne.TauxTVA = matchedElt.TauxTVA;

                    dcAcc.GetTable<LIGNE_AVOIR>().InsertOnSubmit(ligne);


                    #region copie pour remote sys
                    RMT_ELEMENT_FACTURE rmef = new RMT_ELEMENT_FACTURE();
                    rmef.CodeArt = matchedElt.CodeArticle;
                    rmef.CodeTva = matchedElt.CodeTVA;
                    rmef.Elt = matchedElt.EltFacture;
                    rmef.IdFA = av.IdFA;
                    rmef.Lib = matchedElt.LibEF;
                    rmef.PU = (int)matchedElt.PUEF;
                    rmef.Qte = (double)matchedElt.QTEEF;
                    rmef.Statut = "Annule";
                    rmef.SysId = matchedElt.IdJEF;
                    rmef.TauxTva = matchedElt.TauxTVA.ToString();
                    rmef.Unite = matchedElt.UnitEF;
                    rmef.IdBl = matchedElt.IdBL;
                    dcAcc.RMT_ELEMENT_FACTURE.InsertOnSubmit(rmef);
                    #endregion
                     
                }

                dcAcc.SubmitChanges();

                av.IdDocSAP = av.IdFA;

                #region arret integration SAP
                /*
                //Intégration à SAP

                var matchedElementsFactures = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                               from la in dcAcc.GetTable<LIGNE_AVOIR>()
                                               where elt.IdJEF == la.IdJEF && la.IdFA == av.IdFA
                                               select elt).ToList<ELEMENT_FACTURATION>();

                List<Int32> idJEFs = new List<int>();
                foreach (ELEMENT_FACTURATION e in matchedElementsFactures)
                {
                    idJEFs.Add(e.IdJEF);
                }

                List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                          from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                          where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                          orderby art.LibArticle ascending
                                          select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                            from la in dcAcc.GetTable<LIGNE_AVOIR>()
                                            where eltFact.IdJEF == la.IdJEF && la.IdFA == av.IdFA
                                            select new LigneEcriture
                                            {
                                                CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                AccountCode = eltFact.CCArticle,
                                                // CodeTVA = eltFact.CodeTVA,
                                                // PrixUnitaire = eltFact.PUEF.Value,
                                                Qte = eltFact.QTEEF.Value,
                                                CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                PrixUnitaire = eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value

                                            }).ToList<LigneEcriture>();

                string date = av.DCFA.Value.Year.ToString() + "-" + FormatChiffre(av.DCFA.Value.Month) + "-" + FormatChiffre(av.DCFA.Value.Day);
                string taxDate = av.DCFA.Value.Year.ToString() + "-" + FormatChiffre(av.DCFA.Value.Month) + "-" + FormatChiffre(av.DCFA.Value.Day);

                string idDocSAP = string.Empty;
                idDocSAP = (new VsomSAP()).InsertAvoirPartiel(elts, av.CLIENT.CodeClient, date, taxDate, idFactSAP, matchedFacture.PROFORMA.CONNAISSEMENT.ESCALE.NumEsc.ToString(),
                    matchedFacture.PROFORMA.CONNAISSEMENT.NumBL, matchedFacture.PROFORMA.CONNAISSEMENT.ConsigneeBL.Replace("&", "et"));

                //if (idDocSAP.Contains("Un des documents de base a été fermé"))
                //{
                //    throw new ApplicationException("Echec : cette facture est clôturée dans l'ERP. Veuillez au préalable annuler l'encaissement associé");
                //}

                int result;
                av.IdDocSAP = Int32.TryParse(idDocSAP, out result) ? result : -1;

                if (av.IdDocSAP == -1)
                {
                    throw new ApplicationException("Echec du transfert des données à l'ERP \n" + idDocSAP.ToString());
                }
                */
                #endregion

                string machinename = string.Empty;
                try { machinename = Environment.MachineName; }
                catch { }
                 

                JOURNAL journal = new JOURNAL
                {
                    IdU = idUser,
                    IdOp = 252,
                    DOP = DateTime.Now,
                    IDEC = string.Format("AvoirPartiel;PC:{0};Valeur:{1};", machinename, av.MTTC)
                };
                dcAcc.GetTable<JOURNAL>().InsertOnSubmit(journal);


                dcAcc.SubmitChanges();
                transaction.Complete();
                return av;
            }
        }

        public int NaplePartialCreditNote()
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {

                /* string escal = "2655";
                int idesc = 1223;
                int numeroFacture = 127841;
                int mht=879347; 
                int tva = 169275; 
                int ttc=1048622;

                //creation avoir 
                AVOIR av = new AVOIR();

                av.DCFA = DateTime.Now;
                av.AIFA = "CN New tarif agreement 1st May 2016 - "+escal;
                av.IdArm = 1; //matchedFacture.PROFORMA.CONNAISSEMENT.ESCALE.IdArm;
                //av.IdBL = matchedFacture.PROFORMA.IdBL;
                av.IdClient = 54; //matchedFacture.PROFORMA.IdClient;
                av.ClientAvoir = "Grimaldi Deep Sea S.p.A."; //matchedFacture.PROFORMA.ClientFacture;
                av.IdU = 155;
                av.MHT = mht+177149;
                av.MTVA = tva+34101;
                av.MTTC = ttc+211250;
                av.IdFD = numeroFacture;
                av.TypeAvoir = "Partiel";
                av.TypeFacture = "Cli";

                dcAcc.GetTable<AVOIR>().InsertOnSubmit(av);
                dcAcc.SubmitChanges();

                #region element facturation agency + ligne avoir

                //integration dans ds element de facturation
                ELEMENT_FACTURATION newElt = new ELEMENT_FACTURATION();
                newElt.CCArticle = "7061100";// matchedElt.CCArticle;
                newElt.CCCP = "C0570";// matchedElt.CCCP;
                newElt.CodeTVA = "TVAAP";// matchedElt.CodeTVA;
                newElt.DateJEF = DateTime.Now;
                // newElt.DelaiEF = matchedElt.DelaiEF;
                newElt.DestEF = "A";// matchedElt.DestEF;
                newElt.EltFacture = "Arm";// matchedElt.EltFacture;
                //newElt.IdBL = matchedElt.IdBL;
                //newElt.IdCtr = matchedElt.IdCtr;
                newElt.IdEsc = idesc;// matchedElt.IdEsc;
                //newElt.IdGC = matchedElt.IdGC;
                newElt.IdLP = 207;// matchedElt.IdLP;
                //newElt.IdMafi = matchedElt.IdMafi;
                //newElt.IdMan = matchedElt.IdMan;
                //newElt.IdVeh = matchedElt.IdVeh;
                newElt.LibEF = "Agency fees - Escale " + escal; // matchedElt.LibEF;
                //newElt.PTDIT = matchedElt.PTDIT;
                newElt.PUEF = 177149;
                // newElt.PUEFBase = matchedElt.PUEFBase;
                newElt.QTEEF = -1;
                newElt.StatutEF = "Facturé";
                newElt.IdFD = -1;
                newElt.TauxTVA = 19.25f;//matchedElt.TauxTVA;
                newElt.UnitEF = "U"; //matchedElt.UnitEF;

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(newElt);

                dcAcc.SubmitChanges();

                LIGNE_AVOIR ligne = new LIGNE_AVOIR();
                ligne.IdJEF = newElt.IdJEF;
                ligne.IdFA = av.IdFA;
                ligne.StatutLP = "O";
                ligne.PUEF = newElt.PUEF;
                ligne.QTEEF = 1;
                ligne.TauxTVA = newElt.TauxTVA;

                dcAcc.GetTable<LIGNE_AVOIR>().InsertOnSubmit(ligne);
                dcAcc.SubmitChanges(); 
                #endregion


                #region Steavedoaring element facturation  + ligne avoir

                //integration dans ds element de facturation
                ELEMENT_FACTURATION newElt2 = new ELEMENT_FACTURATION();
                newElt2.CCArticle = "7061106";// matchedElt.CCArticle;
                newElt2.CCCP = "C0570";// matchedElt.CCCP;
                newElt2.CodeTVA = "TVAAP";// matchedElt.CodeTVA;
                newElt2.DateJEF = DateTime.Now;
                // newElt.DelaiEF = matchedElt.DelaiEF;
                newElt2.DestEF = "A";// matchedElt.DestEF;
                newElt2.EltFacture = "Arm";// matchedElt.EltFacture;
                //newElt.IdBL = matchedElt.IdBL;
                //newElt.IdCtr = matchedElt.IdCtr;
                newElt2.IdEsc = idesc;// matchedElt.IdEsc;
                //newElt.IdGC = matchedElt.IdGC;
                newElt2.IdLP = 408;// matchedElt.IdLP;
                //newElt.IdMafi = matchedElt.IdMafi;
                //newElt.IdMan = matchedElt.IdMan;
                //newElt.IdVeh = matchedElt.IdVeh;
                newElt2.LibEF = "Stevedoring operations CN - Escale " + escal; // matchedElt.LibEF;
                //newElt.PTDIT = matchedElt.PTDIT;
                newElt2.PUEF = mht;
                // newElt.PUEFBase = matchedElt.PUEFBase;
                newElt2.QTEEF = -1;
                newElt2.StatutEF = "Facturé";
                newElt2.IdFD = -1;
                newElt2.TauxTVA = 19.25f;//matchedElt.TauxTVA;
                newElt2.UnitEF = "U"; //matchedElt.UnitEF;

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(newElt2);

                dcAcc.SubmitChanges();

                LIGNE_AVOIR ligne2 = new LIGNE_AVOIR();
                ligne2.IdJEF = newElt2.IdJEF;
                ligne2.IdFA = av.IdFA;
                ligne2.StatutLP = "O";
                ligne2.PUEF = newElt2.PUEF;
                ligne2.QTEEF = 1;
                ligne2.TauxTVA = newElt2.TauxTVA;

                dcAcc.GetTable<LIGNE_AVOIR>().InsertOnSubmit(ligne2);
                dcAcc.SubmitChanges();
                #endregion

                
                DateTime _dat = DateTime.Now;
                string date = _dat.Year.ToString() + "-" + FormatChiffre(_dat.Month) + "-" + FormatChiffre(_dat.Day);
                string taxDate = _dat.Year.ToString() + "-" + FormatChiffre(_dat.Month) + "-" + FormatChiffre(_dat.Day);
                
                SocSAPWS.SocSAPWebService sapWS = new SocSAPWS.SocSAPWebService();
                string sessionID = sapWS.Login(sap_svr, sap_db_name, "dst_MSSQL2008", sap_db_usr, sap_db_pwd, "nova", "Passw0rd", "ln_French", sap_licence);
                List<SocSAPWS.LigneAvoir> lignes = new List<SocSAPWS.LigneAvoir>();
                 
                List<LigneEcriture> elts = new List<LigneEcriture>();
                //agency fees
                elts.Add(new LigneEcriture { CodeArticle = 2203, AccountCode = "7061100", CodeTVA="TVAAP", PrixUnitaire=177149,Qte=1 });
                //steavedoaring
                elts.Add(new LigneEcriture { CodeArticle = 2202, AccountCode = "7061106", CodeTVA = "TVAAP", PrixUnitaire = mht, Qte = 1 });

                foreach (LigneEcriture lign in elts)
                {
                    SocSAPWS.LigneAvoir lg = new SocSAPWS.LigneAvoir();
                    lg.ItemCode = lign.CodeArticle.ToString();
                    lg.AccountCode = lign.AccountCode;
                    lg.UnitPrice = lign.PrixUnitaire;
                    lg.VATGroup = lign.CodeTVA;
                    lg.Quantity = Math.Abs(lign.Qte).ToString().Replace(",", ".");
                    lignes.Add(lg);
                }

                 string idDocSAP = sapWS.AddPartialCreditNote(sessionID, "C0570", date, taxDate, date, 
                                   escal + "-FactGrimaldi" + numeroFacture,  "CN New tarif agreement 1st May 2016 - "+escal, lignes.ToArray());
                 
                
                //string idDocSAP = sapWS.AddCreditNote(sessionID, "C0570", date, taxDate, date, escal + "-FactGrimaldi" + numeroFacture, 
                //           "CN New tarif agreement 1st May 2016 - "+escal, numeroFacture, lignes.ToArray());
                
                sapWS.LogOut(sessionID);  
                 

                //if (idDocSAP.Contains("Un des documents de base a été fermé"))
                //{
                //    throw new ApplicationException("Echec : cette facture est clôturée dans l'ERP. Veuillez au préalable annuler l'encaissement associé");
                //}

                int result;
                int idavoir = Int32.TryParse(idDocSAP, out result) ? result : -1;

                if (idavoir == -1)
                {
                    throw new ApplicationException("Echec du transfert des données à l'ERP \n" + idDocSAP.ToString());
                }

                av.IdDocSAP =  idavoir;
                dcAcc.SubmitChanges();

                transaction.Complete();
                return (int)av.IdDocSAP;
                 */

                return 0;
            }
        }

        #endregion

        #region conteneur
        /// <summary>
        /// utiliser uniquement pour Mdme PINOT pour recadrage des detention non appliqué en 2015
        /// </summary>
        /// <param name="idMvt"></param>
        /// <param name="dateOp"></param>
        /// <param name="idUser"></param>
        /// <param name="idParc"></param>
        /// <returns></returns>
        public MOUVEMENT_TC _2015UpdateOperationTracking(int idMvt, DateTime dateOp, int idUser, int idParc)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedMvt = (from elt in dcAcc.GetTable<MOUVEMENT_TC>()
                                  where elt.IdMvt == idMvt
                                  select elt).SingleOrDefault<MOUVEMENT_TC>();

                matchedMvt.DateMvt = dateOp.AddHours(matchedMvt.DateMvt.Value.Hour).AddMinutes(matchedMvt.DateMvt.Value.Minute).AddSeconds(matchedMvt.DateMvt.Value.Second);
                matchedMvt.IdUser = idUser;
                matchedMvt.IdParc = idParc;

                var matchedListOp = (from elt in dcAcc.GetTable<OPERATION_CONTENEUR>()
                                     where elt.IdTypeOp == matchedMvt.IdTypeOp && elt.IdCtr == matchedMvt.CONTENEUR_TC.IdCtr
                                     select elt).ToList<OPERATION_CONTENEUR>();

                foreach (OPERATION_CONTENEUR opCtr in matchedListOp)
                {
                    opCtr.DateOp = matchedMvt.DateMvt;
                    opCtr.IdU = idUser;
                }

                //matchedMvt.CONTENEUR_TC.StatutTC = statut;
                //matchedMvt.CONTENEUR_TC.CONTENEUR.StatCtr = statut;

                dcAcc.SubmitChanges();

                #region calcule detention si operation est retour
                if (matchedMvt.IdTypeOp == 19) //operation de retour CPINOT
                {
                    int idCtr = matchedMvt.CONTENEUR_TC.IdCtr.Value;
                    var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                            where ctr.IdCtr == idCtr
                                            select ctr).FirstOrDefault<CONTENEUR>();

                    List<ELEMENT_FACTURATION> eltDetCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                where ef.IdCtr == idCtr && ef.CodeArticle == "1807" && (ef.StatutEF != "Facturé" || ef.StatutEF != "Proforma")
                                                                select ef).ToList<ELEMENT_FACTURATION>();

                    if (eltDetCalcules.Count == 0)
                    {
                        DateTime dte = DateTime.Now;
                        DateTime dateRetour = dateOp;
                        List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                        List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                        /* ARTICLE articleDeboursArmDet = (from art in articles
                                                         from par in parametres
                                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Débours armateur : Détention Conteneur"
                                                         select art).FirstOrDefault<ARTICLE>(); */

                        ARTICLE articleDeboursArmDet = (from art in articles
                                                        where art.CodeArticle == 1807
                                                        select art).FirstOrDefault<ARTICLE>();

                        LIGNE_PRIX lpDeboursArmDet = articleDeboursArmDet.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConteneur.TypeCCtr.Substring(0, 2) && lp.LP2 == matchedConteneur.ESCALE.IdArm.ToString() && lp.DDLP <= dte && lp.DFLP >= dte);
                        /*AH plus utilise parceque article cree avec code tvati
                        * 
                        ARTICLE articleTVACpteTiers = (from art in articles
                                                       from par in parametres
                                                       where art.CodeArticle == par.CodeAF && par.NomAF == "TVA pour cpte de tiers"
                                                       select art).FirstOrDefault<ARTICLE>();

                         LIGNE_PRIX lpTVACpteTiers = articleTVACpteTiers.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                         */
                        double derogation = (matchedConteneur.CONNAISSEMENT.BLIL == "Y" || matchedConteneur.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                        if (matchedConteneur.PropCtr == 1)
                        {
                            //calcul detention
                            ELEMENT_FACTURATION eltFactDeboursArmDet = new ELEMENT_FACTURATION();

                            eltFactDeboursArmDet.PUEF = lpDeboursArmDet.PU1LP;
                            eltFactDeboursArmDet.PUEFBase = lpDeboursArmDet.PU1LP;
                            eltFactDeboursArmDet.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmDet.CCArticleEx : ((articleDeboursArmDet.CodeTVA == "TVAAP" || articleDeboursArmDet.CodeTVA == "TVATI") ? articleDeboursArmDet.CCArticle : articleDeboursArmDet.CCArticleEx);
                            eltFactDeboursArmDet.CodeTVA = articleDeboursArmDet.CodeTVA;// "TVAEX";
                            eltFactDeboursArmDet.TauxTVA = articleDeboursArmDet.CODE_TVA.TauxTVA;
                            eltFactDeboursArmDet.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactDeboursArmDet.EltFacture = "Ctr";
                            eltFactDeboursArmDet.DateJEF = DateTime.Now;
                            eltFactDeboursArmDet.IdLP = lpDeboursArmDet.IdLP;
                            eltFactDeboursArmDet.QTEEF = dateRetour.Date < matchedConteneur.DSCtr.Value.Date.AddDays(matchedConteneur.NbDet.Value) ? 0 : (dateRetour - matchedConteneur.DSCtr.Value.Date.AddDays(matchedConteneur.NbDet.Value)).Days;
                            //AH Débours armateur : Détention
                            eltFactDeboursArmDet.LibEF = articleDeboursArmDet.LibArticle + " Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.DSCtr.Value.AddDays(1 + matchedConteneur.NbDet.Value).ToShortDateString() + " - " + matchedConteneur.DSCtr.Value.AddDays(matchedConteneur.NbDet.Value + (int)Math.Round(eltFactDeboursArmDet.QTEEF.Value, 0, MidpointRounding.AwayFromZero)).ToShortDateString();
                            eltFactDeboursArmDet.UnitEF = lpDeboursArmDet.UniteLP;
                            eltFactDeboursArmDet.PTDIT = 0;
                            eltFactDeboursArmDet.IdEsc = matchedConteneur.IdEsc;
                            eltFactDeboursArmDet.IdMan = matchedConteneur.IdMan;
                            eltFactDeboursArmDet.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                            eltFactDeboursArmDet.IdCtr = matchedConteneur.IdCtr;
                            eltFactDeboursArmDet.DestEF = "C";
                            eltFactDeboursArmDet.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmDet);

                        }

                    }
                }
                dcAcc.SubmitChanges();
                #endregion

                transaction.Complete();
                return matchedMvt;
            }
        }

        /// <summary>
        /// retour de conteneur apres depotage
        /// </summary>
        /// <param name="idCtr"></param>
        /// <param name="dateRetour"></param>
        /// <param name="idParc"></param>
        /// <param name="listeSinistre"></param>
        /// <param name="observations"></param>
        /// <param name="idUser"></param>
        /// <returns></returns>
        public CONTENEUR RetourConteneur(int idCtr, DateTime dateRetour, int idParc, List<TYPE_SINISTRE> listeSinistre, string observations, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).FirstOrDefault<CONTENEUR>();

                var matchedConteneurTC = (from ctr in dcAcc.GetTable<CONTENEUR_TC>()
                                          where ctr.IdCtr == idCtr
                                          select ctr).FirstOrDefault<CONTENEUR_TC>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Conteneur : Enregistrement de l'opération de retour").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer une opération de retour de conteneur. Veuillez contacter un administrateur");
                }

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                var matchedDemandeLivraison = (from dbl in dcAcc.GetTable<DEMANDE_LIVRAISON>()
                                               where dbl.IdDBL == matchedConteneur.IdDBL
                                               select dbl).FirstOrDefault<DEMANDE_LIVRAISON>();

                //if (matchedDemandeLivraison != null)
                //{
                //    if (!matchedDemandeLivraison.DVDBL.HasValue)
                //    {
                //        throw new ApplicationException("La demande de livraison de ce conteneur n'a pas été validée");
                //    }
                //}
                //else
                //{
                //    throw new ApplicationException("Ce conteneur ne fait l'objet d'aucun bon de livraison");
                //}

                if (!matchedConteneur.DSCtr.HasValue)
                {
                    throw new ApplicationException("Ce conteneur n'a jamais été livré");
                }

                if (dateRetour.Date <= matchedConteneur.DSCtr)
                {
                    throw new ApplicationException("La date de retour ne peut être antérieure à la date de sortie");
                }

                if (matchedConteneur.DRCtr.HasValue)
                {
                    throw new ApplicationException("Ce conteneur a déjà été retourné");
                }

                if (matchedConteneur.StatCtr == "Cargo Loaded")
                {
                    throw new ApplicationException("Operation de retour impossible : Ce conteneur a déjà été embarqué");
                }

                if (matchedConteneur.PropCtr == 2)
                {
                    throw new ApplicationException("Ce conteneur appartient au client : retour impossible");
                }

                // inserer opération de retour
                OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();
                opCtr.IdCtr = idCtr;
                opCtr.IdTypeOp = 19;
                opCtr.DateOp = dateRetour;
                opCtr.IdU = idUser;
                opCtr.AIOp = observations;

                dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);

                matchedConteneur.DRCtr = dateRetour;
                matchedConteneur.StatCtr = "Retourné";

                if (matchedConteneurTC != null)
                {
                    matchedConteneurTC.StatutTC = "Retourné";
                    matchedConteneurTC.DateRetourVideSCR = dateRetour;
                    matchedConteneurTC.IdUserRetourVide = matchedUser.IdU;
                    matchedConteneurTC.IdParcRetourVide = idParc;

                    MOUVEMENT_TC mvtTC = new MOUVEMENT_TC();

                    mvtTC.DateMvt = dateRetour;
                    mvtTC.IdBL = matchedConteneur.IdBL;
                    mvtTC.IdEsc = matchedConteneur.IdEsc;
                    mvtTC.IdParc = idParc;
                    mvtTC.IdTC = matchedConteneurTC.IdTC;
                    mvtTC.IdTypeOp = 19;
                    mvtTC.IdUser = matchedUser.IdU;

                    dcAcc.GetTable<MOUVEMENT_TC>().InsertOnSubmit(mvtTC);

                    dcAcc.SubmitChanges();
                }

                foreach (TYPE_SINISTRE typeSin in listeSinistre)
                {
                    var listInterchange = (from inter in dcAcc.GetTable<INTERCHANGE>()
                                           where inter.IdCtr == idCtr
                                           select inter).ToList<INTERCHANGE>();

                    listInterchange.FirstOrDefault<INTERCHANGE>(ctr => ctr.IdTypeSinistre == typeSin.IdTypeSinistre).InfoRetour = "Y";
                    dcAcc.INTERCHANGE.Context.SubmitChanges();
                }

                dcAcc.SubmitChanges();

                int nbVehBL = matchedConteneur.CONNAISSEMENT.VEHICULE.Count;
                int nbVehBLBS = matchedConteneur.CONNAISSEMENT.VEHICULE.Count(veh => veh.IdBS.HasValue);

                int nbCtrBL = matchedConteneur.CONNAISSEMENT.CONTENEUR.Count;
                int nbCtrBLBS = matchedConteneur.CONNAISSEMENT.CONTENEUR.Count(ctr => ctr.DRCtr.HasValue);

                int nbGCBL = matchedConteneur.CONNAISSEMENT.CONVENTIONNEL.Count;
                int nbGCBLBS = matchedConteneur.CONNAISSEMENT.CONVENTIONNEL.Count(gc => gc.IdBS.HasValue);

                if (nbVehBL == nbVehBLBS && nbCtrBL == nbCtrBLBS && nbGCBL == nbGCBLBS)
                {
                    OPERATION_CONNAISSEMENT matchedOpBL = (from op in dcAcc.GetTable<OPERATION_CONNAISSEMENT>()
                                                           where op.IdBL == matchedConteneur.IdBL && op.IdTypeOp == 43
                                                           select op).SingleOrDefault<OPERATION_CONNAISSEMENT>();

                    if (!matchedOpBL.DateOp.HasValue)
                    {
                        matchedOpBL.DateOp = DateTime.Now;
                        matchedOpBL.IdU = idUser;
                        matchedOpBL.AIOp = "Clôture";
                    }

                    matchedConteneur.CONNAISSEMENT.StatutBL = "Cloturé";
                }

                dcAcc.SubmitChanges();

                int nbVehMan = matchedConteneur.CONNAISSEMENT.MANIFESTE.VEHICULE.Count;
                int nbVehManBS = matchedConteneur.CONNAISSEMENT.MANIFESTE.VEHICULE.Count(veh => veh.IdBS.HasValue);

                int nbCtrMan = matchedConteneur.CONNAISSEMENT.MANIFESTE.CONTENEUR.Count;
                int nbCtrManBS = matchedConteneur.CONNAISSEMENT.MANIFESTE.CONTENEUR.Count(ctr => ctr.DRCtr.HasValue);

                int nbGCMan = matchedConteneur.CONNAISSEMENT.MANIFESTE.CONVENTIONNEL.Count;
                int nbGCManBS = matchedConteneur.CONNAISSEMENT.MANIFESTE.CONVENTIONNEL.Count(gc => gc.IdBS.HasValue);

                if (nbVehMan == nbVehManBS && nbCtrMan == nbCtrManBS && nbGCMan == nbGCManBS)
                {
                    OPERATION_MANIFESTE matchedOpMan = (from op in dcAcc.GetTable<OPERATION_MANIFESTE>()
                                                        where op.IdMan == matchedConteneur.CONNAISSEMENT.IdMan && op.IdTypeOp == 51
                                                        select op).SingleOrDefault<OPERATION_MANIFESTE>();

                    if (!matchedOpMan.DateOp.HasValue)
                    {
                        matchedOpMan.DateOp = DateTime.Now;
                        matchedOpMan.IdU = idUser;
                        matchedOpMan.AIOp = "Clôture";
                    }
                }

                dcAcc.SubmitChanges();

                int nbVehEsc = matchedConteneur.CONNAISSEMENT.ESCALE.VEHICULE.Count;
                int nbVehEscBS = matchedConteneur.CONNAISSEMENT.ESCALE.VEHICULE.Count(veh => veh.IdBS.HasValue);

                int nbCtrEsc = matchedConteneur.CONNAISSEMENT.ESCALE.CONTENEUR.Count;
                int nbCtrEscBS = matchedConteneur.CONNAISSEMENT.ESCALE.CONTENEUR.Count(ctr => ctr.DRCtr.HasValue);

                int nbGCEsc = matchedConteneur.CONNAISSEMENT.ESCALE.CONVENTIONNEL.Count;
                int nbGCEscBS = matchedConteneur.CONNAISSEMENT.ESCALE.CONVENTIONNEL.Count(gc => gc.IdBS.HasValue);

                if (nbVehEsc == nbVehEscBS && nbCtrEsc == nbCtrEscBS && nbGCEsc == nbGCEscBS)
                {
                    OPERATION_ESCALE matchedOpEsc = (from op in dcAcc.GetTable<OPERATION_ESCALE>()
                                                     where op.IdEsc == matchedConteneur.CONNAISSEMENT.IdEsc && op.IdTypeOp == 59
                                                     select op).SingleOrDefault<OPERATION_ESCALE>();

                    if (!matchedOpEsc.DateOp.HasValue)
                    {
                        matchedOpEsc.DateOp = DateTime.Now;
                        matchedOpEsc.IdU = idUser;
                        matchedOpEsc.AIOp = "Clôture";
                    }
                }

                dcAcc.SubmitChanges();

                //Calcul de la détention

                /*AH List<ELEMENT_FACTURATION> eltDetCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                            where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours armateur : Détention Ctr") || 
                                                            ef.LibEF.Contains("Débours armateur : TVA sur Détention")) && ef.StatutEF != "Annule"
                                                            select ef).ToList<ELEMENT_FACTURATION>();
                */
                List<ELEMENT_FACTURATION> eltDetCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                            where ef.IdCtr == idCtr && ef.CodeArticle=="1807" && ef.StatutEF != "Annule"
                                                            select ef).ToList<ELEMENT_FACTURATION>();

                dcAcc.ELEMENT_FACTURATION.DeleteAllOnSubmit(eltDetCalcules);

                dcAcc.SubmitChanges();

                DateTime dte = DateTime.Now;

                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

               /* ARTICLE articleDeboursArmDet = (from art in articles
                                                from par in parametres
                                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours armateur : Détention Conteneur"
                                                select art).FirstOrDefault<ARTICLE>(); */

                ARTICLE articleDeboursArmDet = (from art in articles  where art.CodeArticle == 1807
                                                select art).FirstOrDefault<ARTICLE>();

               LIGNE_PRIX lpDeboursArmDet = articleDeboursArmDet.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConteneur.TypeCCtr.Substring(0, 2) && lp.LP2 == matchedConteneur.ESCALE.IdArm.ToString() && lp.DDLP <= dte && lp.DFLP >= dte);
               /*AH plus utilise parceque article cree avec code tvati
               * 
               ARTICLE articleTVACpteTiers = (from art in articles
                                              from par in parametres
                                              where art.CodeArticle == par.CodeAF && par.NomAF == "TVA pour cpte de tiers"
                                              select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpTVACpteTiers = articleTVACpteTiers.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                */
               double derogation = (matchedConteneur.CONNAISSEMENT.BLIL == "Y" || matchedConteneur.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                if (matchedConteneur.PropCtr == 1)
                {
                    //calcul detention
                    ELEMENT_FACTURATION eltFactDeboursArmDet = new ELEMENT_FACTURATION();

                    eltFactDeboursArmDet.PUEF = lpDeboursArmDet.PU1LP;
                    eltFactDeboursArmDet.PUEFBase = lpDeboursArmDet.PU1LP;
                    eltFactDeboursArmDet.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmDet.CCArticleEx : ((articleDeboursArmDet.CodeTVA == "TVAAP" || articleDeboursArmDet.CodeTVA=="TVATI") ? articleDeboursArmDet.CCArticle : articleDeboursArmDet.CCArticleEx);
                    eltFactDeboursArmDet.CodeTVA = articleDeboursArmDet.CodeTVA;// "TVAEX";
                    eltFactDeboursArmDet.TauxTVA = articleDeboursArmDet.CODE_TVA.TauxTVA;
                    eltFactDeboursArmDet.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactDeboursArmDet.EltFacture = "Ctr";
                    eltFactDeboursArmDet.DateJEF = DateTime.Now;
                    eltFactDeboursArmDet.IdLP = lpDeboursArmDet.IdLP;
                    eltFactDeboursArmDet.QTEEF = dateRetour.Date < matchedConteneur.DSCtr.Value.Date.AddDays(matchedConteneur.NbDet.Value) ? 0 : (dateRetour - matchedConteneur.DSCtr.Value.Date.AddDays(matchedConteneur.NbDet.Value)).Days;
                    //AH Débours armateur : Détention
                    eltFactDeboursArmDet.LibEF =articleDeboursArmDet.LibArticle+" Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.DSCtr.Value.AddDays(1 + matchedConteneur.NbDet.Value).ToShortDateString() + " - " + matchedConteneur.DSCtr.Value.AddDays(matchedConteneur.NbDet.Value + (int)Math.Round(eltFactDeboursArmDet.QTEEF.Value, 0, MidpointRounding.AwayFromZero)).ToShortDateString();
                    eltFactDeboursArmDet.UnitEF = lpDeboursArmDet.UniteLP;
                    eltFactDeboursArmDet.PTDIT = 0;
                    eltFactDeboursArmDet.IdEsc = matchedConteneur.IdEsc;
                    eltFactDeboursArmDet.IdMan = matchedConteneur.IdMan;
                    eltFactDeboursArmDet.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                    eltFactDeboursArmDet.IdCtr = matchedConteneur.IdCtr;
                    eltFactDeboursArmDet.DestEF = "C";
                    eltFactDeboursArmDet.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmDet);

                   /* ELEMENT_FACTURATION eltFactDeboursArmDetTVA = new ELEMENT_FACTURATION();

                    eltFactDeboursArmDetTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmDet.PUEF.Value * eltFactDeboursArmDet.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                    eltFactDeboursArmDetTVA.PUEFBase = eltFactDeboursArmDetTVA.PUEF;
                    eltFactDeboursArmDetTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                    eltFactDeboursArmDetTVA.CodeTVA = articleDeboursArmDet.CodeTVA;// "TVAEX";
                    eltFactDeboursArmDetTVA.TauxTVA = articleDeboursArmDet.CodeTVA=="TVAEX" ? 0 : 19.25f;
                    eltFactDeboursArmDetTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactDeboursArmDetTVA.EltFacture = "Ctr";
                    eltFactDeboursArmDetTVA.LibEF = "Débours armateur : TVA sur Détention Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.DSCtr.Value.AddDays(1 + matchedConteneur.NbDet.Value).ToShortDateString() + " - " + matchedConteneur.DSCtr.Value.AddDays(matchedConteneur.NbDet.Value + (int)Math.Round(eltFactDeboursArmDet.QTEEF.Value, 0, MidpointRounding.AwayFromZero)).ToShortDateString();
                    eltFactDeboursArmDetTVA.DateJEF = DateTime.Now;
                    eltFactDeboursArmDetTVA.IdLP = lpTVACpteTiers.IdLP;
                    eltFactDeboursArmDetTVA.QTEEF = 1;
                    eltFactDeboursArmDetTVA.PTDIT = 0;
                    eltFactDeboursArmDetTVA.UnitEF = lpTVACpteTiers.UniteLP;
                    eltFactDeboursArmDetTVA.IdEsc = matchedConteneur.IdEsc;
                    eltFactDeboursArmDetTVA.IdMan = matchedConteneur.IdMan;
                    eltFactDeboursArmDetTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                    eltFactDeboursArmDetTVA.IdCtr = matchedConteneur.IdCtr;
                    eltFactDeboursArmDetTVA.DestEF = "C";
                    eltFactDeboursArmDetTVA.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmDetTVA);*/
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }
        }

        public CONTENEUR RetournerConteneurArmateur(int idCtr, List<TYPE_SINISTRE> listeSinistre, string observations, int idUser)
        {
            throw new ApplicationException("Cette action n'est plus autorisée");
            /*using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).FirstOrDefault<CONTENEUR>();

                var matchedConteneurTC = (from ctr in dcAcc.GetTable<CONTENEUR_TC>()
                                          where ctr.IdCtr == idCtr
                                          select ctr).FirstOrDefault<CONTENEUR_TC>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser,dcAcc)

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Conteneur : Enregistrement de l'opération de retour à l'armateur").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer une opération de retour d'un conteneur à l'armateur. Veuillez contacter un administrateur");
                }

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                if (matchedConteneurTC != null)
                {

                    if (matchedConteneurTC.StatutTC != "Retourné" && matchedConteneurTC.StatutTC != "Parqué" && matchedConteneurTC.StatutTC != "En réparation" && matchedConteneurTC.StatutTC != "En habillage")
                    {
                        throw new ApplicationException("Ce conteneur n'est pas présent dans le parc");
                    }

                    // inserer opération de retour
                    OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();
                    opCtr.IdCtr = idCtr;
                    opCtr.IdTypeOp = 284;
                    opCtr.DateOp = DateTime.Now;
                    opCtr.IdU = idUser;
                    opCtr.AIOp = observations;

                    dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);

                    matchedConteneur.StatCtr = "Retourné à l'armateur";

                    matchedConteneurTC.StatutTC = "Retourné à l'armateur";
                    matchedConteneurTC.DateRetourArmateur = DateTime.Now;
                    matchedConteneurTC.IdUserRetourArmateur = matchedUser.IdU;

                    MOUVEMENT_TC mvtTC = new MOUVEMENT_TC();

                    mvtTC.DateMvt = DateTime.Now;
                    mvtTC.IdBL = matchedConteneur.IdBL;
                    mvtTC.IdEsc = matchedConteneur.IdEsc;
                    mvtTC.IdParc = matchedConteneurTC.IdParcParquing;
                    mvtTC.IdTC = matchedConteneurTC.IdTC;
                    mvtTC.IdTypeOp = 284;
                    mvtTC.IdUser = matchedUser.IdU;

                    dcAcc.GetTable<MOUVEMENT_TC>().InsertOnSubmit(mvtTC);

                    var matchedOcccupation = (from occ in dcAcc.GetTable<OCCUPATION>()
                                              where (occ.IdCtr == matchedConteneurTC.IdCtr && !occ.DateFin.HasValue)
                                              select occ).FirstOrDefault<OCCUPATION>();

                    if (matchedOcccupation != null)
                    {
                        matchedOcccupation.DateFin = DateTime.Now;
                    }

                    foreach (TYPE_SINISTRE typeSin in listeSinistre)
                    {
                        var listInterchange = (from inter in dcAcc.GetTable<INTERCHANGE>()
                                               where inter.IdCtr == idCtr
                                               select inter).ToList<INTERCHANGE>();

                        listInterchange.FirstOrDefault<INTERCHANGE>(ctr => ctr.IdTypeSinistre == typeSin.IdTypeSinistre).InfoRetourArmateur = "Y";
                        dcAcc.INTERCHANGE.Context.SubmitChanges();
                    }

                    dcAcc.SubmitChanges();
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }*/
        }

        public CONTENEUR CalculerStationnementConteneur(int idCtr, DateTime dateFin, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).SingleOrDefault<CONTENEUR>();

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Conteneur : Calcul du stationnement").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour calculer le stationnement d'un conteneur. Veuillez contacter un administrateur");
                }

                var opIdentification = (from op in dcAcc.GetTable<OPERATION_CONTENEUR>()
                                        where op.IdTypeOp == 12 && op.IdCtr == idCtr
                                        select op).FirstOrDefault<OPERATION_CONTENEUR>();

                if (matchedConteneur.ESCALE.RAEsc != "Y")
                {
                    throw new FacturationException("Il n'est pas possible de facturer le stationnement sur ce conteneur, car le rôle Acconier n'est pas activé sur l'escale");
                }

                if (opIdentification == null)
                {
                    throw new IdentificationException("Vous ne pouvez pas calculer le stationnement sur ce conteneur s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                }

                DateTime dte = DateTime.Now;

                OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();

                opCtr.IdCtr = idCtr;
                opCtr.DateOp = dte;
                opCtr.IdTypeOp = 20;
                opCtr.AIOp = matchedConteneur.FFCtr.Value.AddDays(1).ToShortDateString() + " - " + dateFin.ToShortDateString(); ;
                opCtr.IdU = idUser;

                dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);

                DateTime finAncienStationnement = DateTime.Now;

                if (matchedConteneur.FSCtr.HasValue)
                {
                    finAncienStationnement = matchedConteneur.FSCtr.Value;
                }

                //DateTime finAncienSurest = finAncienStationnement.AddDays((double)Math.Abs((matchedConteneur.FFCtr.Value - matchedConteneur.FFSCtr.Value).Days));
                DateTime finAncienSurest = matchedConteneur.FSCtr.Value;

                matchedConteneur.FSCtr = dateFin;

                if (matchedConteneur.ESCALE.IdArm == 1)
                {
                    List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                    List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();


                    //if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                    //     where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours DIT : Stationnement") || ef.LibEF.Contains("Débours DIT : TVA sur Stationnement") || ef.LibEF.Contains("Débours armateur : Surestaries Ctr") || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries"))
                    //     select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                    //{
                    //    List<ELEMENT_FACTURATION> eltsStationnementCtr = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                    //                                                      where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours DIT : Stationnement") || ef.LibEF.Contains("Débours DIT : TVA sur Stationnement") || ef.LibEF.Contains("Débours armateur : Surestaries Ctr") || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries"))
                    //                                                      select ef).ToList<ELEMENT_FACTURATION>();

                    //    foreach (ELEMENT_FACTURATION elt in eltsStationnementCtr)
                    //    {
                    //        elt.StatutEF = "Annule";
                    //    }
                    //}

                    /* if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                         where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours armateur : Surestaries Ctr") 
                         || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries"))
                         select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                     */
                    if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                         where ef.IdCtr == idCtr && ef.CodeArticle=="1805" select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                    {
                        /*AH List<ELEMENT_FACTURATION> eltsStationnementCtr = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                          where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours armateur : Surestaries Ctr") 
                                                                          || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries"))
                                                                          select ef).ToList<ELEMENT_FACTURATION>();
                        */
                        List<ELEMENT_FACTURATION> eltsStationnementCtr = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                          where ef.IdCtr == idCtr && ef.CodeArticle=="1805"
                                                                          select ef).ToList<ELEMENT_FACTURATION>();

                        foreach (ELEMENT_FACTURATION elt in eltsStationnementCtr)
                        {
                            elt.StatutEF = "Annule";
                        }
                    }

                    //ARTICLE articleDeboursDITStatCtr = (from art in articles
                    //                                    from par in parametres
                    //                                    where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Stationnement Conteneur"
                    //                                    select art).FirstOrDefault<ARTICLE>();

                    //LIGNE_PRIX lpDeboursDITStatCtr = articleDeboursDITStatCtr.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConteneur.TypeCCtr.Substring(0, 2) && lp.DDLP <= dte && lp.DFLP >= dte);

                    //ARTICLE articleDeboursDITTVA = (from art in articles
                    //                                from par in parametres
                    //                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : TVA"
                    //                                select art).FirstOrDefault<ARTICLE>();

                    //LIGNE_PRIX lpDeboursDITTVA = articleDeboursDITTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                    /* ARTICLE articleDeboursArmSur = (from art in articles
                                                    from par in parametres
                                                    where art.CodeArticle == par.CodeAF && par.NomAF == "Débours armateur : Surestaries Conteneur"
                                                    select art).FirstOrDefault<ARTICLE>();
                    */
                    ARTICLE articleDeboursArmSur = (from art in articles  where art.CodeArticle == 1805
                                                    select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpDeboursArmSur = articleDeboursArmSur.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConteneur.TypeCCtr.Substring(0, 2) && lp.LP2 == matchedConteneur.ESCALE.IdArm.ToString() && lp.DDLP <= dte && lp.DFLP >= dte);

                    /*AH plus utilisé parceque article deja codifier avec code tvati
                     * ARTICLE articleTVACpteTiers = (from art in articles
                                                   from par in parametres
                                                   where art.CodeArticle == par.CodeAF && par.NomAF == "TVA pour cpte de tiers"
                                                   select art).FirstOrDefault<ARTICLE>();

                    LIGNE_PRIX lpTVACpteTiers = articleTVACpteTiers.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                    */
                    double derogation = (matchedConteneur.CONNAISSEMENT.BLIL == "Y" || matchedConteneur.CONNAISSEMENT.BLGN == "Y") ? 0.25 : 0;

                    /*AH bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                          where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours DIT : Stationnement") 
                                          || ef.LibEF.Contains("Débours DIT : TVA sur Stationnement") 
                                          || ef.LibEF.Contains("Débours armateur : Surestaries Ctr") 
                                          || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries")) 
                                          && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                          select ef).ToList<ELEMENT_FACTURATION>().Count != 0;*/

                    bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                          where ef.IdCtr == idCtr && ( ef.CodeArticle=="1406" 
                                          || ef.CodeArticle == "1805")
                                          && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                          select ef).ToList<ELEMENT_FACTURATION>().Count != 0;

                    if (!isEltsNotFree)
                    {
                        if (matchedConteneur.PropCtr == 1)
                        {
                            // Calcul des surestaries
                            if ((dateFin - matchedConteneur.FFCtr.Value).Days <= 10)
                            {
                                ELEMENT_FACTURATION eltFactDeboursArmSur = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSur.PUEF = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSur.PUEFBase = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSur.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP" || articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                                eltFactDeboursArmSur.CodeTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? "TVAEX": articleDeboursArmSur.CodeTVA;
                                eltFactDeboursArmSur.TauxTVA =  matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0 : articleDeboursArmSur.CODE_TVA.TauxTVA;
                                eltFactDeboursArmSur.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSur.EltFacture = "Ctr";
                                //AH Débours armateur : Surestaries 
                                eltFactDeboursArmSur.LibEF =articleDeboursArmSur.LibArticle+ " Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFCtr.Value.AddDays((dateFin - matchedConteneur.FFCtr.Value).Days).ToShortDateString();
                                eltFactDeboursArmSur.DateJEF = DateTime.Now;
                                eltFactDeboursArmSur.IdLP = lpDeboursArmSur.IdLP;
                                eltFactDeboursArmSur.QTEEF = dateFin.Date < matchedConteneur.FFCtr.Value ? 0 : (dateFin - matchedConteneur.FFCtr.Value).Days;
                                eltFactDeboursArmSur.UnitEF = lpDeboursArmSur.UniteLP;
                                eltFactDeboursArmSur.PTDIT = 0;
                                eltFactDeboursArmSur.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSur.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSur.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSur.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSur.DestEF = "C";
                                eltFactDeboursArmSur.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSur);

                               /* ELEMENT_FACTURATION eltFactDeboursArmSurTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.PUEFBase = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursArmSurTVA.CodeTVA = "TVAEX";
                                eltFactDeboursArmSurTVA.TauxTVA = 0;
                                eltFactDeboursArmSurTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurTVA.EltFacture = "Ctr";
                                eltFactDeboursArmSurTVA.LibEF = "Débours armateur : TVA sur Surestaries Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFCtr.Value.AddDays((dateFin - matchedConteneur.FFCtr.Value).Days).ToShortDateString();
                                eltFactDeboursArmSurTVA.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursArmSurTVA.QTEEF = 1;
                                eltFactDeboursArmSurTVA.PTDIT = 0;
                                eltFactDeboursArmSurTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursArmSurTVA.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurTVA.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurTVA.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurTVA.DestEF = "C";
                                eltFactDeboursArmSurTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurTVA);*/
                            }
                            else
                            {
                                ELEMENT_FACTURATION eltFactDeboursArmSurN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurN1.PUEF = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSurN1.PUEFBase = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSurN1.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP" || articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                                eltFactDeboursArmSurN1.CodeTVA =matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" :  articleDeboursArmSur.CodeTVA;// "TVAEX";
                                eltFactDeboursArmSurN1.TauxTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0: articleDeboursArmSur.CODE_TVA.TauxTVA;
                                eltFactDeboursArmSurN1.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurN1.EltFacture = "Ctr";
                                //AH Débours armateur : Surestaries
                                eltFactDeboursArmSurN1.LibEF =articleDeboursArmSur.LibArticle+ " Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFCtr.Value.AddDays(10).ToShortDateString();
                                eltFactDeboursArmSurN1.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurN1.IdLP = lpDeboursArmSur.IdLP;
                                eltFactDeboursArmSurN1.QTEEF = 10;
                                eltFactDeboursArmSurN1.PTDIT = 0;
                                eltFactDeboursArmSurN1.UnitEF = lpDeboursArmSur.UniteLP;
                                eltFactDeboursArmSurN1.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurN1.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurN1.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurN1.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurN1.DestEF = "C";
                                eltFactDeboursArmSurN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurN1);

                                ELEMENT_FACTURATION eltFactDeboursArmSurN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurN2.PUEF = lpDeboursArmSur.PU2LP;
                                eltFactDeboursArmSurN2.PUEFBase = lpDeboursArmSur.PU2LP;
                                eltFactDeboursArmSurN2.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP"|| articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                                eltFactDeboursArmSurN2.CodeTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" :  articleDeboursArmSur.CodeTVA; //"TVAEX";
                                eltFactDeboursArmSurN2.TauxTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0 : articleDeboursArmSur.CODE_TVA.TauxTVA;
                                eltFactDeboursArmSurN2.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurN2.EltFacture = "Ctr";
                                eltFactDeboursArmSurN2.QTEEF = (dateFin - matchedConteneur.FFCtr.Value).Days - 10;
                                //AH Débours armateur : Surestaries
                                eltFactDeboursArmSurN2.LibEF =articleDeboursArmSur.LibArticle+ " Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFCtr.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConteneur.FFCtr.Value.AddDays((dateFin - matchedConteneur.FFCtr.Value).Days).ToShortDateString();
                                eltFactDeboursArmSurN2.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurN2.IdLP = lpDeboursArmSur.IdLP;
                                eltFactDeboursArmSurN2.PTDIT = 0;
                                eltFactDeboursArmSurN2.UnitEF = lpDeboursArmSur.UniteLP;
                                eltFactDeboursArmSurN2.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurN2.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurN2.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurN2.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurN2.DestEF = "C";
                                eltFactDeboursArmSurN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurN2);

                                /*ELEMENT_FACTURATION eltFactDeboursArmSurTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursArmSurN1.PUEF.Value * eltFactDeboursArmSurN1.QTEEF.Value + eltFactDeboursArmSurN2.PUEF.Value * eltFactDeboursArmSurN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.PUEFBase = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursArmSurN1.PUEF.Value * eltFactDeboursArmSurN1.QTEEF.Value + eltFactDeboursArmSurN2.PUEF.Value * eltFactDeboursArmSurN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursArmSurTVA.CodeTVA = "TVAEX";
                                eltFactDeboursArmSurTVA.TauxTVA = 0;
                                eltFactDeboursArmSurTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurTVA.EltFacture = "Ctr";
                                eltFactDeboursArmSurTVA.LibEF = "Débours armateur : TVA sur Surestaries Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFCtr.Value.AddDays((dateFin - matchedConteneur.FFCtr.Value).Days).ToShortDateString();
                                eltFactDeboursArmSurTVA.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursArmSurTVA.QTEEF = 1;
                                eltFactDeboursArmSurTVA.PTDIT = 0;
                                eltFactDeboursArmSurTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursArmSurTVA.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurTVA.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurTVA.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurTVA.DestEF = "C";
                                eltFactDeboursArmSurTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurTVA);*/
                            }
                        }

                        #region fake commented hassana
                        //// Calcul du stationnement
                        ////if ((dateFin - matchedConteneur.FFSCtr.Value).Days <= 9)
                        //if (Weekdays(matchedConteneur.FFSCtr.Value, dateFin) <= 9)
                        //{
                        //    ELEMENT_FACTURATION eltFactStatCtr = new ELEMENT_FACTURATION();

                        //    eltFactStatCtr.PUEF = lpDeboursDITStatCtr.PU1LP - lpDeboursDITStatCtr.PU1LP * derogation;
                        //    eltFactStatCtr.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtr.CodeTVA = "TVAEX";
                        //    eltFactStatCtr.TauxTVA = 0;
                        //    eltFactStatCtr.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtr.EltFacture = "Ctr";
                        //    eltFactStatCtr.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtr.DateJEF = DateTime.Now;
                        //    eltFactStatCtr.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    //eltFactStatCtr.QTEEF = dateFin.Date <= matchedConteneur.FFSCtr.Value ? 0 : (dateFin.Date - matchedConteneur.FFSCtr.Value).Days;
                        //    eltFactStatCtr.QTEEF = dateFin.Date <= matchedConteneur.FFSCtr.Value ? 0 : Weekdays(matchedConteneur.FFSCtr.Value, dateFin);
                        //    eltFactStatCtr.PTDIT = eltFactStatCtr.PUEF * eltFactStatCtr.QTEEF;
                        //    eltFactStatCtr.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtr.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtr.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtr.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtr.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtr.DestEF = "C";
                        //    eltFactStatCtr.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtr);

                        //    ELEMENT_FACTURATION eltFactDeboursDITTVA = new ELEMENT_FACTURATION();

                        //    eltFactDeboursDITTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? eltFactStatCtr.PUEF * eltFactStatCtr.QTEEF * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100) : 0;
                        //    eltFactDeboursDITTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITTVA.CCArticleEx : (articleDeboursDITTVA.CodeTVA == "TVAAP" ? articleDeboursDITTVA.CCArticle : articleDeboursDITTVA.CCArticleEx);
                        //    eltFactDeboursDITTVA.CodeTVA = "TVAEX";
                        //    eltFactDeboursDITTVA.TauxTVA = 0;
                        //    eltFactDeboursDITTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactDeboursDITTVA.EltFacture = "Ctr";
                        //    eltFactDeboursDITTVA.LibEF = "Débours DIT : TVA sur Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactDeboursDITTVA.DateJEF = DateTime.Now;
                        //    eltFactDeboursDITTVA.IdLP = lpDeboursDITTVA.IdLP;
                        //    eltFactDeboursDITTVA.QTEEF = 1;
                        //    eltFactDeboursDITTVA.PTDIT = eltFactDeboursDITTVA.PUEF * eltFactDeboursDITTVA.QTEEF;
                        //    eltFactDeboursDITTVA.UnitEF = lpDeboursDITTVA.UniteLP;
                        //    eltFactDeboursDITTVA.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactDeboursDITTVA.IdMan = matchedConteneur.IdMan;
                        //    eltFactDeboursDITTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactDeboursDITTVA.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactDeboursDITTVA.DestEF = "C";
                        //    eltFactDeboursDITTVA.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDITTVA);
                        //}
                        ////else if ((dateFin - matchedConteneur.FFSCtr.Value).Days <= 9 + 20)
                        //else if (Weekdays(matchedConteneur.FFSCtr.Value, dateFin) <= 9 + 20)
                        //{
                        //    ELEMENT_FACTURATION eltFactStatCtrN1 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN1.PUEF = lpDeboursDITStatCtr.PU1LP - lpDeboursDITStatCtr.PU1LP * derogation;
                        //    eltFactStatCtrN1.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN1.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN1.TauxTVA = 0;
                        //    eltFactStatCtrN1.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN1.EltFacture = "Ctr";
                        //    //eltFactStatCtrN1.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9).ToShortDateString();
                        //    eltFactStatCtrN1.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9 + 9 - Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), matchedConteneur.FFSCtr.Value.AddDays(9))).ToShortDateString();
                        //    eltFactStatCtrN1.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN1.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    eltFactStatCtrN1.QTEEF = 9;
                        //    eltFactStatCtrN1.PTDIT = eltFactStatCtrN1.PUEF * eltFactStatCtrN1.QTEEF;
                        //    eltFactStatCtrN1.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN1.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN1.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN1.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN1.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN1.DestEF = "C";
                        //    eltFactStatCtrN1.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN1);

                        //    ELEMENT_FACTURATION eltFactStatCtrN2 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN2.PUEF = lpDeboursDITStatCtr.PU2LP - lpDeboursDITStatCtr.PU2LP * derogation;
                        //    eltFactStatCtrN2.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN2.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN2.TauxTVA = 0;
                        //    eltFactStatCtrN2.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN2.EltFacture = "Ctr";
                        //    //eltFactStatCtrN2.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtrN2.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9 + 9 - Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), matchedConteneur.FFSCtr.Value.AddDays(9))).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtrN2.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN2.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    //eltFactStatCtrN2.QTEEF = (dateFin.Date - matchedConteneur.FFSCtr.Value).Days - 9;
                        //    eltFactStatCtrN2.QTEEF = Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), dateFin) - 9;
                        //    eltFactStatCtrN2.PTDIT = eltFactStatCtrN2.PUEF * eltFactStatCtrN2.QTEEF;
                        //    eltFactStatCtrN2.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN2.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN2.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN2.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN2.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN2.DestEF = "C";
                        //    eltFactStatCtrN2.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN2);

                        //    ELEMENT_FACTURATION eltFactDeboursDITTVA = new ELEMENT_FACTURATION();

                        //    eltFactDeboursDITTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? (eltFactStatCtrN1.PUEF * eltFactStatCtrN1.QTEEF + eltFactStatCtrN2.PUEF + eltFactStatCtrN2.QTEEF) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100) : 0;
                        //    eltFactDeboursDITTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITTVA.CCArticleEx : (articleDeboursDITTVA.CodeTVA == "TVAAP" ? articleDeboursDITTVA.CCArticle : articleDeboursDITTVA.CCArticleEx);
                        //    eltFactDeboursDITTVA.CodeTVA = "TVAEX";
                        //    eltFactDeboursDITTVA.TauxTVA = 0;
                        //    eltFactDeboursDITTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactDeboursDITTVA.EltFacture = "Ctr";
                        //    eltFactDeboursDITTVA.LibEF = "Débours DIT : TVA sur Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactDeboursDITTVA.DateJEF = DateTime.Now;
                        //    eltFactDeboursDITTVA.IdLP = lpDeboursDITTVA.IdLP;
                        //    eltFactDeboursDITTVA.QTEEF = 1;
                        //    eltFactDeboursDITTVA.PTDIT = eltFactDeboursDITTVA.PUEF * eltFactDeboursDITTVA.QTEEF;
                        //    eltFactDeboursDITTVA.UnitEF = lpDeboursDITTVA.UniteLP;
                        //    eltFactDeboursDITTVA.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactDeboursDITTVA.IdMan = matchedConteneur.IdMan;
                        //    eltFactDeboursDITTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactDeboursDITTVA.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactDeboursDITTVA.DestEF = "C";
                        //    eltFactDeboursDITTVA.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDITTVA);
                        //}
                        ////else if ((dateFin - matchedConteneur.FFSCtr.Value).Days <= 9 + 20 + 30)
                        //else if (Weekdays(matchedConteneur.FFSCtr.Value, dateFin) <= 9 + 20 + 30)
                        //{
                        //    ELEMENT_FACTURATION eltFactStatCtrN1 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN1.PUEF = lpDeboursDITStatCtr.PU1LP - lpDeboursDITStatCtr.PU1LP * derogation;
                        //    eltFactStatCtrN1.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN1.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN1.TauxTVA = 0;
                        //    eltFactStatCtrN1.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN1.EltFacture = "Ctr";
                        //    //eltFactStatCtrN1.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9).ToShortDateString();
                        //    eltFactStatCtrN1.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9 + 9 - Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), matchedConteneur.FFSCtr.Value.AddDays(9))).ToShortDateString();
                        //    eltFactStatCtrN1.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN1.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    eltFactStatCtrN1.QTEEF = 9;
                        //    eltFactStatCtrN1.PTDIT = eltFactStatCtrN1.PUEF * eltFactStatCtrN1.QTEEF;
                        //    eltFactStatCtrN1.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN1.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN1.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN1.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN1.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN1.DestEF = "C";
                        //    eltFactStatCtrN1.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN1);

                        //    DateTime dateFinN1 = matchedConteneur.FFSCtr.Value.AddDays(9 + 9 - Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), matchedConteneur.FFSCtr.Value.AddDays(9)));

                        //    ELEMENT_FACTURATION eltFactStatCtrN2 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN2.PUEF = lpDeboursDITStatCtr.PU2LP - lpDeboursDITStatCtr.PU2LP * derogation;
                        //    eltFactStatCtrN2.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN2.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN2.TauxTVA = 0;
                        //    eltFactStatCtrN2.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN2.EltFacture = "Ctr";
                        //    //eltFactStatCtrN2.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9 + 20).ToShortDateString();
                        //    eltFactStatCtrN2.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + dateFinN1.AddDays(1).ToShortDateString() + " - " + dateFinN1.AddDays(1 + 20 + 20 - Weekdays(dateFinN1.AddDays(1), dateFinN1.AddDays(20))).ToShortDateString();
                        //    eltFactStatCtrN2.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN2.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    eltFactStatCtrN2.QTEEF = 20;
                        //    eltFactStatCtrN2.PTDIT = eltFactStatCtrN2.PUEF * eltFactStatCtrN2.QTEEF;
                        //    eltFactStatCtrN2.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN2.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN2.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN2.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN2.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN2.DestEF = "C";
                        //    eltFactStatCtrN2.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN2);

                        //    DateTime dateFinN2 = dateFinN1.AddDays(1 + 20 + 20 - Weekdays(dateFinN1.AddDays(1), dateFinN1.AddDays(20)));

                        //    ELEMENT_FACTURATION eltFactStatCtrN3 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN3.PUEF = lpDeboursDITStatCtr.PU3LP - lpDeboursDITStatCtr.PU3LP * derogation;
                        //    eltFactStatCtrN3.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN3.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN3.TauxTVA = 0;
                        //    eltFactStatCtrN3.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN3.EltFacture = "Ctr";
                        //    //eltFactStatCtrN3.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtrN3.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + dateFinN2.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtrN3.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN3.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    //eltFactStatCtrN3.QTEEF = (dateFin.Date - matchedConteneur.FFSCtr.Value).Days - 9 - 20;
                        //    eltFactStatCtrN3.QTEEF = Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), dateFin) - 9 - 20;
                        //    eltFactStatCtrN3.PTDIT = eltFactStatCtrN3.PUEF * eltFactStatCtrN3.QTEEF;
                        //    eltFactStatCtrN3.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN3.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN3.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN3.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN3.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN3.DestEF = "C";
                        //    eltFactStatCtrN3.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN3);

                        //    ELEMENT_FACTURATION eltFactDeboursDITTVA = new ELEMENT_FACTURATION();

                        //    eltFactDeboursDITTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? (eltFactStatCtrN1.PUEF * eltFactStatCtrN1.QTEEF + eltFactStatCtrN2.PUEF + eltFactStatCtrN2.QTEEF + eltFactStatCtrN3.PUEF + eltFactStatCtrN3.QTEEF) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100) : 0;
                        //    eltFactDeboursDITTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITTVA.CCArticleEx : (articleDeboursDITTVA.CodeTVA == "TVAAP" ? articleDeboursDITTVA.CCArticle : articleDeboursDITTVA.CCArticleEx);
                        //    eltFactDeboursDITTVA.CodeTVA = "TVAEX";
                        //    eltFactDeboursDITTVA.TauxTVA = 0;
                        //    eltFactDeboursDITTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactDeboursDITTVA.EltFacture = "Ctr";
                        //    eltFactDeboursDITTVA.LibEF = "Débours DIT : TVA sur Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactDeboursDITTVA.DateJEF = DateTime.Now;
                        //    eltFactDeboursDITTVA.IdLP = lpDeboursDITTVA.IdLP;
                        //    eltFactDeboursDITTVA.QTEEF = 1;
                        //    eltFactDeboursDITTVA.PTDIT = eltFactDeboursDITTVA.PUEF * eltFactDeboursDITTVA.QTEEF;
                        //    eltFactDeboursDITTVA.UnitEF = lpDeboursDITTVA.UniteLP;
                        //    eltFactDeboursDITTVA.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactDeboursDITTVA.IdMan = matchedConteneur.IdMan;
                        //    eltFactDeboursDITTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactDeboursDITTVA.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactDeboursDITTVA.DestEF = "C";
                        //    eltFactDeboursDITTVA.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDITTVA);
                        //}
                        //else if (Weekdays(matchedConteneur.FFSCtr.Value, dateFin) > 9 + 20 + 30)
                        //{
                        //    ELEMENT_FACTURATION eltFactStatCtrN1 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN1.PUEF = lpDeboursDITStatCtr.PU1LP - lpDeboursDITStatCtr.PU1LP * derogation;
                        //    eltFactStatCtrN1.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN1.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN1.TauxTVA = 0;
                        //    eltFactStatCtrN1.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN1.EltFacture = "Ctr";
                        //    //eltFactStatCtrN1.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9).ToShortDateString();
                        //    eltFactStatCtrN1.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9 + 9 - Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), matchedConteneur.FFSCtr.Value.AddDays(9))).ToShortDateString();
                        //    eltFactStatCtrN1.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN1.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    eltFactStatCtrN1.QTEEF = 9;
                        //    eltFactStatCtrN1.PTDIT = eltFactStatCtrN1.PUEF * eltFactStatCtrN1.QTEEF;
                        //    eltFactStatCtrN1.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN1.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN1.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN1.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN1.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN1.DestEF = "C";
                        //    eltFactStatCtrN1.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN1);

                        //    DateTime dateFinN1 = matchedConteneur.FFSCtr.Value.AddDays(9 + 9 - Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), matchedConteneur.FFSCtr.Value.AddDays(9)));

                        //    ELEMENT_FACTURATION eltFactStatCtrN2 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN2.PUEF = lpDeboursDITStatCtr.PU2LP - lpDeboursDITStatCtr.PU2LP * derogation;
                        //    eltFactStatCtrN2.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN2.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN2.TauxTVA = 0;
                        //    eltFactStatCtrN2.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN2.EltFacture = "Ctr";
                        //    //eltFactStatCtrN2.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9 + 20).ToShortDateString();
                        //    eltFactStatCtrN2.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + dateFinN1.AddDays(1).ToShortDateString() + " - " + dateFinN1.AddDays(1 + 20 + 20 - Weekdays(dateFinN1.AddDays(1), dateFinN1.AddDays(20))).ToShortDateString();
                        //    eltFactStatCtrN2.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN2.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    eltFactStatCtrN2.QTEEF = 20;
                        //    eltFactStatCtrN2.PTDIT = eltFactStatCtrN2.PUEF * eltFactStatCtrN2.QTEEF;
                        //    eltFactStatCtrN2.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN2.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN2.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN2.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN2.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN2.DestEF = "C";
                        //    eltFactStatCtrN2.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN2);

                        //    DateTime dateFinN2 = dateFinN1.AddDays(1 + 20 + 20 - Weekdays(dateFinN1.AddDays(1), dateFinN1.AddDays(20)));

                        //    ELEMENT_FACTURATION eltFactStatCtrN3 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN3.PUEF = lpDeboursDITStatCtr.PU3LP - lpDeboursDITStatCtr.PU3LP * derogation;
                        //    eltFactStatCtrN3.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN3.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN3.TauxTVA = 0;
                        //    eltFactStatCtrN3.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN3.EltFacture = "Ctr";
                        //    //eltFactStatCtrN3.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9 + 20).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays(9 + 20 + 30).ToShortDateString();
                        //    eltFactStatCtrN3.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + dateFinN2.AddDays(1).ToShortDateString() + " - " + dateFinN2.AddDays(2 + 1 + 30 + 30 - Weekdays(dateFinN2.AddDays(1), dateFinN2.AddDays(30))).ToShortDateString();
                        //    eltFactStatCtrN3.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN3.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    eltFactStatCtrN3.QTEEF = 30;
                        //    eltFactStatCtrN3.PTDIT = eltFactStatCtrN3.PUEF * eltFactStatCtrN3.QTEEF;
                        //    eltFactStatCtrN3.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN3.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN3.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN3.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN3.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN3.DestEF = "C";
                        //    eltFactStatCtrN3.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN3);

                        //    DateTime dateFinN3 = dateFinN2.AddDays(2 + 1 + 30 + 30 - Weekdays(dateFinN2.AddDays(1), dateFinN2.AddDays(30)));

                        //    ELEMENT_FACTURATION eltFactStatCtrN4 = new ELEMENT_FACTURATION();

                        //    eltFactStatCtrN4.PUEF = lpDeboursDITStatCtr.PU4LP - lpDeboursDITStatCtr.PU4LP * derogation;
                        //    eltFactStatCtrN4.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITStatCtr.CCArticleEx : (articleDeboursDITStatCtr.CodeTVA == "TVAAP" ? articleDeboursDITStatCtr.CCArticle : articleDeboursDITStatCtr.CCArticleEx);
                        //    eltFactStatCtrN4.CodeTVA = "TVAEX";
                        //    eltFactStatCtrN4.TauxTVA = 0;
                        //    eltFactStatCtrN4.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactStatCtrN4.EltFacture = "Ctr";
                        //    //eltFactStatCtrN4.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1 + 9 + 20 + 30).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtrN4.LibEF = "Débours DIT : Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + dateFinN3.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactStatCtrN4.DateJEF = DateTime.Now;
                        //    eltFactStatCtrN4.IdLP = lpDeboursDITStatCtr.IdLP;
                        //    //eltFactStatCtrN4.QTEEF = (dateFin.Date - matchedConteneur.FFSCtr.Value).Days - 9 - 20 - 30;
                        //    eltFactStatCtrN4.QTEEF = Weekdays(matchedConteneur.FFSCtr.Value.AddDays(1), dateFin) - 9 - 20 - 30;
                        //    eltFactStatCtrN4.PTDIT = eltFactStatCtrN4.PUEF * eltFactStatCtrN4.QTEEF;
                        //    eltFactStatCtrN4.UnitEF = lpDeboursDITStatCtr.UniteLP;
                        //    eltFactStatCtrN4.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactStatCtrN4.IdMan = matchedConteneur.IdMan;
                        //    eltFactStatCtrN4.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactStatCtrN4.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactStatCtrN4.DestEF = "C";
                        //    eltFactStatCtrN4.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactStatCtrN4);

                        //    ELEMENT_FACTURATION eltFactDeboursDITTVA = new ELEMENT_FACTURATION();

                        //    eltFactDeboursDITTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? (eltFactStatCtrN1.PUEF * eltFactStatCtrN1.QTEEF + eltFactStatCtrN2.PUEF + eltFactStatCtrN2.QTEEF + eltFactStatCtrN3.PUEF + eltFactStatCtrN3.QTEEF + eltFactStatCtrN4.PUEF + eltFactStatCtrN4.QTEEF) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100) : 0;
                        //    eltFactDeboursDITTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITTVA.CCArticleEx : (articleDeboursDITTVA.CodeTVA == "TVAAP" ? articleDeboursDITTVA.CCArticle : articleDeboursDITTVA.CCArticleEx);
                        //    eltFactDeboursDITTVA.CodeTVA = "TVAEX";
                        //    eltFactDeboursDITTVA.TauxTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0 : (articleDeboursDITTVA.CodeTVA == "TVAAP" ? lpDeboursDITTVA.ARTICLE.CODE_TVA.TauxTVA : 0);
                        //    eltFactDeboursDITTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                        //    eltFactDeboursDITTVA.EltFacture = "Ctr";
                        //    eltFactDeboursDITTVA.LibEF = "Débours DIT : TVA sur Stationnement Ctr N° " + matchedConteneur.NumCtr + " : " + matchedConteneur.FFSCtr.Value.AddDays(1).ToShortDateString() + " - " + matchedConteneur.FFSCtr.Value.AddDays((dateFin - matchedConteneur.FFSCtr.Value).Days).ToShortDateString();
                        //    eltFactDeboursDITTVA.DateJEF = DateTime.Now;
                        //    eltFactDeboursDITTVA.IdLP = lpDeboursDITTVA.IdLP;
                        //    eltFactDeboursDITTVA.QTEEF = 1;
                        //    eltFactDeboursDITTVA.PTDIT = eltFactDeboursDITTVA.PUEF * eltFactDeboursDITTVA.QTEEF;
                        //    eltFactDeboursDITTVA.UnitEF = lpDeboursDITTVA.UniteLP;
                        //    eltFactDeboursDITTVA.IdEsc = matchedConteneur.IdEsc;
                        //    eltFactDeboursDITTVA.IdMan = matchedConteneur.IdMan;
                        //    eltFactDeboursDITTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                        //    eltFactDeboursDITTVA.IdCtr = matchedConteneur.IdCtr;
                        //    eltFactDeboursDITTVA.DestEF = "C";
                        //    eltFactDeboursDITTVA.StatutEF = "En cours";

                        //    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDITTVA);
                        //} 
                        #endregion
                    }
                    else
                    {
                        if (matchedConteneur.PropCtr == 1)
                        {
                           /*AH List<ELEMENT_FACTURATION> eltSurestCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                           where ef.IdCtr == idCtr && (ef.LibEF.Contains("Débours armateur : Surestaries")) && ef.StatutEF != "Annule"
                                                                           select ef).ToList<ELEMENT_FACTURATION>();*/

                            List<ELEMENT_FACTURATION> eltSurestCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                           where ef.IdCtr == idCtr && ef.CodeArticle=="1805" && ef.StatutEF != "Annule"
                                                                           select ef).ToList<ELEMENT_FACTURATION>();
                            // Calcul des surestaries
                            if ((dateFin - matchedConteneur.FFCtr.Value).Days <= 10)
                            {
                                ELEMENT_FACTURATION eltFactDeboursArmSur = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSur.PUEF = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSur.PUEFBase = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSur.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP" || articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                                eltFactDeboursArmSur.CodeTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" :  articleDeboursArmSur.CodeTVA;// "TVAEX";
                                eltFactDeboursArmSur.TauxTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0 :  articleDeboursArmSur.CODE_TVA.TauxTVA;
                                eltFactDeboursArmSur.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSur.EltFacture = "Ctr";
                                eltFactDeboursArmSur.DateJEF = DateTime.Now;
                                eltFactDeboursArmSur.IdLP = lpDeboursArmSur.IdLP;
                                eltFactDeboursArmSur.QTEEF = dateFin.Date < matchedConteneur.FFCtr.Value ? 0 : (eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU1LP).Sum(el => el.QTEEF) < 10) ? (dateFin - matchedConteneur.FFCtr.Value).Days - eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU1LP).Sum(el => el.QTEEF) : 0;
                                //AH Débours armateur : Surestaries
                                eltFactDeboursArmSur.LibEF =articleDeboursArmSur.LibArticle+ " Ctr N° " + matchedConteneur.NumCtr + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactDeboursArmSur.QTEEF)).ToShortDateString();
                                eltFactDeboursArmSur.UnitEF = lpDeboursArmSur.UniteLP;
                                eltFactDeboursArmSur.PTDIT = 0;
                                eltFactDeboursArmSur.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSur.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSur.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSur.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSur.DestEF = "C";
                                eltFactDeboursArmSur.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSur);

                               /* ELEMENT_FACTURATION eltFactDeboursArmSurTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.PUEFBase = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursArmSurTVA.CodeTVA = "TVAEX";
                                eltFactDeboursArmSurTVA.TauxTVA = 0;
                                eltFactDeboursArmSurTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurTVA.EltFacture = "Ctr";
                                eltFactDeboursArmSurTVA.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursArmSurTVA.QTEEF = 1;
                                eltFactDeboursArmSurTVA.LibEF = "Débours armateur : TVA sur Surestaries Ctr N° " + matchedConteneur.NumCtr + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactDeboursArmSur.QTEEF)).ToShortDateString();
                                eltFactDeboursArmSurTVA.PTDIT = 0;
                                eltFactDeboursArmSurTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursArmSurTVA.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurTVA.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurTVA.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurTVA.DestEF = "C";
                                eltFactDeboursArmSurTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurTVA);*/
                            }
                            else
                            {
                                ELEMENT_FACTURATION eltFactDeboursArmSurN1 = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurN1.PUEF = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSurN1.PUEFBase = lpDeboursArmSur.PU1LP;
                                eltFactDeboursArmSurN1.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP" || articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                                eltFactDeboursArmSurN1.CodeTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : articleDeboursArmSur.CodeTVA;// "TVAEX";
                                eltFactDeboursArmSurN1.TauxTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0 : articleDeboursArmSur.CODE_TVA.TauxTVA;
                                eltFactDeboursArmSurN1.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurN1.EltFacture = "Ctr";
                                eltFactDeboursArmSurN1.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurN1.IdLP = lpDeboursArmSur.IdLP;
                                eltFactDeboursArmSurN1.QTEEF = (eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU1LP).Sum(el => el.QTEEF) < 10) ? 10 - eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU1LP).Sum(el => el.QTEEF) : 0;
                                //AH Débours armateur : Surestaries
                                eltFactDeboursArmSurN1.LibEF =articleDeboursArmSur.LibArticle+ " Ctr N° " + matchedConteneur.NumCtr + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactDeboursArmSurN1.QTEEF)).ToShortDateString();
                                eltFactDeboursArmSurN1.PTDIT = 0;
                                eltFactDeboursArmSurN1.UnitEF = lpDeboursArmSur.UniteLP;
                                eltFactDeboursArmSurN1.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurN1.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurN1.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurN1.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurN1.DestEF = "C";
                                eltFactDeboursArmSurN1.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurN1);

                                ELEMENT_FACTURATION eltFactDeboursArmSurN2 = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurN2.PUEF = lpDeboursArmSur.PU2LP;
                                eltFactDeboursArmSurN2.PUEFBase = lpDeboursArmSur.PU2LP;
                                eltFactDeboursArmSurN2.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP" || articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                                eltFactDeboursArmSurN2.CodeTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : articleDeboursArmSur.CodeTVA;// "TVAEX";
                                eltFactDeboursArmSurN2.TauxTVA = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? 0: articleDeboursArmSur.CODE_TVA.TauxTVA;
                                eltFactDeboursArmSurN2.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurN2.EltFacture = "Ctr";
                                eltFactDeboursArmSurN2.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurN2.IdLP = lpDeboursArmSur.IdLP;
                                eltFactDeboursArmSurN2.QTEEF = (dateFin.Date - matchedConteneur.FFCtr.Value).Days - eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU2LP).Sum(el => el.QTEEF) - eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU1LP).Sum(el => el.QTEEF) - eltFactDeboursArmSurN1.QTEEF;
                                //AH Débours armateur : Surestaries
                                eltFactDeboursArmSurN2.LibEF =articleDeboursArmSur.LibArticle+ " Ctr N° " + matchedConteneur.NumCtr + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactDeboursArmSurN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactDeboursArmSurN1.QTEEF + eltFactDeboursArmSurN2.QTEEF)).ToShortDateString();
                                eltFactDeboursArmSurN2.PTDIT = 0;
                                eltFactDeboursArmSurN2.UnitEF = lpDeboursArmSur.UniteLP;
                                eltFactDeboursArmSurN2.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurN2.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurN2.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurN2.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurN2.DestEF = "C";
                                eltFactDeboursArmSurN2.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurN2);

                                /*ELEMENT_FACTURATION eltFactDeboursArmSurTVA = new ELEMENT_FACTURATION();

                                eltFactDeboursArmSurTVA.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursArmSurN1.PUEF.Value * eltFactDeboursArmSurN1.QTEEF.Value + eltFactDeboursArmSurN2.PUEF.Value * eltFactDeboursArmSurN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.PUEFBase = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? Math.Round((eltFactDeboursArmSurN1.PUEF.Value * eltFactDeboursArmSurN1.QTEEF.Value + eltFactDeboursArmSurN2.PUEF.Value * eltFactDeboursArmSurN2.QTEEF.Value) * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                                eltFactDeboursArmSurTVA.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                                eltFactDeboursArmSurTVA.CodeTVA = "TVAEX";
                                eltFactDeboursArmSurTVA.TauxTVA = 0;
                                eltFactDeboursArmSurTVA.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                                eltFactDeboursArmSurTVA.EltFacture = "Ctr";
                                eltFactDeboursArmSurTVA.DateJEF = DateTime.Now;
                                eltFactDeboursArmSurTVA.IdLP = lpTVACpteTiers.IdLP;
                                eltFactDeboursArmSurTVA.QTEEF = 1;
                                eltFactDeboursArmSurTVA.LibEF = "Débours armateur : TVA sur Surestaries Ctr N° " + matchedConteneur.NumCtr + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays((dateFin - finAncienSurest).Days).ToShortDateString();
                                eltFactDeboursArmSurTVA.PTDIT = 0;
                                eltFactDeboursArmSurTVA.UnitEF = lpTVACpteTiers.UniteLP;
                                eltFactDeboursArmSurTVA.IdEsc = matchedConteneur.IdEsc;
                                eltFactDeboursArmSurTVA.IdMan = matchedConteneur.IdMan;
                                eltFactDeboursArmSurTVA.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                                eltFactDeboursArmSurTVA.IdCtr = matchedConteneur.IdCtr;
                                eltFactDeboursArmSurTVA.DestEF = "C";
                                eltFactDeboursArmSurTVA.StatutEF = "En cours";

                                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurTVA);*/
                            }
                        }

                    }

                    dcAcc.SubmitChanges();

                    //if (matchedConteneur.CONNAISSEMENT.DEMANDE_REDUCTION.FirstOrDefault<DEMANDE_REDUCTION>(red => red.DatevDDR.HasValue) != null)
                    //{
                    //    DEMANDE_REDUCTION reduction = matchedConteneur.CONNAISSEMENT.DEMANDE_REDUCTION.FirstOrDefault<DEMANDE_REDUCTION>(red => red.DatevDDR.HasValue);
                    //    foreach (ELEMENT_FACTURATION elt in reduction.CONNAISSEMENT.ELEMENT_FACTURATION.Where(el => (el.LIGNE_PRIX.CodeArticle == 1805 || el.LibEF.Contains("Débours armateur : TVA sur Surestaries")) && (el.StatutEF == "En cours" || el.StatutEF == "Proforma")))
                    //    {
                    //        elt.PUEF = Math.Round(elt.PUEFBase.Value * (1 - reduction.Pourcent.Value / 100), 0, MidpointRounding.AwayFromZero);
                    //    }

                    //    foreach (PROFORMA prof in matchedConteneur.CONNAISSEMENT.PROFORMA.Where(p => !p.DVFP.HasValue && p.StatutFP == "O"))
                    //    {
                    //        UpdateProforma(prof.IdFP, prof.IdBL.Value, GetLignesProf(prof.IdFP), prof.AIFP, idUser);
                    //    }
                    //}
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }
        }

        public CONTENEUR ProgrammerVisiteDouane(int idCtr, DateTime dateVisite, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).FirstOrDefault<CONTENEUR>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Conteneur : Programmation visite douane").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour programmer une visite douane sur conteneur. Veuillez contacter un administrateur");
                }

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                var opIdentification = (from op in dcAcc.GetTable<OPERATION_CONTENEUR>()
                                        where op.IdTypeOp == 12 && op.IdCtr == idCtr
                                        select op).FirstOrDefault<OPERATION_CONTENEUR>();

                if (matchedConteneur.ESCALE.RAEsc != "Y")
                {
                    throw new FacturationException("Il n'est pas possible de programmer une visite douane sur ce conteneur, car le rôle Acconier n'est pas activé sur l'escale");
                }

                if (opIdentification == null)
                {
                    throw new IdentificationException("Vous ne pouvez pas programmer de visite douane sur ce conteneur s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                }

                DateTime dte = DateTime.Now;

                OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();

                opCtr.IdCtr = idCtr;
                opCtr.DateOp = dte;
                opCtr.IdTypeOp = 21;
                opCtr.AIOp = dateVisite.ToShortDateString(); ;
                opCtr.IdU = idUser;

                dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);

                matchedConteneur.DVD = dateVisite;

                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

                /* AH ARTICLE articleDeboursDITVisiteDouane = (from art in articles
                                                         from par in parametres
                                                         where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Visite Douanes"
                                                         select art).SingleOrDefault<ARTICLE>();
                */
                ARTICLE articleDeboursDITVisiteDouane = (from art in articles  where art.CodeArticle == 1407
                                                         select art).SingleOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursDITVisiteDouane = articleDeboursDITVisiteDouane.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConteneur.TypeCCtr.Substring(0, 2) && lp.DDLP <= dte && lp.DFLP >= dte);

                /*
                 * AH plus utilise a cause de l'ajout de code TVA
                 * ARTICLE articleDeboursDITTVA = (from art in articles
                                                from par in parametres
                                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : TVA"
                                                select art).SingleOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursDITTVA = articleDeboursDITTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                */

                ELEMENT_FACTURATION eltFactDeboursDITVisiteDouane = new ELEMENT_FACTURATION();

                eltFactDeboursDITVisiteDouane.PUEF = lpDeboursDITVisiteDouane.PU1LP;
                eltFactDeboursDITVisiteDouane.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITVisiteDouane.CCArticleEx : ((articleDeboursDITVisiteDouane.CodeTVA == "TVAAP" || articleDeboursDITVisiteDouane.CodeTVA=="TVATI") ? articleDeboursDITVisiteDouane.CCArticle : articleDeboursDITVisiteDouane.CCArticleEx);
                eltFactDeboursDITVisiteDouane.CodeTVA = articleDeboursDITVisiteDouane.CodeTVA; //"TVAEX";
                eltFactDeboursDITVisiteDouane.TauxTVA =articleDeboursDITVisiteDouane.CODE_TVA.TauxTVA;
                eltFactDeboursDITVisiteDouane.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                eltFactDeboursDITVisiteDouane.EltFacture = "Ctr";
                //AH Débours DIT : Visite Douanes
                eltFactDeboursDITVisiteDouane.LibEF =articleDeboursDITVisiteDouane.LibArticle+ " N° " + matchedConteneur.NumCtr;
                eltFactDeboursDITVisiteDouane.DateJEF = DateTime.Now;
                eltFactDeboursDITVisiteDouane.IdLP = lpDeboursDITVisiteDouane.IdLP;
                eltFactDeboursDITVisiteDouane.QTEEF = 1;
                eltFactDeboursDITVisiteDouane.PTDIT = eltFactDeboursDITVisiteDouane.PUEF * eltFactDeboursDITVisiteDouane.QTEEF;
                eltFactDeboursDITVisiteDouane.UnitEF = lpDeboursDITVisiteDouane.UniteLP;
                eltFactDeboursDITVisiteDouane.IdEsc = matchedConteneur.IdEsc;
                eltFactDeboursDITVisiteDouane.IdMan = matchedConteneur.IdMan;
                eltFactDeboursDITVisiteDouane.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                eltFactDeboursDITVisiteDouane.IdCtr = matchedConteneur.IdCtr;
                eltFactDeboursDITVisiteDouane.DestEF = "C";
                eltFactDeboursDITVisiteDouane.StatutEF = "En cours";

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDITVisiteDouane);

                /**
                 * ELEMENT_FACTURATION eltFactDeboursDIT = new ELEMENT_FACTURATION();

                eltFactDeboursDIT.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? eltFactDeboursDITVisiteDouane.PUEF * eltFactDeboursDITVisiteDouane.QTEEF * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100) : 0;
                eltFactDeboursDIT.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITTVA.CCArticleEx : ((articleDeboursDITTVA.CodeTVA == "TVAAP" || articleDeboursDITTVA.CodeTVA=="TVATI") ? articleDeboursDITTVA.CCArticle : articleDeboursDITTVA.CCArticleEx);
                eltFactDeboursDIT.CodeTVA = articleDeboursDITTVA.CodeTVA; //"TVAEX";
                eltFactDeboursDIT.TauxTVA = articleDeboursDITTVA.CODE_TVA.TauxTVA;
                eltFactDeboursDIT.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                eltFactDeboursDIT.EltFacture = "Ctr";
                eltFactDeboursDIT.LibEF = "Débours DIT : TVA sur visite douanes Ctr N° " + matchedConteneur.NumCtr;
                eltFactDeboursDIT.DateJEF = DateTime.Now;
                eltFactDeboursDIT.IdLP = lpDeboursDITTVA.IdLP;
                eltFactDeboursDIT.QTEEF = 1;
                eltFactDeboursDIT.PTDIT = eltFactDeboursDIT.PUEF * eltFactDeboursDIT.QTEEF;
                eltFactDeboursDIT.UnitEF = lpDeboursDITTVA.UniteLP;
                eltFactDeboursDIT.IdEsc = matchedConteneur.IdEsc;
                eltFactDeboursDIT.IdMan = matchedConteneur.IdMan;
                eltFactDeboursDIT.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                eltFactDeboursDIT.IdCtr = matchedConteneur.IdCtr;
                eltFactDeboursDIT.DestEF = "C";
                eltFactDeboursDIT.StatutEF = "En cours";

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDIT);
                **/

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }
        }

        public CONTENEUR ProgrammerDoubleRelevage(int idCtr, DateTime dateExecution, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConteneur = (from ctr in dcAcc.GetTable<CONTENEUR>()
                                        where ctr.IdCtr == idCtr
                                        select ctr).SingleOrDefault<CONTENEUR>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Conteneur : Programmation double relevage").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour programmer un double relevage sur conteneur. Veuillez contacter un administrateur");
                }

                if (matchedConteneur == null)
                {
                    throw new EnregistrementInexistant("Conteneur inexistant");
                }

                var opIdentification = (from op in dcAcc.GetTable<OPERATION_CONTENEUR>()
                                        where op.IdTypeOp == 12 && op.IdCtr == idCtr
                                        select op).FirstOrDefault<OPERATION_CONTENEUR>();

                if (matchedConteneur.ESCALE.RAEsc != "Y")
                {
                    throw new FacturationException("Il n'est pas possible de programmer un double relevage sur ce conteneur, car le rôle Acconier n'est pas activé sur l'escale");
                }

                if (opIdentification == null)
                {
                    throw new IdentificationException("Vous ne pouvez pas programmer de double relevage sur ce conteneur s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                }

                DateTime dte = DateTime.Now;

                OPERATION_CONTENEUR opCtr = new OPERATION_CONTENEUR();

                opCtr.IdCtr = idCtr;
                opCtr.DateOp = dte;
                opCtr.IdTypeOp = 22;
                opCtr.AIOp = dateExecution.ToShortDateString(); ;
                opCtr.IdU = idUser;

                dcAcc.GetTable<OPERATION_CONTENEUR>().InsertOnSubmit(opCtr);

                matchedConteneur.DDR = dateExecution;

                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

               /*AH ARTICLE articleDeboursDITDoubleRelevage = (from art in articles
                                                           from par in parametres
                                                           where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : Double Relevage"
                                                           select art).FirstOrDefault<ARTICLE>();*/
                ARTICLE articleDeboursDITDoubleRelevage = (from art in articles   where art.CodeArticle == 1405
                                                           select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursDITDoubleRelevage = articleDeboursDITDoubleRelevage.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == matchedConteneur.TypeCCtr.Substring(0, 2) && lp.DDLP <= dte && lp.DFLP >= dte);

                /*
                 * Plus utiliser a cause du code tva article 
                 * ARTICLE articleDeboursDITTVA = (from art in articles
                                                from par in parametres
                                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours DIT : TVA"
                                                select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursDITTVA = articleDeboursDITTVA.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                */

                ELEMENT_FACTURATION eltFactDeboursDITDoubleRelevage = new ELEMENT_FACTURATION();

                eltFactDeboursDITDoubleRelevage.PUEF = lpDeboursDITDoubleRelevage.PU1LP;
                eltFactDeboursDITDoubleRelevage.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITDoubleRelevage.CCArticleEx : ((articleDeboursDITDoubleRelevage.CodeTVA == "TVAAP" || articleDeboursDITDoubleRelevage.CodeTVA=="TVATI") ? articleDeboursDITDoubleRelevage.CCArticle : articleDeboursDITDoubleRelevage.CCArticleEx);
                eltFactDeboursDITDoubleRelevage.CodeTVA = articleDeboursDITDoubleRelevage.CodeTVA; //"TVAEX";
                eltFactDeboursDITDoubleRelevage.TauxTVA =articleDeboursDITDoubleRelevage.CODE_TVA.TauxTVA ;
                eltFactDeboursDITDoubleRelevage.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                eltFactDeboursDITDoubleRelevage.EltFacture = "Ctr";
                //AH Débours DIT : Double Relevage
                eltFactDeboursDITDoubleRelevage.LibEF =articleDeboursDITDoubleRelevage.LibArticle+ " N° " + matchedConteneur.NumCtr;
                eltFactDeboursDITDoubleRelevage.DateJEF = DateTime.Now;
                eltFactDeboursDITDoubleRelevage.IdLP = lpDeboursDITDoubleRelevage.IdLP;
                eltFactDeboursDITDoubleRelevage.QTEEF = 1;
                eltFactDeboursDITDoubleRelevage.PTDIT = eltFactDeboursDITDoubleRelevage.PUEF * eltFactDeboursDITDoubleRelevage.QTEEF;
                eltFactDeboursDITDoubleRelevage.UnitEF = lpDeboursDITDoubleRelevage.UniteLP;
                eltFactDeboursDITDoubleRelevage.IdEsc = matchedConteneur.IdEsc;
                eltFactDeboursDITDoubleRelevage.IdMan = matchedConteneur.IdMan;
                eltFactDeboursDITDoubleRelevage.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                eltFactDeboursDITDoubleRelevage.IdCtr = matchedConteneur.IdCtr;
                eltFactDeboursDITDoubleRelevage.DestEF = "C";
                eltFactDeboursDITDoubleRelevage.StatutEF = "En cours";

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDITDoubleRelevage);

                /*ELEMENT_FACTURATION eltFactDeboursDIT = new ELEMENT_FACTURATION();

                eltFactDeboursDIT.PUEF = matchedConteneur.CONNAISSEMENT.BLIL == "N" ? eltFactDeboursDITDoubleRelevage.PUEF * eltFactDeboursDITDoubleRelevage.QTEEF * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA / 100) : 0;
                eltFactDeboursDIT.CCArticle = matchedConteneur.CONNAISSEMENT.BLIL == "Y" ? articleDeboursDITTVA.CCArticleEx : (articleDeboursDITTVA.CodeTVA == "TVAAP" ? articleDeboursDITTVA.CCArticle : articleDeboursDITTVA.CCArticleEx);
                eltFactDeboursDIT.CodeTVA = "TVAEX";
                eltFactDeboursDIT.TauxTVA = 0;
                eltFactDeboursDIT.CCCP = matchedConteneur.CONNAISSEMENT.CLIENT.CodeClient;
                eltFactDeboursDIT.EltFacture = "Ctr";
                eltFactDeboursDIT.LibEF = "Débours DIT : TVA sur double relevage Ctr N° " + matchedConteneur.NumCtr;
                eltFactDeboursDIT.DateJEF = DateTime.Now;
                eltFactDeboursDIT.IdLP = lpDeboursDITTVA.IdLP;
                eltFactDeboursDIT.QTEEF = 1;
                eltFactDeboursDIT.PTDIT = eltFactDeboursDIT.PUEF * eltFactDeboursDIT.QTEEF;
                eltFactDeboursDIT.UnitEF = lpDeboursDITTVA.UniteLP;
                eltFactDeboursDIT.IdEsc = matchedConteneur.IdEsc;
                eltFactDeboursDIT.IdMan = matchedConteneur.IdMan;
                eltFactDeboursDIT.IdBL = matchedConteneur.CONNAISSEMENT.IdBL;
                eltFactDeboursDIT.IdCtr = matchedConteneur.IdCtr;
                eltFactDeboursDIT.DestEF = "C";
                eltFactDeboursDIT.StatutEF = "En cours";

                dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursDIT);*/

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConteneur;
            }
        }

       
        #endregion

        #region Mafi

        public ELEMENT_FACTURATION UpdateEltFactMafi(int idJEF, string libEF, double prixUnitaire, double quantite, string cpteComptable, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedElt = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                  where elt.IdJEF == idJEF
                                  select elt).SingleOrDefault<ELEMENT_FACTURATION>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Mafi : Mise à jour des éléments de facturation").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour les éléments de facturation d'un mafi. Veuillez contacter un administrateur");
                }

                if (matchedElt == null)
                {
                    throw new EnregistrementInexistant("Elément de facturation inexistant");
                }

                matchedElt.PUEF = prixUnitaire;
                matchedElt.QTEEF = quantite;
                matchedElt.LibEF = libEF;
                matchedElt.CCArticle = cpteComptable;

                foreach (LIGNE_PROFORMA ligneProf in matchedElt.LIGNE_PROFORMA.Where(lp => !lp.PROFORMA.DVFP.HasValue && lp.PROFORMA.StatutFP == "O"))
                {
                    UpdateProforma(ligneProf.PROFORMA.IdFP, ligneProf.PROFORMA.IdBL.Value, ligneProf.PROFORMA.ClientFacture, 
                        GetLignesProf(ligneProf.PROFORMA.IdFP,dcAcc), ligneProf.PROFORMA.AIFP, idUser);
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedElt;
            }
        }

        public MAFI CalculerStationnementMafi(int idMafi, DateTime dateFin, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedMafi = (from mf in dcAcc.GetTable<MAFI>()
                                   where mf.IdMafi == idMafi
                                   select mf).SingleOrDefault<MAFI>();

                if (matchedMafi == null)
                {
                    throw new EnregistrementInexistant("Mafi inexistant");
                }

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Mafi : Calcul du stationnement").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour calculer le stationnement d'un mafi. Veuillez contacter un administrateur");
                }

                var opIdentification = (from op in dcAcc.GetTable<OPERATION_MAFI>()
                                        where op.IdTypeOp == 226 && op.IdMafi == idMafi
                                        select op).FirstOrDefault<OPERATION_MAFI>();

                if (matchedMafi.ESCALE.RAEsc != "Y")
                {
                    throw new FacturationException("Il n'est pas possible de facturer le stationnement sur ce mafi, car le rôle Acconier n'est pas activé sur l'escale");
                }

                if (opIdentification == null)
                {
                    throw new IdentificationException("Vous ne pouvez pas calculer le stationnement sur ce mafi s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                }

                DateTime dte = DateTime.Now;

                OPERATION_MAFI opMafi = new OPERATION_MAFI();

                opMafi.IdMafi = idMafi;
                opMafi.DateOp = dte;
                opMafi.IdTypeOp = 233;
                opMafi.AIOp = matchedMafi.FFMafi.Value.AddDays(1).ToShortDateString() + " - " + dateFin.ToShortDateString(); ;
                opMafi.IdU = idUser;

                dcAcc.GetTable<OPERATION_MAFI>().InsertOnSubmit(opMafi);

                DateTime finAncienStationnement = DateTime.Now;

                if (matchedMafi.FSMafi.HasValue)
                {
                    finAncienStationnement = matchedMafi.FSMafi.Value;
                }

                //DateTime finAncienSurest = finAncienStationnement.AddDays((double)Math.Abs((matchedMafi.FFMafi.Value - matchedMafi.FFSMafi.Value).Days));
                
                DateTime finAncienSurest = matchedMafi.FSMafi.Value;
                
                matchedMafi.FSMafi = dateFin;

                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();


                /*AH if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                     where ef.IdMafi == idMafi && (ef.LibEF.Contains("Séjour Mafi") || ef.LibEF.Contains("Surtaxe Séjour Mafi") 
                     || ef.LibEF.Contains("Débours armateur : Surestaries Mafi") || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries"))
                     select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)*/

                if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                     where ef.IdMafi == idMafi && (ef.CodeArticle=="1802" || ef.CodeArticle=="1808"
                     || ef.CodeArticle=="1805" )
                     select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                {
                    List<ELEMENT_FACTURATION> eltsStationnementMafi = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                       where ef.IdMafi == idMafi &&
                                                                       (ef.CodeArticle == "1802" || ef.CodeArticle == "1808" || ef.CodeArticle == "1805")
                                                                      select ef).ToList<ELEMENT_FACTURATION>();

                    foreach (ELEMENT_FACTURATION elt in eltsStationnementMafi)
                    {
                        elt.StatutEF = "Annule";
                    }
                }

                /* ARTICLE articleDeboursArmSur = (from art in articles
                                                from par in parametres
                                                where art.CodeArticle == par.CodeAF && par.NomAF == "Débours armateur : Surestaries Conteneur"
                                                select art).FirstOrDefault<ARTICLE>(); */

                ARTICLE articleDeboursArmSur = (from art in articles   where art.CodeArticle ==1805
                                                select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpDeboursArmSur = articleDeboursArmSur.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.LP == "Mafi" && lp.DDLP <= dte && lp.DFLP >= dte);

                /*
                 * Plus utilise a cause du code tva de larticle
                 * ARTICLE articleTVACpteTiers = (from art in articles
                                               from par in parametres
                                               where art.CodeArticle == par.CodeAF && par.NomAF == "TVA pour cpte de tiers"
                                               select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpTVACpteTiers = articleTVACpteTiers.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);
                */

               /* ARTICLE articleSejourMafi = (from art in articles
                                                      from par in parametres
                                                      where art.CodeArticle == par.CodeAF && par.NomAF == "Séjour Conventionnel"
                                                      select art).FirstOrDefault<ARTICLE>(); */
                ARTICLE articleSejourMafi = (from art in articles  where art.CodeArticle ==1802
                                             select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpSejourMafi = articleSejourMafi.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /* ARTICLE articleSurtaxeMafi = (from art in articles
                                             from par in parametres
                                             where art.CodeArticle == par.CodeAF && par.NomAF == "Surtaxe Séjour Conventionnel"
                                             select art).FirstOrDefault<ARTICLE>(); */

                ARTICLE articleSurtaxeMafi = (from art in articles  where art.CodeArticle == 1808
                                              select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpSurtaxeMafi = articleSejourMafi.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                double derogation = (matchedMafi.CONNAISSEMENT.BLIL == "Y" || matchedMafi.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;

               /*AH bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where ef.IdMafi == idMafi && (ef.LibEF.Contains("Séjour Mafi") || ef.LibEF.Contains("Surtaxe Séjour Mafi")  || ef.LibEF.Contains("Débours armateur : Surestaries Mafi") || ef.LibEF.Contains("Débours armateur : TVA sur Surestaries")) && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                      select ef).ToList<ELEMENT_FACTURATION>().Count != 0; */
                bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where ef.IdMafi == idMafi && (ef.CodeArticle=="1802" || ef.CodeArticle=="1808" || 
                                      ef.CodeArticle=="1805" ) && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                      select ef).ToList<ELEMENT_FACTURATION>().Count != 0;
                if (!isEltsNotFree)
                {
                    // Calcul des surestaries
                    ELEMENT_FACTURATION eltFactDeboursArmSur = new ELEMENT_FACTURATION();

                    eltFactDeboursArmSur.PUEF = lpDeboursArmSur.PU1LP;
                    eltFactDeboursArmSur.PUEFBase = lpDeboursArmSur.PU1LP;
                    eltFactDeboursArmSur.CCArticle = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA == "TVAAP" || articleDeboursArmSur.CodeTVA=="TVATI") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                    eltFactDeboursArmSur.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y"? "TVAEX" : articleDeboursArmSur.CodeTVA;// "TVAEX";
                    eltFactDeboursArmSur.TauxTVA =matchedMafi.CONNAISSEMENT.BLIL == "Y" ? 0 : articleDeboursArmSur.CODE_TVA.TauxTVA;
                    eltFactDeboursArmSur.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactDeboursArmSur.EltFacture = "MF";
                    //AH Débours armateur : Surestaries
                    eltFactDeboursArmSur.LibEF =articleDeboursArmSur.LibArticle+ " Mafi  N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFMafi.Value.AddDays((dateFin - matchedMafi.FFMafi.Value).Days).ToShortDateString();
                    eltFactDeboursArmSur.DateJEF = DateTime.Now;
                    eltFactDeboursArmSur.IdLP = lpDeboursArmSur.IdLP;
                    eltFactDeboursArmSur.QTEEF = dateFin.Date < matchedMafi.FFMafi.Value ? 0 : (dateFin - matchedMafi.FFMafi.Value).Days;
                    eltFactDeboursArmSur.UnitEF = lpDeboursArmSur.UniteLP;
                    eltFactDeboursArmSur.PTDIT = 0;
                    eltFactDeboursArmSur.IdEsc = matchedMafi.IdEsc;
                    eltFactDeboursArmSur.IdMan = matchedMafi.IdMan;
                    eltFactDeboursArmSur.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                    eltFactDeboursArmSur.IdMafi = matchedMafi.IdMafi;
                    eltFactDeboursArmSur.DestEF = "C";
                    eltFactDeboursArmSur.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSur);

                   /* ELEMENT_FACTURATION eltFactDeboursArmSurTVA = new ELEMENT_FACTURATION();

                    eltFactDeboursArmSurTVA.PUEF = matchedMafi.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                    eltFactDeboursArmSurTVA.PUEFBase = matchedMafi.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                    eltFactDeboursArmSurTVA.CCArticle = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                    eltFactDeboursArmSurTVA.CodeTVA = "TVAEX";
                    eltFactDeboursArmSurTVA.TauxTVA = 0;
                    eltFactDeboursArmSurTVA.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactDeboursArmSurTVA.EltFacture = "MF";
                    eltFactDeboursArmSurTVA.LibEF = "Débours armateur : TVA sur Surestaries Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFMafi.Value.AddDays((dateFin - matchedMafi.FFMafi.Value).Days).ToShortDateString();
                    eltFactDeboursArmSurTVA.DateJEF = DateTime.Now;
                    eltFactDeboursArmSurTVA.IdLP = lpTVACpteTiers.IdLP;
                    eltFactDeboursArmSurTVA.QTEEF = 1;
                    eltFactDeboursArmSurTVA.PTDIT = 0;
                    eltFactDeboursArmSurTVA.UnitEF = lpTVACpteTiers.UniteLP;
                    eltFactDeboursArmSurTVA.IdEsc = matchedMafi.IdEsc;
                    eltFactDeboursArmSurTVA.IdMan = matchedMafi.IdMan;
                    eltFactDeboursArmSurTVA.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                    eltFactDeboursArmSurTVA.IdMafi = matchedMafi.IdMafi;
                    eltFactDeboursArmSurTVA.DestEF = "C";
                    eltFactDeboursArmSurTVA.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurTVA);*/

                    // Calcul du stationnement
                    if ((dateFin - matchedMafi.FFSMafi.Value).Days <= 10)
                    {
                        ELEMENT_FACTURATION eltFactSejourMafi = new ELEMENT_FACTURATION();

                        eltFactSejourMafi.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafi.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafi.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafi.TauxTVA = eltFactSejourMafi.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafi.CCArticle = eltFactSejourMafi.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafi.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafi.EltFacture = "MF";
                        //AH Séjour 
                        eltFactSejourMafi.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                        eltFactSejourMafi.DateJEF = DateTime.Now;
                        eltFactSejourMafi.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafi.QTEEF = dateFin.Date < matchedMafi.FFSMafi ? 0 : (dateFin.Date - matchedMafi.FFSMafi.Value).Days;
                        eltFactSejourMafi.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafi.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafi.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafi.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafi.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafi.DestEF = "C";
                        eltFactSejourMafi.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafi);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafi = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafi.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafi.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafi.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafi.TauxTVA = eltFactSurtaxeMafi.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafi.CCArticle = eltFactSurtaxeMafi.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafi.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafi.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafi.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                            eltFactSurtaxeMafi.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafi.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafi.QTEEF = dateFin.Date < matchedMafi.FFSMafi ? 0 : (dateFin.Date - matchedMafi.FFSMafi.Value).Days;
                            eltFactSurtaxeMafi.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafi.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafi.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafi.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafi.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafi.DestEF = "C";
                            eltFactSurtaxeMafi.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafi);
                        }
                    }
                    else if ((dateFin - matchedMafi.FFSMafi.Value).Days <= 10 + 20)
                    {
                        ELEMENT_FACTURATION eltFactSejourMafiN1 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN1.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN1.TauxTVA = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN1.CCArticle = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN1.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN1.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10).ToShortDateString();
                        eltFactSejourMafiN1.DateJEF = DateTime.Now;
                        eltFactSejourMafiN1.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN1.QTEEF = 10;
                        eltFactSejourMafiN1.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN1.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN1.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN1.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN1.DestEF = "C";
                        eltFactSejourMafiN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN1);

                        ELEMENT_FACTURATION eltFactSejourMafiN2 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN2.PUEF = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.PUEFBase = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN2.TauxTVA = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN2.CCArticle = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN2.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN2.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                        eltFactSejourMafiN2.DateJEF = DateTime.Now;
                        eltFactSejourMafiN2.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN2.QTEEF = (dateFin - matchedMafi.FFMafi.Value).Days - 10;
                        eltFactSejourMafiN2.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN2.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN2.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN2.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN2.DestEF = "C";
                        eltFactSejourMafiN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN2);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafiN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN1.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN1.TauxTVA = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN1.CCArticle = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN1.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN1.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10).ToShortDateString();
                            eltFactSurtaxeMafiN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN1.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN1.QTEEF = 10;
                            eltFactSurtaxeMafiN1.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN1.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN1.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN1.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN1.DestEF = "C";
                            eltFactSurtaxeMafiN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN1);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN2.PUEF = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.PUEFBase = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN2.TauxTVA = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN2.CCArticle = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN2.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN2.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                            eltFactSurtaxeMafiN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN2.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN2.QTEEF = (dateFin - matchedMafi.FFMafi.Value).Days - 10;
                            eltFactSurtaxeMafiN2.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN2.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN2.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN2.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN2.DestEF = "C";
                            eltFactSurtaxeMafiN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN2);
                        }
                    }
                    else if ((dateFin - matchedMafi.FFSMafi.Value).Days <= 10 + 20 + 30)
                    {
                        ELEMENT_FACTURATION eltFactSejourMafiN1 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN1.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN1.TauxTVA = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN1.CCArticle = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN1.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN1.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10).ToShortDateString();
                        eltFactSejourMafiN1.DateJEF = DateTime.Now;
                        eltFactSejourMafiN1.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN1.QTEEF = 10;
                        eltFactSejourMafiN1.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN1.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN1.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN1.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN1.DestEF = "C";
                        eltFactSejourMafiN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN1);

                        ELEMENT_FACTURATION eltFactSejourMafiN2 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN2.PUEF = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.PUEFBase = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN2.TauxTVA = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN2.CCArticle = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN2.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN2.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10 + 20).ToShortDateString();
                        eltFactSejourMafiN2.DateJEF = DateTime.Now;
                        eltFactSejourMafiN2.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN2.QTEEF = 20;
                        eltFactSejourMafiN2.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN2.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN2.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN2.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN2.DestEF = "C";
                        eltFactSejourMafiN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN2);

                        ELEMENT_FACTURATION eltFactSejourMafiN3 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN3.PUEF = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.PUEFBase = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN3.TauxTVA = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN3.CCArticle = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN3.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN3.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                        eltFactSejourMafiN3.DateJEF = DateTime.Now;
                        eltFactSejourMafiN3.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN3.QTEEF = (dateFin.Date - matchedMafi.FFMafi.Value).Days - 10 - 20;
                        eltFactSejourMafiN3.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN3.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN3.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN3.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN3.DestEF = "C";
                        eltFactSejourMafiN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN3);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafiN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN1.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN1.TauxTVA = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN1.CCArticle = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN1.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN1.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10).ToShortDateString();
                            eltFactSurtaxeMafiN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN1.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN1.QTEEF = 10;
                            eltFactSurtaxeMafiN1.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN1.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN1.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN1.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN1.DestEF = "C";
                            eltFactSurtaxeMafiN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN1);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN2.PUEF = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.PUEFBase = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN2.TauxTVA = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN2.CCArticle = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN2.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN2.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10 + 20).ToShortDateString();
                            eltFactSurtaxeMafiN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN2.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN2.QTEEF = 20;
                            eltFactSurtaxeMafiN2.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN2.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN2.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN2.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN2.DestEF = "C";
                            eltFactSurtaxeMafiN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN2);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN3.PUEF = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.PUEFBase = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN3.TauxTVA = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN3.CCArticle = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN3.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN3.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                            eltFactSurtaxeMafiN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN3.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN3.QTEEF = (dateFin.Date - matchedMafi.FFMafi.Value).Days - 10 - 20;
                            eltFactSurtaxeMafiN3.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN3.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN3.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN3.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN3.DestEF = "C";
                            eltFactSurtaxeMafiN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN3);
                        }
                    }
                    else
                    {
                        ELEMENT_FACTURATION eltFactSejourMafiN1 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN1.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN1.TauxTVA = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN1.CCArticle = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN1.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN1.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10).ToShortDateString();
                        eltFactSejourMafiN1.DateJEF = DateTime.Now;
                        eltFactSejourMafiN1.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN1.QTEEF = 10;
                        eltFactSejourMafiN1.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN1.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN1.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN1.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN1.DestEF = "C";
                        eltFactSejourMafiN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN1);

                        ELEMENT_FACTURATION eltFactSejourMafiN2 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN2.PUEF = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.PUEFBase = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN2.TauxTVA = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN2.CCArticle = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN2.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN2.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10 + 20).ToShortDateString();
                        eltFactSejourMafiN2.DateJEF = DateTime.Now;
                        eltFactSejourMafiN2.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN2.QTEEF = 20;
                        eltFactSejourMafiN2.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN2.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN2.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN2.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN2.DestEF = "C";
                        eltFactSejourMafiN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN2);

                        ELEMENT_FACTURATION eltFactSejourMafiN3 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN3.PUEF = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.PUEFBase = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN3.TauxTVA = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN3.CCArticle = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN3.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN3.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10 + 20 + 30).ToShortDateString();
                        eltFactSejourMafiN3.DateJEF = DateTime.Now;
                        eltFactSejourMafiN3.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN3.QTEEF = 30;
                        eltFactSejourMafiN3.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN3.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN3.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN3.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN3.DestEF = "C";
                        eltFactSejourMafiN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN3);

                        ELEMENT_FACTURATION eltFactSejourMafiN4 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN4.PUEF = (lpSejourMafi.PU4LP - lpSejourMafi.PU4LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN4.PUEFBase = (lpSejourMafi.PU4LP - lpSejourMafi.PU4LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN4.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN4.TauxTVA = eltFactSejourMafiN4.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN4.CCArticle = eltFactSejourMafiN4.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN4.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN4.EltFacture = "MF";
                        //AH Séjour
                        eltFactSejourMafiN4.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10 + 20 + 30).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                        eltFactSejourMafiN4.DateJEF = DateTime.Now;
                        eltFactSejourMafiN4.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN4.QTEEF = (dateFin.Date - matchedMafi.FFMafi.Value).Days - 10 - 20 - 30;
                        eltFactSejourMafiN4.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN4.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN4.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN4.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN4.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN4.DestEF = "C";
                        eltFactSejourMafiN4.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN4);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafiN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN1.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN1.TauxTVA = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN1.CCArticle = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN1.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN1.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10).ToShortDateString();
                            eltFactSurtaxeMafiN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN1.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN1.QTEEF = 10;
                            eltFactSurtaxeMafiN1.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN1.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN1.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN1.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN1.DestEF = "C";
                            eltFactSurtaxeMafiN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN1);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN2.PUEF = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.PUEFBase = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN2.TauxTVA = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN2.CCArticle = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN2.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN2.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10 + 20).ToShortDateString();
                            eltFactSurtaxeMafiN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN2.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN2.QTEEF = 20;
                            eltFactSurtaxeMafiN2.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN2.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN2.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN2.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN2.DestEF = "C";
                            eltFactSurtaxeMafiN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN2);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN3.PUEF = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.PUEFBase = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN3.TauxTVA = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN3.CCArticle = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN3.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN3.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays(10 + 20 + 30).ToShortDateString();
                            eltFactSurtaxeMafiN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN3.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN3.QTEEF = 30;
                            eltFactSurtaxeMafiN3.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN3.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN3.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN3.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN3.DestEF = "C";
                            eltFactSurtaxeMafiN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN3);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN4 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN4.PUEF = (lpSurtaxeMafi.PU4LP - lpSurtaxeMafi.PU4LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN4.PUEFBase = (lpSurtaxeMafi.PU4LP - lpSurtaxeMafi.PU4LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN4.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN4.TauxTVA = eltFactSurtaxeMafiN4.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN4.CCArticle = eltFactSurtaxeMafiN4.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN4.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN4.EltFacture = "MF";
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN4.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + matchedMafi.FFSMafi.Value.AddDays(1 + 10 + 20 + 30).ToShortDateString() + " - " + matchedMafi.FFSMafi.Value.AddDays((dateFin - matchedMafi.FFSMafi.Value).Days).ToShortDateString();
                            eltFactSurtaxeMafiN4.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN4.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN4.QTEEF = (dateFin.Date - matchedMafi.FFMafi.Value).Days - 10 - 20 - 30;
                            eltFactSurtaxeMafiN4.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN4.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN4.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN4.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN4.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN4.DestEF = "C";
                            eltFactSurtaxeMafiN4.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN4);
                        }
                    }
                }
                else
                {
                    /* List<ELEMENT_FACTURATION> eltSurestCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdMafi == idMafi && (ef.LibEF.Contains("Débours armateur : Surestaries")) && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>();*/

                    List<ELEMENT_FACTURATION> eltSurestCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdMafi == idMafi && ef.CodeArticle=="1805" 
                                                                   && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>();

                    // Complément des surestaries
                    ELEMENT_FACTURATION eltFactDeboursArmSur = new ELEMENT_FACTURATION();

                    eltFactDeboursArmSur.PUEF = lpDeboursArmSur.PU1LP;
                    eltFactDeboursArmSur.PUEFBase = lpDeboursArmSur.PU1LP;
                    eltFactDeboursArmSur.CCArticle = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? articleDeboursArmSur.CCArticleEx : ((articleDeboursArmSur.CodeTVA=="TVATI" || articleDeboursArmSur.CodeTVA == "TVAAP") ? articleDeboursArmSur.CCArticle : articleDeboursArmSur.CCArticleEx);
                   // eltFactDeboursArmSur.CodeTVA = articleDeboursArmSur.CodeTVA;// "TVAEX";
                    eltFactDeboursArmSur.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                    eltFactDeboursArmSur.TauxTVA = eltFactDeboursArmSur.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                    //eltFactDeboursArmSur.TauxTVA =articleDeboursArmSur.CodeTVA=="TVAEX" ? 0 : 19.25f;
                    eltFactDeboursArmSur.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactDeboursArmSur.EltFacture = "MF";
                    eltFactDeboursArmSur.DateJEF = DateTime.Now;
                    eltFactDeboursArmSur.IdLP = lpDeboursArmSur.IdLP;
                    eltFactDeboursArmSur.QTEEF = dateFin.Date < matchedMafi.FFMafi.Value ? 0 : (dateFin - matchedMafi.FFMafi.Value).Days - eltSurestCalcules.Where(el => el.PUEFBase == lpDeboursArmSur.PU1LP).Sum(el => el.QTEEF);
                    //AH Débours armateur : Surestaries
                    eltFactDeboursArmSur.LibEF =articleDeboursArmSur.LibArticle+ " Mafi  N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactDeboursArmSur.QTEEF)).ToShortDateString();
                    eltFactDeboursArmSur.UnitEF = lpDeboursArmSur.UniteLP;
                    eltFactDeboursArmSur.PTDIT = 0;
                    eltFactDeboursArmSur.IdEsc = matchedMafi.IdEsc;
                    eltFactDeboursArmSur.IdMan = matchedMafi.IdMan;
                    eltFactDeboursArmSur.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                    eltFactDeboursArmSur.IdMafi = matchedMafi.IdMafi;
                    eltFactDeboursArmSur.DestEF = "C";
                    eltFactDeboursArmSur.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSur);

                    /*ELEMENT_FACTURATION eltFactDeboursArmSurTVA = new ELEMENT_FACTURATION();

                    eltFactDeboursArmSurTVA.PUEF = matchedMafi.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                    eltFactDeboursArmSurTVA.PUEFBase = matchedMafi.CONNAISSEMENT.BLIL == "N" ? Math.Round(eltFactDeboursArmSur.PUEF.Value * eltFactDeboursArmSur.QTEEF.Value * (dcAcc.CODE_TVA.FirstOrDefault<CODE_TVA>(code => code.CodeTVA == "TVAAP").TauxTVA.Value / 100), 0, MidpointRounding.AwayFromZero) : 0;
                    eltFactDeboursArmSurTVA.CCArticle = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? articleTVACpteTiers.CCArticleEx : (articleTVACpteTiers.CodeTVA == "TVAAP" ? articleTVACpteTiers.CCArticle : articleTVACpteTiers.CCArticleEx);
                    eltFactDeboursArmSurTVA.CodeTVA = "TVAEX";
                    eltFactDeboursArmSurTVA.TauxTVA = 0;
                    eltFactDeboursArmSurTVA.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                    eltFactDeboursArmSurTVA.EltFacture = "MF";
                    eltFactDeboursArmSurTVA.DateJEF = DateTime.Now;
                    eltFactDeboursArmSurTVA.IdLP = lpTVACpteTiers.IdLP;
                    eltFactDeboursArmSurTVA.QTEEF = 1;
                    eltFactDeboursArmSurTVA.LibEF = "Débours armateur : TVA sur Surestaries Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactDeboursArmSur.QTEEF)).ToShortDateString();
                    eltFactDeboursArmSurTVA.PTDIT = 0;
                    eltFactDeboursArmSurTVA.UnitEF = lpTVACpteTiers.UniteLP;
                    eltFactDeboursArmSurTVA.IdEsc = matchedMafi.IdEsc;
                    eltFactDeboursArmSurTVA.IdMan = matchedMafi.IdMan;
                    eltFactDeboursArmSurTVA.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                    eltFactDeboursArmSurTVA.IdMafi = matchedMafi.IdMafi;
                    eltFactDeboursArmSurTVA.DestEF = "C";
                    eltFactDeboursArmSurTVA.StatutEF = "En cours";

                    dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactDeboursArmSurTVA);*/

                    //Complément stationnement
                    /*AH List<ELEMENT_FACTURATION> eltStatCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdMafi == idMafi && ef.LibEF.Contains("Séjour Mafi") 
                                                                   && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>();  */
                    List<ELEMENT_FACTURATION> eltStatCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                 where ef.IdMafi == idMafi && ef.CodeArticle=="1802"
                                                                 && ef.StatutEF != "Annule"
                                                                 select ef).ToList<ELEMENT_FACTURATION>();

                    /* List<ELEMENT_FACTURATION> eltSurtaxeCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                    where ef.IdMafi == idMafi && ef.LibEF.Contains("Surtaxe Séjour Mafi") && ef.StatutEF != "Annule"
                                                                    select ef).ToList<ELEMENT_FACTURATION>(); */
                    List<ELEMENT_FACTURATION> eltSurtaxeCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                    where ef.IdMafi == idMafi && ef.CodeArticle=="1808"
                                                                    && ef.StatutEF != "Annule"
                                                                    select ef).ToList<ELEMENT_FACTURATION>();

                    if ((dateFin - matchedMafi.FFSMafi.Value).Days <= 10)
                    {
                        ELEMENT_FACTURATION eltFactSejourMafi = new ELEMENT_FACTURATION();

                        eltFactSejourMafi.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafi.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafi.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafi.TauxTVA = eltFactSejourMafi.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafi.CCArticle = eltFactSejourMafi.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafi.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafi.EltFacture = "MF";
                        eltFactSejourMafi.DateJEF = DateTime.Now;
                        eltFactSejourMafi.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafi.QTEEF = dateFin.Date < finAncienSurest ? 0 : (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) <= 10) ? (dateFin - matchedMafi.FFSMafi.Value).Days - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //AH Séjour
                        eltFactSejourMafi.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafi.QTEEF)).ToShortDateString();
                        eltFactSejourMafi.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafi.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafi.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafi.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafi.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafi.DestEF = "C";
                        eltFactSejourMafi.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafi);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafi = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafi.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafi.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafi.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafi.TauxTVA = eltFactSurtaxeMafi.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafi.CCArticle = eltFactSurtaxeMafi.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafi.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafi.EltFacture = "MF";
                            eltFactSurtaxeMafi.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafi.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafi.QTEEF = dateFin.Date < finAncienSurest ? 0 : (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) <= 10) ? (dateFin - matchedMafi.FFSMafi.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafi.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafi.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafi.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafi.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafi.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafi.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafi.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafi.DestEF = "C";
                            eltFactSurtaxeMafi.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafi);
                        }
                    }
                    else if ((dateFin - matchedMafi.FFSMafi.Value).Days <= 10 + 20)
                    {
                        ELEMENT_FACTURATION eltFactSejourMafiN1 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN1.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN1.TauxTVA = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN1.CCArticle = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN1.EltFacture = "MF";
                        eltFactSejourMafiN1.DateJEF = DateTime.Now;
                        eltFactSejourMafiN1.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN1.QTEEF = (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) < 10) ? 10 - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //AH Séjour
                        eltFactSejourMafiN1.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN1.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN1.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN1.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN1.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN1.DestEF = "C";
                        eltFactSejourMafiN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN1);

                        ELEMENT_FACTURATION eltFactSejourMafiN2 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN2.PUEF = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.PUEFBase = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN2.TauxTVA = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN2.CCArticle = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN2.EltFacture = "MF";
                        eltFactSejourMafiN2.DateJEF = DateTime.Now;
                        eltFactSejourMafiN2.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN2.QTEEF = (dateFin - matchedMafi.FFSMafi.Value).Days - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltFactSejourMafiN1.QTEEF;
                        //Séjour
                        eltFactSejourMafiN2.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSejourMafiN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN2.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN2.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN2.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN2.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN2.DestEF = "C";
                        eltFactSejourMafiN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN2);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafiN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN1.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN1.TauxTVA = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN1.CCArticle = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN1.EltFacture = "MF";
                            eltFactSurtaxeMafiN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN1.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN1.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) < 10) ? 10 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //Surtaxe Séjour
                            eltFactSurtaxeMafiN1.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN1.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN1.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN1.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN1.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN1.DestEF = "C";
                            eltFactSurtaxeMafiN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN1);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN2.PUEF = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.PUEFBase = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN2.TauxTVA = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN2.CCArticle = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN2.EltFacture = "MF";
                            eltFactSurtaxeMafiN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN2.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN2.QTEEF = (dateFin - matchedMafi.FFSMafi.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltFactSurtaxeMafiN1.QTEEF;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN2.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN2.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN2.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN2.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN2.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN2.DestEF = "C";
                            eltFactSurtaxeMafiN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN2);
                        }
                    }
                    else if ((dateFin - matchedMafi.FFSMafi.Value).Days <= 10 + 20 + 30)
                    {
                        ELEMENT_FACTURATION eltFactSejourMafiN1 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN1.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN1.TauxTVA = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN1.CCArticle = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN1.EltFacture = "MF";
                        eltFactSejourMafiN1.DateJEF = DateTime.Now;
                        eltFactSejourMafiN1.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN1.QTEEF = (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) < 10) ? 10 - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //Séjour
                        eltFactSejourMafiN1.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN1.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN1.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN1.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN1.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN1.DestEF = "C";
                        eltFactSejourMafiN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN1);

                        ELEMENT_FACTURATION eltFactSejourMafiN2 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN2.PUEF = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.PUEFBase = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN2.TauxTVA = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN2.CCArticle = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN2.EltFacture = "MF";
                        eltFactSejourMafiN2.DateJEF = DateTime.Now;
                        eltFactSejourMafiN2.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN2.QTEEF = (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) < 20) ? 20 - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //Séjour
                        eltFactSejourMafiN2.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSejourMafiN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN2.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN2.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN2.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN2.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN2.DestEF = "C";
                        eltFactSejourMafiN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN2);

                        ELEMENT_FACTURATION eltFactSejourMafiN3 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN3.PUEF = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.PUEFBase = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN3.TauxTVA = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN3.CCArticle = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN3.EltFacture = "MF";
                        eltFactSejourMafiN3.DateJEF = DateTime.Now;
                        eltFactSejourMafiN3.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN3.QTEEF = (dateFin.Date - matchedMafi.FFSMafi.Value).Days - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU3LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltFactSejourMafiN1.QTEEF - eltFactSejourMafiN2.QTEEF;
                        //AH Séjour
                        eltFactSejourMafiN3.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF + eltFactSejourMafiN3.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN3.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN3.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN3.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN3.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN3.DestEF = "C";
                        eltFactSejourMafiN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN3);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafiN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN1.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN1.TauxTVA = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN1.CCArticle = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN1.EltFacture = "MF";
                            eltFactSurtaxeMafiN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN1.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN1.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) < 10) ? 10 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN1.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN1.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN1.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN1.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN1.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN1.DestEF = "C";
                            eltFactSurtaxeMafiN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN1);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN2.PUEF = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.PUEFBase = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN2.TauxTVA = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN2.CCArticle = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN2.EltFacture = "MF";
                            eltFactSurtaxeMafiN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN2.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN2.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) < 20) ? 20 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN2.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN2.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN2.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN2.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN2.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN2.DestEF = "C";
                            eltFactSurtaxeMafiN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN2);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN3.PUEF = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.PUEFBase = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN3.TauxTVA = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN3.CCArticle = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN3.EltFacture = "MF";
                            eltFactSurtaxeMafiN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN3.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN3.QTEEF = (dateFin.Date - matchedMafi.FFSMafi.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU3LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltFactSurtaxeMafiN1.QTEEF - eltFactSurtaxeMafiN2.QTEEF;
                            //Surtaxe Séjour
                            eltFactSurtaxeMafiN3.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF + eltFactSurtaxeMafiN3.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN3.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN3.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN3.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN3.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN3.DestEF = "C";
                            eltFactSurtaxeMafiN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN3);
                        }
                    }
                    else
                    {
                        ELEMENT_FACTURATION eltFactSejourMafiN1 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN1.PUEF = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.PUEFBase = (lpSejourMafi.PU1LP - lpSejourMafi.PU1LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN1.TauxTVA = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN1.CCArticle = eltFactSejourMafiN1.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN1.EltFacture = "MF";
                        eltFactSejourMafiN1.DateJEF = DateTime.Now;
                        eltFactSejourMafiN1.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN1.QTEEF = (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) < 10) ? 10 - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //AH Séjour
                        eltFactSejourMafiN1.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN1.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN1.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN1.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN1.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN1.DestEF = "C";
                        eltFactSejourMafiN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN1);

                        ELEMENT_FACTURATION eltFactSejourMafiN2 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN2.PUEF = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.PUEFBase = (lpSejourMafi.PU2LP - lpSejourMafi.PU2LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN2.TauxTVA = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN2.CCArticle = eltFactSejourMafiN2.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN2.EltFacture = "MF";
                        eltFactSejourMafiN2.DateJEF = DateTime.Now;
                        eltFactSejourMafiN2.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN2.QTEEF = (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) < 20) ? 20 - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //AH Séjour
                        eltFactSejourMafiN2.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSejourMafiN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN2.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN2.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN2.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN2.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN2.DestEF = "C";
                        eltFactSejourMafiN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN2);

                        ELEMENT_FACTURATION eltFactSejourMafiN3 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN3.PUEF = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.PUEFBase = (lpSejourMafi.PU3LP - lpSejourMafi.PU3LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN3.TauxTVA = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN3.CCArticle = eltFactSejourMafiN3.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN3.EltFacture = "MF";
                        eltFactSejourMafiN3.DateJEF = DateTime.Now;
                        eltFactSejourMafiN3.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN3.QTEEF = (eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU3LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) < 30) ? 30 - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU3LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) : 0;
                        //AH Séjour
                        eltFactSejourMafiN3.LibEF = articleSejourMafi.LibArticle+" Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF + eltFactSejourMafiN3.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN3.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN3.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN3.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN3.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN3.DestEF = "C";
                        eltFactSejourMafiN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN3);

                        ELEMENT_FACTURATION eltFactSejourMafiN4 = new ELEMENT_FACTURATION();

                        eltFactSejourMafiN4.PUEF = (lpSejourMafi.PU4LP - lpSejourMafi.PU4LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN4.PUEFBase = (lpSejourMafi.PU4LP - lpSejourMafi.PU4LP * derogation) * matchedMafi.PoidsCMafi.Value * 0.001;
                        eltFactSejourMafiN4.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourMafiN4.TauxTVA = eltFactSejourMafiN4.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourMafiN4.CCArticle = eltFactSejourMafiN4.CodeTVA == "TVAEX" ? articleSejourMafi.CCArticleEx : articleSejourMafi.CCArticle;
                        eltFactSejourMafiN4.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourMafiN4.EltFacture = "MF";
                        eltFactSejourMafiN4.DateJEF = DateTime.Now;
                        eltFactSejourMafiN4.IdLP = lpSejourMafi.IdLP;
                        eltFactSejourMafiN4.QTEEF = (dateFin.Date - matchedMafi.FFSMafi.Value).Days - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU4LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU3LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU2LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltStatCalcules.Where(el => el.PUEFBase == lpSejourMafi.PU1LP * (1 - derogation) * matchedMafi.PoidsCMafi.Value * 0.001).Sum(el => el.QTEEF) - eltFactSejourMafiN1.QTEEF - eltFactSejourMafiN2.QTEEF - eltFactSejourMafiN3.QTEEF;
                        //AH Séjour
                        eltFactSejourMafiN4.LibEF =articleSejourMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF + eltFactSejourMafiN3.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSejourMafiN1.QTEEF + eltFactSejourMafiN2.QTEEF + eltFactSejourMafiN3.QTEEF + eltFactSejourMafiN4.QTEEF)).ToShortDateString();
                        eltFactSejourMafiN4.UnitEF = lpSejourMafi.UniteLP;
                        eltFactSejourMafiN4.IdEsc = matchedMafi.IdEsc;
                        eltFactSejourMafiN4.IdMan = matchedMafi.IdMan;
                        eltFactSejourMafiN4.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                        eltFactSejourMafiN4.IdMafi = matchedMafi.IdMafi;
                        eltFactSejourMafiN4.DestEF = "C";
                        eltFactSejourMafiN4.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourMafiN4);

                        if (matchedMafi.VolMMafi >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeMafiN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN1.PUEF = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.PUEFBase = (lpSurtaxeMafi.PU1LP - lpSurtaxeMafi.PU1LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN1.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN1.TauxTVA = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN1.CCArticle = eltFactSurtaxeMafiN1.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN1.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN1.EltFacture = "MF";
                            eltFactSurtaxeMafiN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN1.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN1.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) < 10) ? 10 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN1.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN1.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN1.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN1.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN1.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN1.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN1.DestEF = "C";
                            eltFactSurtaxeMafiN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN1);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN2.PUEF = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.PUEFBase = (lpSurtaxeMafi.PU2LP - lpSurtaxeMafi.PU2LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN2.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN2.TauxTVA = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN2.CCArticle = eltFactSurtaxeMafiN2.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN2.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN2.EltFacture = "MF";
                            eltFactSurtaxeMafiN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN2.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN2.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) < 20) ? 20 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //Surtaxe Séjour
                            eltFactSurtaxeMafiN2.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN2.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN2.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN2.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN2.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN2.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN2.DestEF = "C";
                            eltFactSurtaxeMafiN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN2);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN3.PUEF = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.PUEFBase = (lpSurtaxeMafi.PU3LP - lpSurtaxeMafi.PU3LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN3.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN3.TauxTVA = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN3.CCArticle = eltFactSurtaxeMafiN3.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN3.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN3.EltFacture = "MF";
                            eltFactSurtaxeMafiN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN3.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN3.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU3LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) < 30) ? 30 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU3LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN3.LibEF =articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF + eltFactSurtaxeMafiN3.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN3.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN3.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN3.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN3.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN3.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN3.DestEF = "C";
                            eltFactSurtaxeMafiN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN3);

                            ELEMENT_FACTURATION eltFactSurtaxeMafiN4 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeMafiN4.PUEF = (lpSurtaxeMafi.PU4LP - lpSurtaxeMafi.PU4LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN4.PUEFBase = (lpSurtaxeMafi.PU4LP - lpSurtaxeMafi.PU4LP * derogation) * matchedMafi.VolMMafi;
                            eltFactSurtaxeMafiN4.CodeTVA = matchedMafi.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedMafi.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedMafi.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeMafiN4.TauxTVA = eltFactSurtaxeMafiN4.CodeTVA == "TVAEX" ? 0 : matchedMafi.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedMafi.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeMafiN4.CCArticle = eltFactSurtaxeMafiN4.CodeTVA == "TVAEX" ? articleSurtaxeMafi.CCArticleEx : articleSurtaxeMafi.CCArticle;
                            eltFactSurtaxeMafiN4.CCCP = matchedMafi.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeMafiN4.EltFacture = "MF";
                            eltFactSurtaxeMafiN4.DateJEF = DateTime.Now;
                            eltFactSurtaxeMafiN4.IdLP = lpSurtaxeMafi.IdLP;
                            eltFactSurtaxeMafiN4.QTEEF = (dateFin.Date - matchedMafi.FFSMafi.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU4LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU3LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU2LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeMafi.PU1LP * (1 - derogation) * matchedMafi.VolMMafi).Sum(el => el.QTEEF) - eltFactSurtaxeMafiN1.QTEEF - eltFactSurtaxeMafiN2.QTEEF - eltFactSurtaxeMafiN3.QTEEF;
                            //AH Surtaxe Séjour
                            eltFactSurtaxeMafiN4.LibEF = articleSurtaxeMafi.LibArticle+ " Mafi N° " + matchedMafi.NumMafi + " : " + finAncienSurest.AddDays(1 + Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF + eltFactSurtaxeMafiN3.QTEEF)).ToShortDateString() + " - " + finAncienSurest.AddDays(Convert.ToInt32(eltFactSurtaxeMafiN1.QTEEF + eltFactSurtaxeMafiN2.QTEEF + eltFactSurtaxeMafiN3.QTEEF + eltFactSurtaxeMafiN4.QTEEF)).ToShortDateString();
                            eltFactSurtaxeMafiN4.UnitEF = lpSurtaxeMafi.UniteLP;
                            eltFactSurtaxeMafiN4.IdEsc = matchedMafi.IdEsc;
                            eltFactSurtaxeMafiN4.IdMan = matchedMafi.IdMan;
                            eltFactSurtaxeMafiN4.IdBL = matchedMafi.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeMafiN4.IdMafi = matchedMafi.IdMafi;
                            eltFactSurtaxeMafiN4.DestEF = "C";
                            eltFactSurtaxeMafiN4.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeMafiN4);
                        }
                    }
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedMafi;
            }
        }

        #endregion

        #region Conventionnel

        public CONVENTIONNEL CalculerSejourConventionnel(int idGC, DateTime dateFin, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedConventionnel = (from gc in dcAcc.GetTable<CONVENTIONNEL>()
                                            where gc.IdGC == idGC
                                            select gc).SingleOrDefault<CONVENTIONNEL>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "General cargo : Calcul du stationnement").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour calculer le stationnement d'un general cargo. Veuillez contacter un administrateur");
                }

                if (matchedConventionnel == null)
                {
                    throw new EnregistrementInexistant("Véhicule inexistant");
                }

                var opIdentification = (from op in dcAcc.GetTable<OPERATION_CONVENTIONNEL>()
                                        where op.IdTypeOp == 25 && op.IdGC == idGC
                                        select op).FirstOrDefault<OPERATION_CONVENTIONNEL>();

                //if (matchedVehicule.VehPorte == "Y")
                //{
                //    throw new ApplicationException("vous ne pouvez pas calculer le séjour pour un véhicule porté");
                //}

                //if (matchedConventionnel.ESCALE.RGPEsc != "Y")
                //{
                //    throw new FacturationException("Il n'est pas possible de facturer le séjour sur ce véhicue, car le rôle Gestionnaire de Parc n'est pas activé sur l'escale");
                //}

                if (opIdentification == null)
                {
                    throw new FacturationException("Vous ne pouvez pas calculer le stationnement d'un général cargo s'il n'a été au préalable identifié. Procédez d'abord à l'opération d'identification");
                }

                DateTime dte = DateTime.Now;

                DateTime finAncienSejour = DateTime.Now;

                if (matchedConventionnel.FSGC.HasValue)
                {
                    finAncienSejour = matchedConventionnel.FSGC.Value;
                }

                matchedConventionnel.FSGC = dateFin;

                List<PARAMETRE> parametres = dcAcc.GetTable<PARAMETRE>().ToList<PARAMETRE>();
                List<ARTICLE> articles = dcAcc.GetTable<ARTICLE>().ToList<ARTICLE>();

               /* if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                     where ef.IdGC == idGC && ef.LibEF.Contains("Séjour Conventionnel GC")
                     select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)*/
                if ((from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                     where ef.IdGC == idGC && ef.CodeArticle=="1802" select ef).Count(elt => elt.StatutEF == "Proforma" || elt.IdFD.HasValue) == 0)
                {
                   /*AH List<ELEMENT_FACTURATION> eltsSejourConventionnel = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                where ef.IdGC == idGC && ef.LibEF.Contains("Séjour Conventionnel GC")
                                                                select ef).ToList<ELEMENT_FACTURATION>(); */

                    List<ELEMENT_FACTURATION> eltsSejourConventionnel = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                         where ef.IdGC == idGC && ef.CodeArticle=="1802"
                                                                         select ef).ToList<ELEMENT_FACTURATION>();

                    foreach (ELEMENT_FACTURATION elt in eltsSejourConventionnel)
                    {
                        elt.StatutEF = "Annule";
                    }
                }

                /* ARTICLE articleSejourConventionnel = (from art in articles
                                                      from par in parametres
                                                      where art.CodeArticle == par.CodeAF && par.NomAF == "Séjour Conventionnel"
                                                      select art).FirstOrDefault<ARTICLE>(); */

                ARTICLE articleSejourConventionnel = (from art in articles  where art.CodeArticle == 1802
                                                      select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpSejourConventionnel = articleSejourConventionnel.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /*AH ARTICLE articleSurtaxeConventionnel = (from art in articles
                                                      from par in parametres
                                                       where art.CodeArticle == par.CodeAF && par.NomAF == "Surtaxe Séjour Conventionnel"
                                                      select art).FirstOrDefault<ARTICLE>(); */

                ARTICLE articleSurtaxeConventionnel = (from art in articles  where art.CodeArticle == 1808
                                                       select art).FirstOrDefault<ARTICLE>();

                LIGNE_PRIX lpSurtaxeConventionnel = articleSurtaxeConventionnel.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte);

                /* bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where ef.IdGC == idGC && (ef.LibEF.Contains("Séjour Conventionnel") || 
                                      ef.LibEF.Contains("Surtaxe Séjour Conventionnel")) && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                      select ef).ToList<ELEMENT_FACTURATION>().Count != 0;
                */
                bool isEltsNotFree = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                      where ef.IdGC == idGC && (ef.CodeArticle=="1802" ||
                                      ef.CodeArticle=="1808") && (ef.StatutEF == "Proforma" || ef.IdFD != null)
                                      select ef).ToList<ELEMENT_FACTURATION>().Count != 0;

                if (!isEltsNotFree)
                {
                    double derogation = (matchedConventionnel.CONNAISSEMENT.BLIL == "Y" || matchedConventionnel.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                    if ((dateFin - matchedConventionnel.FFGC.Value).Days <= 10)
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnel = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnel.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnel.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnel.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnel.TauxTVA = eltFactSejourConventionnel.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnel.CCArticle = eltFactSejourConventionnel.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnel.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnel.EltFacture = "GC";
                        //AH
                        eltFactSejourConventionnel.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                        eltFactSejourConventionnel.DateJEF = DateTime.Now;
                        eltFactSejourConventionnel.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnel.QTEEF = dateFin.Date < matchedConventionnel.FFGC ? 0 : (dateFin.Date - matchedConventionnel.FFGC.Value).Days;
                        eltFactSejourConventionnel.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnel.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnel.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnel.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnel.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnel.DestEF = "C";
                        eltFactSejourConventionnel.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnel);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnel = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnel.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnel.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnel.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnel.TauxTVA = eltFactSurtaxeConventionnel.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnel.CCArticle = eltFactSurtaxeConventionnel.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnel.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnel.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnel.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                            eltFactSurtaxeConventionnel.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnel.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnel.QTEEF = dateFin.Date < matchedConventionnel.FFGC ? 0 : (dateFin.Date - matchedConventionnel.FFGC.Value).Days;
                            eltFactSurtaxeConventionnel.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnel.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnel.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnel.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnel.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnel.DestEF = "C";
                            eltFactSurtaxeConventionnel.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnel);
                        }
                    }
                    else if ((dateFin - matchedConventionnel.FFGC.Value).Days <= 10 + 20)
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnelN1 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN1.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN1.TauxTVA = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN1.CCArticle = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN1.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN1.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10).ToShortDateString();
                        eltFactSejourConventionnelN1.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN1.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN1.QTEEF = 10;
                        eltFactSejourConventionnelN1.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN1.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN1.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN1.DestEF = "C";
                        eltFactSejourConventionnelN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN1);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN2 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN2.PUEF = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.PUEFBase = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN2.TauxTVA = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN2.CCArticle = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN2.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN2.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                        eltFactSejourConventionnelN2.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN2.QTEEF = (dateFin - matchedConventionnel.FFGC.Value).Days - 10;
                        eltFactSejourConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN2.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN2.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN2.DestEF = "C";
                        eltFactSejourConventionnelN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN2);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN1.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN1.TauxTVA = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN1.CCArticle = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN1.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN1.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10).ToShortDateString();
                            eltFactSurtaxeConventionnelN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN1.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN1.QTEEF = 10;
                            eltFactSurtaxeConventionnelN1.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN1.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN1.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN1.DestEF = "C";
                            eltFactSurtaxeConventionnelN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN1);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN2.PUEF = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.PUEFBase = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN2.TauxTVA = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN2.CCArticle = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN2.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN2.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                            eltFactSurtaxeConventionnelN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN2.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN2.QTEEF = (dateFin - matchedConventionnel.FFGC.Value).Days - 10;
                            eltFactSurtaxeConventionnelN2.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN2.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN2.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN2.DestEF = "C";
                            eltFactSurtaxeConventionnelN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN2);
                        }
                    }
                    else if ((dateFin - matchedConventionnel.FFGC.Value).Days <= 10 + 20 + 30)
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnelN1 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN1.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN1.TauxTVA = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN1.CCArticle = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN1.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN1.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10).ToShortDateString();
                        eltFactSejourConventionnelN1.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN1.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN1.QTEEF = 10;
                        eltFactSejourConventionnelN1.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN1.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN1.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN1.DestEF = "C";
                        eltFactSejourConventionnelN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN1);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN2 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN2.PUEF = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.PUEFBase = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN2.TauxTVA = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN2.CCArticle = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN2.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN2.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10 + 20).ToShortDateString();
                        eltFactSejourConventionnelN2.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN2.QTEEF = 20;
                        eltFactSejourConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN2.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN2.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN2.DestEF = "C";
                        eltFactSejourConventionnelN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN2);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN3 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN3.PUEF = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.PUEFBase = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN3.TauxTVA = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN3.CCArticle = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN3.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN3.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                        eltFactSejourConventionnelN3.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN3.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN3.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - 10 - 20;
                        eltFactSejourConventionnelN3.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN3.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN3.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN3.DestEF = "C";
                        eltFactSejourConventionnelN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN3);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN1.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN1.TauxTVA = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN1.CCArticle = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN1.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN1.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10).ToShortDateString();
                            eltFactSurtaxeConventionnelN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN1.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN1.QTEEF = 10;
                            eltFactSurtaxeConventionnelN1.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN1.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN1.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN1.DestEF = "C";
                            eltFactSurtaxeConventionnelN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN1);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN2.PUEF = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.PUEFBase = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN2.TauxTVA = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN2.CCArticle = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN2.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN2.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10 + 20).ToShortDateString();
                            eltFactSurtaxeConventionnelN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN2.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN2.QTEEF = 20;
                            eltFactSurtaxeConventionnelN2.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN2.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN2.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN2.DestEF = "C";
                            eltFactSurtaxeConventionnelN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN2);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN3.PUEF = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.PUEFBase = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN3.TauxTVA = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN3.CCArticle = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN3.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN3.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                            eltFactSurtaxeConventionnelN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN3.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN3.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - 10 - 20;
                            eltFactSurtaxeConventionnelN3.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN3.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN3.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN3.DestEF = "C";
                            eltFactSurtaxeConventionnelN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN3);
                        }
                    }
                    else
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnelN1 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN1.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN1.TauxTVA = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN1.CCArticle = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN1.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN1.LibEF = articleSejourConventionnel.LibArticle + " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10).ToShortDateString();
                        eltFactSejourConventionnelN1.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN1.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN1.QTEEF = 10;
                        eltFactSejourConventionnelN1.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN1.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN1.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN1.DestEF = "C";
                        eltFactSejourConventionnelN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN1);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN2 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN2.PUEF = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.PUEFBase = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN2.TauxTVA = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN2.CCArticle = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN2.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN2.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10 + 20).ToShortDateString();
                        eltFactSejourConventionnelN2.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN2.QTEEF = 20;
                        eltFactSejourConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN2.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN2.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN2.DestEF = "C";
                        eltFactSejourConventionnelN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN2);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN3 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN3.PUEF = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.PUEFBase = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN3.TauxTVA = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN3.CCArticle = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN3.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN3.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10 + 20 + 30).ToShortDateString();
                        eltFactSejourConventionnelN3.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN3.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN3.QTEEF = 30;
                        eltFactSejourConventionnelN3.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN3.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN3.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN3.DestEF = "C";
                        eltFactSejourConventionnelN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN3);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN4 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN4.PUEF = (lpSejourConventionnel.PU4LP - lpSejourConventionnel.PU4LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN4.PUEFBase = (lpSejourConventionnel.PU4LP - lpSejourConventionnel.PU4LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN4.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN4.TauxTVA = eltFactSejourConventionnelN4.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN4.CCArticle = eltFactSejourConventionnelN4.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN4.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN4.EltFacture = "GC";
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN4.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10 + 20 + 30).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                        eltFactSejourConventionnelN4.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN4.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN4.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - 10 - 20 - 30;
                        eltFactSejourConventionnelN4.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN4.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN4.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN4.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN4.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN4.DestEF = "C";
                        eltFactSejourConventionnelN4.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN4);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN1.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN1.TauxTVA = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN1.CCArticle = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN1.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN1.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10).ToShortDateString();
                            eltFactSurtaxeConventionnelN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN1.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN1.QTEEF = 10;
                            eltFactSurtaxeConventionnelN1.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN1.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN1.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN1.DestEF = "C";
                            eltFactSurtaxeConventionnelN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN1);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN2.PUEF = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.PUEFBase = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN2.TauxTVA = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN2.CCArticle = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN2.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN2.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10 + 20).ToShortDateString();
                            eltFactSurtaxeConventionnelN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN2.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN2.QTEEF = 20;
                            eltFactSurtaxeConventionnelN2.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN2.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN2.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN2.DestEF = "C";
                            eltFactSurtaxeConventionnelN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN2);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN3.PUEF = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.PUEFBase = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN3.TauxTVA = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN3.CCArticle = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN3.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN3.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10 + 20).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays(10 + 20 + 30).ToShortDateString();
                            eltFactSurtaxeConventionnelN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN3.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN3.QTEEF = 30;
                            eltFactSurtaxeConventionnelN3.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN3.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN3.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN3.DestEF = "C";
                            eltFactSurtaxeConventionnelN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN3);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN4 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN4.PUEF = (lpSurtaxeConventionnel.PU4LP - lpSurtaxeConventionnel.PU4LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN4.PUEFBase = (lpSurtaxeConventionnel.PU4LP - lpSurtaxeConventionnel.PU4LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN4.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN4.TauxTVA = eltFactSurtaxeConventionnelN4.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN4.CCArticle = eltFactSurtaxeConventionnelN4.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN4.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN4.EltFacture = "GC";
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN4.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + matchedConventionnel.FFGC.Value.AddDays(1 + 10 + 20 + 30).ToShortDateString() + " - " + matchedConventionnel.FFGC.Value.AddDays((dateFin - matchedConventionnel.FFGC.Value).Days).ToShortDateString();
                            eltFactSurtaxeConventionnelN4.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN4.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN4.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - 10 - 20 - 30;
                            eltFactSurtaxeConventionnelN4.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN4.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN4.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN4.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN4.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN4.DestEF = "C";
                            eltFactSurtaxeConventionnelN4.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN4);
                        }
                    }
                }
                else
                {

                    /* List<ELEMENT_FACTURATION> eltSejourCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdGC == idGC && ef.LibEF.Contains("Séjour Conventionnel") 
                                                                   && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>(); */

                    List<ELEMENT_FACTURATION> eltSejourCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdGC == idGC && ef.CodeArticle=="1802" 
                                                                   && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>();

                    /* List<ELEMENT_FACTURATION> eltSurtaxeCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdGC == idGC && ef.LibEF.Contains("Surtaxe Séjour Conventionnel") && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>(); */

                    List<ELEMENT_FACTURATION> eltSurtaxeCalcules = (from ef in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                                   where ef.IdGC == idGC && ef.CodeArticle=="1808" 
                                                                   && ef.StatutEF != "Annule"
                                                                   select ef).ToList<ELEMENT_FACTURATION>();

                    double derogation = (matchedConventionnel.CONNAISSEMENT.BLIL == "Y" || matchedConventionnel.CONNAISSEMENT.BLGN == "Y") ? 0.75 : 0;
                    if ((dateFin - matchedConventionnel.FFGC.Value).Days <= 10)
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnel = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnel.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnel.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnel.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnel.TauxTVA = eltFactSejourConventionnel.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnel.CCArticle = eltFactSejourConventionnel.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnel.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnel.EltFacture = "GC";
                        eltFactSejourConventionnel.DateJEF = DateTime.Now;
                        eltFactSejourConventionnel.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnel.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) <= 10) ? (dateFin - matchedConventionnel.FFGC.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnel.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnel.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnel.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnel.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnel.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnel.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnel.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnel.DestEF = "C";
                        eltFactSejourConventionnel.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnel);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnel = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnel.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnel.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnel.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnel.TauxTVA = eltFactSurtaxeConventionnel.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnel.CCArticle = eltFactSurtaxeConventionnel.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnel.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnel.EltFacture = "GC";
                            eltFactSurtaxeConventionnel.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnel.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnel.QTEEF = dateFin.Date < finAncienSejour ? 0 : (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) <= 10) ? (dateFin - matchedConventionnel.FFGC.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                           //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnel.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnel.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnel.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnel.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnel.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnel.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnel.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnel.DestEF = "C";
                            eltFactSurtaxeConventionnel.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnel);
                        }
                    }
                    else if ((dateFin - matchedConventionnel.FFGC.Value).Days <= 10 + 20)
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnelN1 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN1.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN1.TauxTVA = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN1.CCArticle = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN1.EltFacture = "GC";
                        eltFactSejourConventionnelN1.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN1.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) < 10) ? 10 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN1.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN1.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN1.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN1.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN1.DestEF = "C";
                        eltFactSejourConventionnelN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN1);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN2 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN2.PUEF = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.PUEFBase = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN2.TauxTVA = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN2.CCArticle = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN2.EltFacture = "GC";
                        eltFactSejourConventionnelN2.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN2.QTEEF = (dateFin - matchedConventionnel.FFGC.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltFactSejourConventionnelN1.QTEEF;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN2.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN2.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN2.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN2.DestEF = "C";
                        eltFactSejourConventionnelN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN2);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN1.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN1.TauxTVA = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN1.CCArticle = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN1.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN1.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN1.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) < 10) ? 10 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN1.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN1.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN1.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN1.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN1.DestEF = "C";
                            eltFactSurtaxeConventionnelN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN1);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN2.PUEF = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.PUEFBase = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN2.TauxTVA = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN2.CCArticle = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN2.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN2.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN2.QTEEF = (dateFin - matchedConventionnel.FFGC.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltFactSurtaxeConventionnelN1.QTEEF;
                           //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN2.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN2.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN2.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN2.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN2.DestEF = "C";
                            eltFactSurtaxeConventionnelN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN2);
                        }
                    }
                    else if ((dateFin - matchedConventionnel.FFGC.Value).Days <= 10 + 20 + 30)
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnelN1 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN1.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN1.TauxTVA = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN1.CCArticle = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN1.EltFacture = "GC";
                        eltFactSejourConventionnelN1.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN1.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) < 10) ? 10 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                       //AH Séjour Conventionnel
                        eltFactSejourConventionnelN1.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN1.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN1.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN1.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN1.DestEF = "C";
                        eltFactSejourConventionnelN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN1);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN2 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN2.PUEF = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.PUEFBase = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN2.TauxTVA = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN2.CCArticle = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN2.EltFacture = "GC";
                        eltFactSejourConventionnelN2.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN2.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN2.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN2.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN2.DestEF = "C";
                        eltFactSejourConventionnelN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN2);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN3 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN3.PUEF = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.PUEFBase = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN3.TauxTVA = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN3.CCArticle = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN3.EltFacture = "GC";
                        eltFactSejourConventionnelN3.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN3.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN3.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltFactSejourConventionnelN1.QTEEF - eltFactSejourConventionnelN2.QTEEF;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN3.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF + eltFactSejourConventionnelN3.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN3.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN3.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN3.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN3.DestEF = "C";
                        eltFactSejourConventionnelN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN3);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN1.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN1.TauxTVA = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN1.CCArticle = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN1.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN1.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN1.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) < 10) ? 10 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                           //Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN1.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN1.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN1.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN1.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN1.DestEF = "C";
                            eltFactSurtaxeConventionnelN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN1);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN2.PUEF = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.PUEFBase = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN2.TauxTVA = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN2.CCArticle = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN2.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN2.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN2.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) < 20) ? 20 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN2.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN2.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN2.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN2.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN2.DestEF = "C";
                            eltFactSurtaxeConventionnelN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN2);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN3.PUEF = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.PUEFBase = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN3.TauxTVA = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN3.CCArticle = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN3.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN3.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN3.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltFactSurtaxeConventionnelN1.QTEEF - eltFactSurtaxeConventionnelN2.QTEEF;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN3.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF + eltFactSurtaxeConventionnelN3.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN3.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN3.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN3.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN3.DestEF = "C";
                            eltFactSurtaxeConventionnelN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN3);
                        }
                    }
                    else
                    {
                        ELEMENT_FACTURATION eltFactSejourConventionnelN1 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN1.PUEF = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.PUEFBase = (lpSejourConventionnel.PU1LP - lpSejourConventionnel.PU1LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN1.TauxTVA = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN1.CCArticle = eltFactSejourConventionnelN1.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN1.EltFacture = "GC";
                        eltFactSejourConventionnelN1.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN1.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN1.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) < 10) ? 10 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                       //AH Séjour Conventionnel
                        eltFactSejourConventionnelN1.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN1.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN1.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN1.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN1.DestEF = "C";
                        eltFactSejourConventionnelN1.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN1);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN2 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN2.PUEF = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.PUEFBase = (lpSejourConventionnel.PU2LP - lpSejourConventionnel.PU2LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN2.TauxTVA = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN2.CCArticle = eltFactSejourConventionnelN2.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN2.EltFacture = "GC";
                        eltFactSejourConventionnelN2.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN2.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) < 20) ? 20 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN2.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN2.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN2.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN2.DestEF = "C";
                        eltFactSejourConventionnelN2.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN2);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN3 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN3.PUEF = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.PUEFBase = (lpSejourConventionnel.PU3LP - lpSejourConventionnel.PU3LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN3.TauxTVA = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN3.CCArticle = eltFactSejourConventionnelN3.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN3.EltFacture = "GC";
                        eltFactSejourConventionnelN3.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN3.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN3.QTEEF = (eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) < 30) ? 30 - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) : 0;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN3.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF + eltFactSejourConventionnelN3.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN3.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN3.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN3.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN3.DestEF = "C";
                        eltFactSejourConventionnelN3.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN3);

                        ELEMENT_FACTURATION eltFactSejourConventionnelN4 = new ELEMENT_FACTURATION();

                        eltFactSejourConventionnelN4.PUEF = (lpSejourConventionnel.PU4LP - lpSejourConventionnel.PU4LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN4.PUEFBase = (lpSejourConventionnel.PU4LP - lpSejourConventionnel.PU4LP * derogation) * matchedConventionnel.PoidsCGC;
                        eltFactSejourConventionnelN4.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                        eltFactSejourConventionnelN4.TauxTVA = eltFactSejourConventionnelN4.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                        eltFactSejourConventionnelN4.CCArticle = eltFactSejourConventionnelN4.CodeTVA == "TVAEX" ? articleSejourConventionnel.CCArticleEx : articleSejourConventionnel.CCArticle;
                        eltFactSejourConventionnelN4.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFactSejourConventionnelN4.EltFacture = "GC";
                        eltFactSejourConventionnelN4.DateJEF = DateTime.Now;
                        eltFactSejourConventionnelN4.IdLP = lpSejourConventionnel.IdLP;
                        eltFactSejourConventionnelN4.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU4LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltSejourCalcules.Where(el => el.PUEFBase == lpSejourConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.PoidsCGC).Sum(el => el.QTEEF) - eltFactSejourConventionnelN1.QTEEF - eltFactSejourConventionnelN2.QTEEF - eltFactSejourConventionnelN3.QTEEF;
                        //AH Séjour Conventionnel
                        eltFactSejourConventionnelN4.LibEF =articleSejourConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF + eltFactSejourConventionnelN3.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSejourConventionnelN1.QTEEF + eltFactSejourConventionnelN2.QTEEF + eltFactSejourConventionnelN3.QTEEF + eltFactSejourConventionnelN4.QTEEF)).ToShortDateString();
                        eltFactSejourConventionnelN4.UnitEF = lpSejourConventionnel.UniteLP;
                        eltFactSejourConventionnelN4.IdEsc = matchedConventionnel.IdEsc;
                        eltFactSejourConventionnelN4.IdMan = matchedConventionnel.IdMan;
                        eltFactSejourConventionnelN4.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                        eltFactSejourConventionnelN4.IdGC = matchedConventionnel.IdGC;
                        eltFactSejourConventionnelN4.DestEF = "C";
                        eltFactSejourConventionnelN4.StatutEF = "En cours";

                        dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSejourConventionnelN4);

                        if (matchedConventionnel.VolCGC >= 10)
                        {
                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN1 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN1.PUEF = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.PUEFBase = (lpSurtaxeConventionnel.PU1LP - lpSurtaxeConventionnel.PU1LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN1.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN1.TauxTVA = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN1.CCArticle = eltFactSurtaxeConventionnelN1.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN1.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN1.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN1.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN1.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN1.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) < 10) ? 10 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN1.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN1.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN1.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN1.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN1.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN1.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN1.DestEF = "C";
                            eltFactSurtaxeConventionnelN1.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN1);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN2 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN2.PUEF = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.PUEFBase = (lpSurtaxeConventionnel.PU2LP - lpSurtaxeConventionnel.PU2LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN2.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN2.TauxTVA = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN2.CCArticle = eltFactSurtaxeConventionnelN2.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN2.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN2.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN2.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN2.IdLP = lpSejourConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN2.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) < 20) ? 20 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN2.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN2.UnitEF = lpSejourConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN2.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN2.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN2.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN2.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN2.DestEF = "C";
                            eltFactSurtaxeConventionnelN2.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN2);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN3 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN3.PUEF = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.PUEFBase = (lpSurtaxeConventionnel.PU3LP - lpSurtaxeConventionnel.PU3LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN3.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN3.TauxTVA = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN3.CCArticle = eltFactSurtaxeConventionnelN3.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN3.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN3.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN3.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN3.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN3.QTEEF = (eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) < 30) ? 30 - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) : 0;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN3.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF + eltFactSurtaxeConventionnelN3.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN3.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN3.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN3.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN3.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN3.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN3.DestEF = "C";
                            eltFactSurtaxeConventionnelN3.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN3);

                            ELEMENT_FACTURATION eltFactSurtaxeConventionnelN4 = new ELEMENT_FACTURATION();

                            eltFactSurtaxeConventionnelN4.PUEF = (lpSurtaxeConventionnel.PU4LP - lpSurtaxeConventionnel.PU4LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN4.PUEFBase = (lpSurtaxeConventionnel.PU4LP - lpSurtaxeConventionnel.PU4LP * derogation) * matchedConventionnel.VolCGC;
                            eltFactSurtaxeConventionnelN4.CodeTVA = matchedConventionnel.CONNAISSEMENT.BLIL == "Y" ? "TVAEX" : (matchedConventionnel.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedConventionnel.CONNAISSEMENT.CLIENT.CodeTVA);
                            eltFactSurtaxeConventionnelN4.TauxTVA = eltFactSurtaxeConventionnelN4.CodeTVA == "TVAEX" ? 0 : matchedConventionnel.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedConventionnel.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                            eltFactSurtaxeConventionnelN4.CCArticle = eltFactSurtaxeConventionnelN4.CodeTVA == "TVAEX" ? articleSurtaxeConventionnel.CCArticleEx : articleSurtaxeConventionnel.CCArticle;
                            eltFactSurtaxeConventionnelN4.CCCP = matchedConventionnel.CONNAISSEMENT.CLIENT.CodeClient;
                            eltFactSurtaxeConventionnelN4.EltFacture = "GC";
                            eltFactSurtaxeConventionnelN4.DateJEF = DateTime.Now;
                            eltFactSurtaxeConventionnelN4.IdLP = lpSurtaxeConventionnel.IdLP;
                            eltFactSurtaxeConventionnelN4.QTEEF = (dateFin.Date - matchedConventionnel.FFGC.Value).Days - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU4LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU3LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU2LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltSurtaxeCalcules.Where(el => el.PUEFBase == lpSurtaxeConventionnel.PU1LP * (1 - derogation) * matchedConventionnel.VolCGC).Sum(el => el.QTEEF) - eltFactSurtaxeConventionnelN1.QTEEF - eltFactSurtaxeConventionnelN2.QTEEF - eltFactSurtaxeConventionnelN3.QTEEF;
                            //AH Surtaxe Séjour Conventionnel
                            eltFactSurtaxeConventionnelN4.LibEF =articleSurtaxeConventionnel.LibArticle+ " GC N° " + matchedConventionnel.NumGC + " : " + finAncienSejour.AddDays(1 + Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF + eltFactSurtaxeConventionnelN3.QTEEF)).ToShortDateString() + " - " + finAncienSejour.AddDays(Convert.ToInt32(eltFactSurtaxeConventionnelN1.QTEEF + eltFactSurtaxeConventionnelN2.QTEEF + eltFactSurtaxeConventionnelN3.QTEEF + eltFactSurtaxeConventionnelN4.QTEEF)).ToShortDateString();
                            eltFactSurtaxeConventionnelN4.UnitEF = lpSurtaxeConventionnel.UniteLP;
                            eltFactSurtaxeConventionnelN4.IdEsc = matchedConventionnel.IdEsc;
                            eltFactSurtaxeConventionnelN4.IdMan = matchedConventionnel.IdMan;
                            eltFactSurtaxeConventionnelN4.IdBL = matchedConventionnel.CONNAISSEMENT.IdBL;
                            eltFactSurtaxeConventionnelN4.IdGC = matchedConventionnel.IdGC;
                            eltFactSurtaxeConventionnelN4.DestEF = "C";
                            eltFactSurtaxeConventionnelN4.StatutEF = "En cours";

                            dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactSurtaxeConventionnelN4);
                        }
                    }
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedConventionnel;
            }
        }

        #endregion

         
        #region demande de réduction

        public DEMANDE_REDUCTION ValiderDemandeReduction(int idDDR, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedDemande = (from reduc in dcAcc.GetTable<DEMANDE_REDUCTION>()
                                      where reduc.IdDDR == idDDR
                                      select reduc).SingleOrDefault<DEMANDE_REDUCTION>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Demande de réduction : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour enregistrer une demande de reduction. Veuillez contacter un administrateur");
                }

                if (matchedDemande == null)
                {
                    throw new EnregistrementInexistant("Demande de réduction inexistante");
                }

                matchedDemande.IdUV = idUser;
                matchedDemande.AIVDDR = autresInfos;
                matchedDemande.DatevDDR = DateTime.Now;

                matchedDemande.StatutRed = "Validé";

                if (autresInfos.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdDDR = matchedDemande.IdDDR;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = autresInfos;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }

               /*AH List<ELEMENT_FACTURATION> _eltFact = matchedDemande.CONNAISSEMENT.ELEMENT_FACTURATION.Where(el => 
                    (el.LIGNE_PRIX.CodeArticle == matchedDemande.CodeArticle || el.LibEF.Contains("Débours armateur : TVA sur Surestaries") ||
                    el.LibEF.Contains("Débours armateur : TVA sur Détention") || el.LibEF.Contains("Debours PAD - TVA sur Pénalité de stationnement")) 
                    && (el.StatutEF == "En cours" || el.StatutEF == "Proforma")).ToList<ELEMENT_FACTURATION>();
                */
                List<ELEMENT_FACTURATION> _eltFact = matchedDemande.CONNAISSEMENT.ELEMENT_FACTURATION.Where(el =>
                   (el.LIGNE_PRIX.CodeArticle == matchedDemande.CodeArticle || el.CodeArticle=="1819")
                   && (el.StatutEF == "En cours" || el.StatutEF == "Proforma")).ToList<ELEMENT_FACTURATION>();
                string log = string.Empty;
                log = "IDDR: " + matchedDemande.IdDDR;

                foreach (ELEMENT_FACTURATION elt in _eltFact)
                {
                    log = string.Format("{0} IDJEF:{1} : PU:{2}",log, elt.IdJEF, elt.PUEF);
                    elt.PUEF = Math.Round(elt.PUEFBase.Value * (1 - matchedDemande.Pourcent.Value / 100), 0, MidpointRounding.AwayFromZero);
                    log = string.Format("{0} PU2:{1}", log, elt.PUEF);
                }

                string machinename = string.Empty;
                try { machinename = Environment.MachineName; }
                catch { }

                JOURNAL journal = new JOURNAL
                {
                    IdU = matchedUser.IdU,
                    IdOp = 114,
                    DOP = DateTime.Now,
                    IDEC = string.Format("PC:{0} : {1}", machinename,log)
                };
                dcAcc.GetTable<JOURNAL>().InsertOnSubmit(journal);
                 
                dcAcc.SubmitChanges();

                foreach (PROFORMA prof in matchedDemande.CONNAISSEMENT.PROFORMA.Where(p => !p.DVFP.HasValue && p.StatutFP == "O"))
                {
                    UpdateProforma(prof.IdFP, prof.IdBL.Value, prof.ClientFacture, GetLignesProf(prof.IdFP,dcAcc), prof.AIFP, idUser);
                }

                //DateTime dte = DateTime.Now;

                //ELEMENT_FACTURATION eltFactReduction = new ELEMENT_FACTURATION();

                //eltFactReduction.CCCP = matchedDemande.CONNAISSEMENT.CLIENT.CodeClient;
                //eltFactReduction.EltFacture = "BL";
                //eltFactReduction.LibEF = matchedDemande.LibDDR + " " + matchedDemande.ARTICLE.LibArticle;
                //eltFactReduction.DateJEF = DateTime.Now;
                //eltFactReduction.IdLP = matchedDemande.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>(lp => lp.DDLP <= dte && lp.DFLP >= dte).IdLP;
                //eltFactReduction.PUEF = matchedDemande.MHT;
                //eltFactReduction.QTEEF = -1;
                //eltFactReduction.UnitEF = "U";
                //eltFactReduction.IdEsc = matchedDemande.CONNAISSEMENT.IdEsc;
                //eltFactReduction.IdMan = matchedDemande.CONNAISSEMENT.IdMan;
                //eltFactReduction.IdBL = matchedDemande.IdBL;
                //eltFactReduction.CodeTVA = matchedDemande.ARTICLE.CodeTVA == "TVAEX" ? "TVAEX" : (matchedDemande.CONNAISSEMENT.CODE_TVA.CodeTVA == "TVAEX" ? "TVAEX" : matchedDemande.CONNAISSEMENT.CLIENT.CodeTVA);
                //eltFactReduction.TauxTVA = eltFactReduction.CodeTVA == "TVAEX" ? 0 : matchedDemande.CONNAISSEMENT.CODE_TVA.TauxTVA == 0 ? 0 : matchedDemande.CONNAISSEMENT.CLIENT.CODE_TVA.TauxTVA;
                //eltFactReduction.CCArticle = eltFactReduction.CodeTVA == "TVAEX" ? matchedDemande.ARTICLE.CCArticleEx : matchedDemande.ARTICLE.CCArticle;
                //eltFactReduction.DestEF = "C";
                //eltFactReduction.StatutEF = "En cours";

                //dcAcc.GetTable<ELEMENT_FACTURATION>().InsertOnSubmit(eltFactReduction);

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedDemande;
            }
        }

        #endregion

        #region MAJ Element de facturation

        public ELEMENT_FACTURATION UpdateEltFactDIT(int idJEF, double montantDIT, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedElt = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                  where elt.IdJEF == idJEF
                                  select elt).SingleOrDefault<ELEMENT_FACTURATION>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Mise à jour des prix DIT").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour les éléments de facturation de DIT. Veuillez contacter un administrateur");
                }

                if (matchedElt == null)
                {
                    throw new EnregistrementInexistant("Elément de facturation inexistant");
                }

                matchedElt.PTDIT = montantDIT;

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedElt;
            }
        }

        public ELEMENT_FACTURATION UpdateEltFactGC(int idJEF, string libEF, double prixUnitaire, double quantite, string cpteComptable, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedElt = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                  where elt.IdJEF == idJEF
                                  select elt).SingleOrDefault<ELEMENT_FACTURATION>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "General cargo : Mise à jour des éléments de facturation").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour les éléments de facturation d'un general cargo. Veuillez contacter un administrateur");
                }

                if (matchedElt == null)
                {
                    throw new EnregistrementInexistant("Elément de facturation inexistant");
                }


                string log = string.Format("IDJEF{0} QTE{1} PU{2}", matchedElt.IdJEF, matchedElt.QTEEF, matchedElt.PUEF);
                
                matchedElt.PUEF = prixUnitaire;
                matchedElt.QTEEF = quantite;
                matchedElt.LibEF = libEF;
                matchedElt.CCArticle = cpteComptable;


                string machinename = string.Empty;
                try { machinename = Environment.MachineName; }
                catch { }
                JOURNAL journal = new JOURNAL
                {
                    IdU = matchedUser.IdU,
                    IdOp = 151,
                    DOP = DateTime.Now,
                    IDEC = string.Format("PC:{0} : {1} QTE2:{2} PU2{3}", machinename, log, matchedElt.QTEEF, matchedElt.PUEF)
                };
                dcAcc.GetTable<JOURNAL>().InsertOnSubmit(journal);

                foreach (LIGNE_PROFORMA ligneProf in matchedElt.LIGNE_PROFORMA.Where(lp => !lp.PROFORMA.DVFP.HasValue && lp.PROFORMA.StatutFP == "O"))
                {
                    UpdateProforma(ligneProf.PROFORMA.IdFP, ligneProf.PROFORMA.IdBL.Value, ligneProf.PROFORMA.ClientFacture, GetLignesProf(ligneProf.PROFORMA.IdFP,dcAcc), ligneProf.PROFORMA.AIFP, idUser);
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedElt;
            }
        }

        public ELEMENT_FACTURATION UpdateEltFactVeh(int idJEF, string libEF, double prixUnitaire, double quantite, string cpteComptable, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedElt = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                  where elt.IdJEF == idJEF
                                  select elt).SingleOrDefault<ELEMENT_FACTURATION>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Véhicule : Mise à jour des éléments de facturation").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour les éléments de facturation d'un véhicule. Veuillez contacter un administrateur");
                }

                if (matchedElt == null)
                {
                    throw new EnregistrementInexistant("Elément de facturation inexistant");
                }

                string log = string.Format("IDJEF{0} QTE{1} PU{2}",matchedElt.IdJEF,matchedElt.QTEEF,matchedElt.PUEF);
                matchedElt.PUEF = prixUnitaire;
                matchedElt.QTEEF = quantite;
                matchedElt.LibEF = libEF;
                matchedElt.CCArticle = cpteComptable;

                string machinename = string.Empty;
                try { machinename = Environment.MachineName; }
                catch { }
                JOURNAL journal = new JOURNAL
                {
                    IdU = matchedUser.IdU,
                    IdOp = 214,
                    DOP = DateTime.Now,
                    IDEC = string.Format("PC:{0} : {1} QTE2:{2} PU2{3}", machinename,log, matchedElt.QTEEF,matchedElt.PUEF)
                };
                dcAcc.GetTable<JOURNAL>().InsertOnSubmit(journal);
                 

                foreach (LIGNE_PROFORMA ligneProf in matchedElt.LIGNE_PROFORMA.Where(lp => !lp.PROFORMA.DVFP.HasValue && lp.PROFORMA.StatutFP == "O"))
                {
                    UpdateProforma(ligneProf.PROFORMA.IdFP, ligneProf.PROFORMA.IdBL.Value, ligneProf.PROFORMA.ClientFacture, GetLignesProf(ligneProf.PROFORMA.IdFP,dcAcc), ligneProf.PROFORMA.AIFP, idUser);
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedElt;
            }
        }

        public ELEMENT_FACTURATION UpdateEltFactBL(int idJEF, string libEF, double prixUnitaire, double quantite, string cpteComptable, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedElt = (from elt in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                  where elt.IdJEF == idJEF
                                  select elt).SingleOrDefault<ELEMENT_FACTURATION>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("Utilisateur inexistant");
                }

                List<OPERATION> operationsUser = GetOperationsUtilisateur(idUser, dcAcc);

                if (matchedUser != null && operationsUser.Where(op => op.NomOp == "Connaissement : Mise à jour des éléments de facturation").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour mettre à jour les éléments de facturation d'un connaissement. Veuillez contacter un administrateur");
                }

                if (matchedElt == null)
                {
                    throw new EnregistrementInexistant("Elément de facturation inexistant");
                }

                //journalisation de la modification
                string machinename = string.Empty;
                try { machinename = Environment.MachineName; }
                catch { }

                string log = string.Format("IDJEF{0} QTE{1} PU{2}", matchedElt.IdJEF, matchedElt.QTEEF, matchedElt.PUEF);


                matchedElt.PUEF = prixUnitaire;
                matchedElt.QTEEF = quantite;
                matchedElt.LibEF = libEF;
                matchedElt.CCArticle = cpteComptable;

                JOURNAL journal = new JOURNAL
                {
                    IdU = matchedUser.IdU,
                    IdOp = 215,
                    DOP = DateTime.Now,
                    IDEC = string.Format("PC:{0} : {1} QTE2:{2} PU2{3}", machinename, log, matchedElt.QTEEF, matchedElt.PUEF)
                };


                foreach (LIGNE_PROFORMA ligneProf in matchedElt.LIGNE_PROFORMA.Where(lp => !lp.PROFORMA.DVFP.HasValue && lp.PROFORMA.StatutFP == "O"))
                {
                    UpdateProforma(ligneProf.PROFORMA.IdFP, ligneProf.PROFORMA.IdBL.Value, ligneProf.PROFORMA.ClientFacture, GetLignesProf(ligneProf.PROFORMA.IdFP,dcAcc), ligneProf.PROFORMA.AIFP, idUser);
                }


                dcAcc.SubmitChanges();
                transaction.Complete();
                return matchedElt;
            }
        }

        #endregion
         
        #region Ordre de service

        public ORDRE_SERVICE InsertOrdreService(int idEsc, int idFsseur, int idBL, string libOS, DateTime datePrevEx, DateTime dateReelleEx, int idVeh, int idCtr, int idMafi, int idGC, List<ElementLigneOS> eltOS, string autresInfos, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedEscale = (from esc in dcAcc.GetTable<ESCALE>()
                                     where esc.IdEsc == idEsc
                                     select esc).SingleOrDefault<ESCALE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                var matchedBL = (from bl in dcAcc.GetTable<CONNAISSEMENT>()
                                 where bl.IdBL == idBL
                                 select bl).FirstOrDefault<CONNAISSEMENT>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Ordre de service : Enregistrement d'un nouvel élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour créer un ordre de service. Veuillez contacter un administrateur");
                }

                if (matchedEscale == null)
                {
                    throw new EnregistrementInexistant("L'escale auquel vous faites référence n'existe pas");
                }

                if (idBL != -1 && matchedBL == null)
                {
                    throw new EnregistrementInexistant("Le connaissement auquel vous faites référence n'existe pas");
                }

                // Insertion de l'ordre de service
                ORDRE_SERVICE ordreService = new ORDRE_SERVICE();

                ordreService.DPExOS = datePrevEx;
                ordreService.DCrOS = DateTime.Now;
                if(dateReelleEx.Ticks != 0)
                {
                    ordreService.DRExOS = dateReelleEx;
                }
                ordreService.LibOS = libOS;
                ordreService.IdEsc = matchedEscale.IdEsc;
                ordreService.IdFsseur = idFsseur;
                if (idBL != -1)
                {
                    ordreService.IdBL = matchedBL.IdBL;
                }
                if (idVeh != -1)
                {
                    var matchedVeh = (from v in dcAcc.GetTable<VEHICULE>()
                                      where v.IdVeh == idVeh
                                      select v).FirstOrDefault<VEHICULE>();

                    ordreService.IdVeh = idVeh;
                }

                if (idCtr != -1)
                {
                    var matchedCtr = (from c in dcAcc.GetTable<CONTENEUR>()
                                      where c.IdCtr == idCtr
                                      select c).FirstOrDefault<CONTENEUR>();

                    ordreService.IdCtr = idCtr;
                }

                if (idMafi != -1)
                {
                    var matchedMafi = (from m in dcAcc.GetTable<MAFI>()
                                       where m.IdMafi == idCtr
                                       select m).FirstOrDefault<MAFI>();

                    ordreService.IdMafi = idMafi;
                }

                if (idGC != -1)
                {
                    var matchedGC = (from c in dcAcc.GetTable<CONVENTIONNEL>()
                                     where c.IdGC == idGC
                                     select c).FirstOrDefault<CONVENTIONNEL>();

                    ordreService.IdGC = idGC;
                }

                ordreService.ObsOS = autresInfos;
                ordreService.StatutOS = "En cours";

                dcAcc.GetTable<ORDRE_SERVICE>().InsertOnSubmit(ordreService);

                dcAcc.SubmitChanges();

                if (eltOS.Count > 1 && eltOS.Count(el => el.Code == "2201") != 0)
                {
                    throw new FacturationException("Edition de l'ordre de service. Les ordres de service d'Export Freight Commission ne doivent contenir que l'element Export Freight Commission");
                }

                foreach (ElementLigneOS elt in eltOS)
                {
                    LIGNE_SERVICE ligne = new LIGNE_SERVICE();
                    ligne.IdOS = ordreService.IdOS;
                    ligne.CodeArticle = Convert.ToInt16(elt.Code);
                    ligne.QLS = elt.Qte;
                    ligne.ULS = elt.Unite;
                    ligne.PULS = elt.PrixUnitaire;
                    
                    //ligne.CodeTVA = elt.TVA == 0 ? "TVAEX" : "TVAAP";
                    ligne.CodeTVA = elt.CodeTVA;

                    ligne.CCArticle = elt.CompteComptable;
                    ligne.AILS = elt.Remarques;

                    dcAcc.GetTable<LIGNE_SERVICE>().InsertOnSubmit(ligne);
                }

                dcAcc.SubmitChanges();
                transaction.Complete();
                return ordreService;
            }
        }

        public ORDRE_SERVICE ValiderOrdreService(int idOS, DateTime dateReelleEx, DateTime datePrevEx, string libOS, string obsOS, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedOS = (from os in dcAcc.GetTable<ORDRE_SERVICE>()
                                 where os.IdOS == idOS
                                 select os).SingleOrDefault<ORDRE_SERVICE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Ordre de service : Validation d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour valider un ordre de service. Veuillez contacter un administrateur");
                }

                if (matchedOS == null)
                {
                    throw new EnregistrementInexistant("L'ordre de service auquel vous faites référence n'existe pas");
                }

                matchedOS.DVOS = DateTime.Now;
                matchedOS.DRExOS = dateReelleEx;
                matchedOS.DPExOS = datePrevEx;
                matchedOS.LibOS = libOS;
                matchedOS.ObsOS = obsOS;
                matchedOS.StatutOS = "Validé";

                if (obsOS.Trim() != "")
                {
                    NOTE noteValid = new NOTE();
                    noteValid.IdOS = matchedOS.IdOS;
                    noteValid.DateNote = DateTime.Now;
                    noteValid.IdU = idUser;
                    noteValid.TitreNote = "Note de validation";
                    noteValid.DescNote = obsOS;

                    dcAcc.NOTE.InsertOnSubmit(noteValid);
                }
                List<CODE_TVA> lct = (from m in dcAcc.GetTable<CODE_TVA>() select m).ToList<CODE_TVA>();
                foreach (LIGNE_SERVICE lg in matchedOS.LIGNE_SERVICE)
                {
                    if (lg.ORDRE_SERVICE.IdCtr.HasValue)
                    {
                        ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                        //eltFact.CCArticle = lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CCArticle =(lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        
                        eltFact.CodeTVA = lg.CodeTVA;
                        //eltFact.TauxTVA = lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                       //AH dois utiliser le taux tva ligne service eltFact.TauxTVA = lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.TauxTVA = lg.CodeTVA == "TVAEX" ? 0 : 19.25f; //lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.CCCP = lg.ORDRE_SERVICE.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFact.EltFacture = "Ctr";
                        eltFact.LibEF = lg.ARTICLE.LibArticle + " - Ctr N°" + lg.ORDRE_SERVICE.CONTENEUR.NumCtr;
                        eltFact.DateJEF = DateTime.Now;
                        eltFact.IdLP = lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                        eltFact.QTEEF = Math.Round(lg.QLS.Value, 3);
                        eltFact.UnitEF = lg.ULS;
                        eltFact.PUEF = lg.PULS;
                        if (lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                        {
                            eltFact.PUEFBase = eltFact.PUEF;
                        }
                        eltFact.PTDIT = 0;
                        eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                        if (lg.ORDRE_SERVICE.CONTENEUR.IdMan.HasValue)
                        {
                            eltFact.IdMan = lg.ORDRE_SERVICE.CONTENEUR.MANIFESTE.IdMan;
                        }
                        eltFact.IdBL = lg.ORDRE_SERVICE.CONNAISSEMENT.IdBL;
                        eltFact.IdCtr = lg.ORDRE_SERVICE.IdCtr;
                        eltFact.IdOS = lg.IdOS;
                        eltFact.DestEF = "C";
                        eltFact.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    }
                    else if (lg.ORDRE_SERVICE.IdMafi.HasValue)
                    {
                        ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                        //eltFact.CCArticle = lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CCArticle = (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CodeTVA = lg.CodeTVA;
                        //eltFact.TauxTVA = lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                        
                        //AH dois utiliser le taux tva ligne service eltFact.TauxTVA = lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.TauxTVA = lg.CodeTVA == "TVAEX" ? 0 : 19.25f; //lg.ARTICLE.CODE_TVA.TauxTVA;
 
                        eltFact.CCCP = lg.ORDRE_SERVICE.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFact.EltFacture = "MF";
                        eltFact.LibEF = lg.ARTICLE.LibArticle + " - Mafi N°" + lg.ORDRE_SERVICE.MAFI.NumMafi;
                        eltFact.DateJEF = DateTime.Now;
                        eltFact.IdLP = lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                        eltFact.QTEEF = Math.Round(lg.QLS.Value, 3);
                        eltFact.UnitEF = lg.ULS;
                        eltFact.PUEF = lg.PULS;
                        if (lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                        {
                            eltFact.PUEFBase = eltFact.PUEF;
                        }
                        eltFact.PTDIT = 0;
                        eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                        if (lg.ORDRE_SERVICE.MAFI.IdMan.HasValue)
                        {
                            eltFact.IdMan = lg.ORDRE_SERVICE.MAFI.MANIFESTE.IdMan;
                        }
                        eltFact.IdBL = lg.ORDRE_SERVICE.CONNAISSEMENT.IdBL;
                        eltFact.IdMafi = lg.ORDRE_SERVICE.IdMafi;
                        eltFact.IdOS = lg.IdOS;
                        eltFact.DestEF = "C";
                        eltFact.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    }
                    else if (lg.ORDRE_SERVICE.IdVeh.HasValue)
                    {
                        ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                        //eltFact.CCArticle = lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CCArticle = (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        
                        eltFact.CodeTVA = lg.CodeTVA;
                        //eltFact.TauxTVA = lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                        //AH dois utiliser le taux tva ligne service eltFact.TauxTVA = lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.TauxTVA = lg.CodeTVA == "TVAEX" ? 0 : 19.25f; //lg.ARTICLE.CODE_TVA.TauxTVA;
                        
                        eltFact.CCCP = lg.ORDRE_SERVICE.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFact.EltFacture = "Veh";
                        eltFact.LibEF = lg.ARTICLE.LibArticle + " - Veh N°" + lg.ORDRE_SERVICE.VEHICULE.NumChassis;
                        eltFact.DateJEF = DateTime.Now;
                        eltFact.IdLP = lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                        eltFact.QTEEF = Math.Round(lg.QLS.Value, 3);
                        eltFact.UnitEF = lg.ULS;
                        eltFact.PUEF = lg.PULS;
                        if (lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                        {
                            eltFact.PUEFBase = eltFact.PUEF;
                        }
                        eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                        if(lg.ORDRE_SERVICE.VEHICULE.IdMan.HasValue)
                        {
                            eltFact.IdMan = lg.ORDRE_SERVICE.VEHICULE.MANIFESTE.IdMan;
                        }
                        eltFact.IdBL = lg.ORDRE_SERVICE.CONNAISSEMENT.IdBL;
                        eltFact.IdVeh = lg.ORDRE_SERVICE.IdVeh;
                        eltFact.IdOS = lg.IdOS;
                        eltFact.DestEF = "C";
                        eltFact.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    }
                    else if (lg.ORDRE_SERVICE.IdGC.HasValue)
                    {
                        ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                        //eltFact.CCArticle = lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CCArticle = (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        
                        eltFact.CodeTVA = lg.CodeTVA;
                        //eltFact.TauxTVA = lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                        //AH dois utiliser le taux tva ligne service eltFact.TauxTVA = lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.TauxTVA = lg.CodeTVA == "TVAEX" ? 0 : 19.25f; //lg.ARTICLE.CODE_TVA.TauxTVA;
                        
                        eltFact.CCCP = lg.ORDRE_SERVICE.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFact.EltFacture = "BL";
                        eltFact.LibEF = lg.ARTICLE.LibArticle + " - GC N°" + lg.ORDRE_SERVICE.CONVENTIONNEL.NumGC;
                        eltFact.DateJEF = DateTime.Now;
                        eltFact.IdLP = lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                        eltFact.QTEEF = Math.Round(lg.QLS.Value, 3);
                        eltFact.UnitEF = lg.ULS;
                        eltFact.PUEF = lg.PULS;
                        if (lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                        {
                            eltFact.PUEFBase = eltFact.PUEF;
                        }
                        eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                        if (lg.ORDRE_SERVICE.CONVENTIONNEL.IdMan.HasValue)
                        {
                            eltFact.IdMan = lg.ORDRE_SERVICE.CONVENTIONNEL.MANIFESTE.IdMan;
                        }
                        eltFact.IdBL = lg.ORDRE_SERVICE.CONNAISSEMENT.IdBL;
                        eltFact.IdGC = lg.ORDRE_SERVICE.IdGC;
                        eltFact.IdOS = lg.IdOS;
                        eltFact.DestEF = "C";
                        eltFact.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    }
                    else if (lg.ORDRE_SERVICE.IdBL.HasValue)
                    {
                        ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                        //eltFact.CCArticle = lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CCArticle = (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        
                        eltFact.CodeTVA = lg.CodeTVA;
                        //eltFact.TauxTVA = lg.CodeTVA == "TVAAP" ? 19.25f : 0; 
                        //AH dois utiliser le taux tva ligne service eltFact.TauxTVA = lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.TauxTVA = lg.CodeTVA == "TVAEX" ? 0 : 19.25f; //lg.ARTICLE.CODE_TVA.TauxTVA;

                        eltFact.CCCP = lg.ORDRE_SERVICE.CONNAISSEMENT.CLIENT.CodeClient;
                        eltFact.EltFacture = "GC";
                        eltFact.LibEF = lg.ARTICLE.LibArticle + " - BL N°" + lg.ORDRE_SERVICE.CONNAISSEMENT.NumBL;
                        eltFact.DateJEF = DateTime.Now;
                        eltFact.IdLP = lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                        eltFact.QTEEF = Math.Round(lg.QLS.Value, 3);
                        eltFact.UnitEF = lg.ULS;
                        eltFact.PUEF = lg.PULS;
                        if (lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                        {
                            eltFact.PUEFBase = eltFact.PUEF;
                        }
                        eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                        if (lg.ORDRE_SERVICE.CONNAISSEMENT.IdMan.HasValue)
                        {
                            eltFact.IdMan = lg.ORDRE_SERVICE.CONNAISSEMENT.MANIFESTE.IdMan;
                        }
                        eltFact.IdBL = lg.ORDRE_SERVICE.CONNAISSEMENT.IdBL;
                        eltFact.IdOS = lg.IdOS;
                        eltFact.DestEF = "C";
                        eltFact.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    }
                    else
                    {
                        ELEMENT_FACTURATION eltFact = new ELEMENT_FACTURATION();

                        //eltFact.CCArticle = lg.CodeTVA == "TVAAP" ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        eltFact.CCArticle = (lg.CodeTVA == "TVAAP" || lg.CodeTVA == "TVATI") ? lg.ARTICLE.CCArticle : lg.ARTICLE.CCArticleEx;
                        
                        eltFact.CodeTVA = lg.CodeTVA;
                        //eltFact.TauxTVA = lg.CodeTVA == "TVAAP" ? 19.25f : 0;
                        //AH dois utiliser le taux tva ligne service eltFact.TauxTVA = lg.ARTICLE.CODE_TVA.TauxTVA;
                        eltFact.TauxTVA = lg.CodeTVA == "TVAEX" ? 0 : 19.25f; //lg.ARTICLE.CODE_TVA.TauxTVA;

                        eltFact.CCCP = lg.ORDRE_SERVICE.ESCALE.ARMATEUR.CCArm;
                        eltFact.EltFacture = "Arm";
                        eltFact.LibEF = lg.ARTICLE.LibArticle + " - Escale N°" + lg.ORDRE_SERVICE.ESCALE.NumEsc;
                        eltFact.DateJEF = DateTime.Now;
                        eltFact.IdLP = lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().IdLP;
                        eltFact.QTEEF = Math.Round(lg.QLS.Value, 3);
                        eltFact.UnitEF = lg.ULS;
                        eltFact.PUEF = lg.PULS;
                        if (lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1801 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1805 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1807 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1809 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1815 || lg.ARTICLE.LIGNE_PRIX.FirstOrDefault<LIGNE_PRIX>().CodeArticle == 1819)
                        {
                            eltFact.PUEFBase = eltFact.PUEF;
                        }
                        eltFact.IdEsc = lg.ORDRE_SERVICE.IdEsc;
                        eltFact.IdOS = lg.IdOS;
                        eltFact.DestEF = "A";
                        eltFact.StatutEF = "En cours";

                        dcAcc.ELEMENT_FACTURATION.InsertOnSubmit(eltFact);
                    }

                }

                dcAcc.SubmitChanges();

                //Intégration à SAP

                if (matchedOS.IdEsc.HasValue && !matchedOS.IdBL.HasValue && matchedOS.LIGNE_SERVICE.Count(lg => lg.ARTICLE.CCArticle.StartsWith("7")) == 0 && matchedOS.FOURNISSEUR.CodeFsseur != "FOUR_OS")
                {
                    #region AH Arrete integration SAP
                    /*
                    List<Int32> idJEFs = new List<int>();
                    foreach (ELEMENT_FACTURATION e in matchedOS.ELEMENT_FACTURATION)
                    {
                        idJEFs.Add(e.IdJEF);
                    }

                    List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                              from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                              where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                              orderby art.LibArticle ascending
                                              select art).Distinct<ARTICLE>().ToList<ARTICLE>();

                    List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                where eltFact.IdOS == matchedOS.IdOS
                                                select new LigneEcriture
                                                {
                                                    CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                    AccountCode = eltFact.CCArticle,
                                                    //CodeTVA = eltFact.CodeTVA,
                                                    //PrixUnitaire = eltFact.PUEF.Value,
                                                    Qte = eltFact.QTEEF.Value,
                                                    CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                    PrixUnitaire = eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value
                     
                                                }).ToList<LigneEcriture>();

                    string date = matchedOS.DVOS.Value.Year.ToString() + "-" + FormatChiffre(matchedOS.DVOS.Value.Month) + "-" + FormatChiffre(matchedOS.DVOS.Value.Day);
                    
                    //appel erp
                    string idDocSAP = (new VsomSAP()).ValideOSEscal(elts, matchedOS.FOURNISSEUR.CodeFsseur, date, matchedOS.ESCALE.NumEsc.Value.ToString(), matchedOS.IdOS.ToString(), matchedOS.LibOS);
                    int result;
                    matchedOS.IdPO = Int32.TryParse(idDocSAP, out result) ? result : -1;

                    if (matchedOS.IdPO == -1)
                    {
                        throw new ApplicationException("Echec du transfert des données à l'ERP");
                    }
                    */
                    #endregion

                    //AH
                    matchedOS.IdPO = matchedOS.IdOS;

                    dcAcc.SubmitChanges();
                }
                else if (matchedOS.IdEsc.HasValue && !matchedOS.IdBL.HasValue && matchedOS.LIGNE_SERVICE.Count(lg => lg.ARTICLE.CCArticle.StartsWith("7")) == 0 && matchedOS.FOURNISSEUR.CodeFsseur == "FOUR_OS")
                {
                    #region
                    /*
                    List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                                                where eltFact.IdOS == matchedOS.IdOS
                                                select new LigneEcriture
                                                {
                                                    CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                    AccountCode = eltFact.CCArticle,
                                                    //CodeTVA = eltFact.CodeTVA,
                                                    //PrixUnitaire = eltFact.PUEF.Value,
                                                    Qte = eltFact.QTEEF.Value,
                                                    CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                    PrixUnitaire = eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value
                     
                                                }).ToList<LigneEcriture>();

                    string date = matchedOS.DVOS.Value.Year.ToString() + "-" + FormatChiffre(matchedOS.DVOS.Value.Month) + "-" + FormatChiffre(matchedOS.DVOS.Value.Day);
                    
                    //appel erp
                    string idJE = (new VsomSAP()).ValideOSArmateur(elts, date, matchedOS.ESCALE.NumEsc.ToString(), matchedOS.LibOS, matchedOS.IdOS,
                                    matchedOS.ESCALE.ARMATEUR.CCArm);

                    int result;
                    int idje = Int32.TryParse(idJE, out result) ? result : -1;

                    if (idje == -1)
                    {
                        throw new ApplicationException("Echec du transfert des données à l'ERP. La transaction a été abandonnée \n "+idJE);
                    }
                    */
                    #endregion
                }

                transaction.Complete();
                return matchedOS;
            }
        }

        public ORDRE_SERVICE CloturerOrdreService(int idOS, DateTime dateCloture, int idUser)
        {
            using (var transaction = new System.Transactions.TransactionScope())
            {
                var matchedOS = (from os in dcAcc.GetTable<ORDRE_SERVICE>()
                                 where os.IdOS == idOS
                                 select os).SingleOrDefault<ORDRE_SERVICE>();

                var matchedUser = (from u in dcAcc.GetTable<UTILISATEUR>()
                                   where u.IdU == idUser
                                   select u).FirstOrDefault<UTILISATEUR>();

                if (matchedUser == null)
                {
                    throw new EnregistrementInexistant("L'utilisateur auquel vous faites référence n'existe pas");
                }

                if (matchedUser != null && GetOperationsUtilisateur(idUser,dcAcc).Where(op => op.NomOp == "Ordre de service : Cloture d'un élément").FirstOrDefault<OPERATION>() == null && matchedUser.LU != "Admin")
                {
                    throw new HabilitationException("Vous n'avez pas les droits nécessaires pour clôturer un ordre de service. Veuillez contacter un administrateur");
                }

                if (matchedOS == null)
                {
                    throw new EnregistrementInexistant("L'ordre de service auquel vous faites référence n'existe pas");
                }

                matchedOS.DClOS = dateCloture;
                matchedOS.StatutOS = "Cloturé";

                dcAcc.SubmitChanges();

                //Intégration à SAP
                #region
                //if (matchedOS.IdEsc.HasValue && !matchedOS.IdBL.HasValue && matchedOS.LIGNE_SERVICE.Count(lg => lg.CodeArticle == 2201) == 0 && matchedOS.FOURNISSEUR.CodeFsseur != "FOUR_OS")// && matchedOS.LIGNE_SERVICE.Count(lg => lg.CodeArticle == 2201) == 0)
                if (matchedOS.IdEsc.HasValue && !matchedOS.IdBL.HasValue && matchedOS.LIGNE_SERVICE.Count(lg => lg.ARTICLE.CCArticle.StartsWith("7")) == 0 && matchedOS.FOURNISSEUR.CodeFsseur != "FOUR_OS")// && matchedOS.LIGNE_SERVICE.Count(lg => lg.CodeArticle == 2201) == 0)
                {
                     /** AH List<Int32> idJEFs = new List<int>();
                    foreach (ELEMENT_FACTURATION e in matchedOS.ELEMENT_FACTURATION)
                    {
                        idJEFs.Add(e.IdJEF);
                        //e.StatutEF = "Facturé";
                    }

                    List<ARTICLE> listArts = (from art in dcAcc.GetTable<ARTICLE>()
                                              from elt in dcAcc.GetTable<ELEMENT_FACTURATION>().Where(el => idJEFs.Contains(el.IdJEF))
                                              where art.CodeArticle == elt.LIGNE_PRIX.CodeArticle
                                              orderby art.LibArticle ascending
                                              select art).Distinct<ARTICLE>().ToList<ARTICLE>();
                    **/

                    //List<LigneEcriture> elts = (from eltFact in dcAcc.GetTable<ELEMENT_FACTURATION>()
                    //                            where eltFact.IdOS == matchedOS.IdOS
                    //                            select new LigneEcriture
                    //                            {
                    //                                CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                    //                                AccountCode = eltFact.CCArticle,
                    //                                CodeTVA = eltFact.CodeTVA,
                    //                                PrixUnitaire = eltFact.PUEF.Value,
                    //                                Qte = eltFact.QTEEF.Value
                    //                            }).ToList<LigneEcriture>();

                    List<LigneEcriture> elts = (from eltFact in matchedOS.ELEMENT_FACTURATION
                                                select new LigneEcriture
                                                {
                                                    CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                    AccountCode = eltFact.CCArticle,
                                                    //CodeTVA = eltFact.CodeTVA,
                                                    //PrixUnitaire = Math.Round(eltFact.PUEF.Value, 3),
                                                    Qte = eltFact.QTEEF.Value,
                                                    CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                    PrixUnitaire =Math.Round(eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value, 3)
                     
                                                }).ToList<LigneEcriture>();

                    string date = matchedOS.DClOS.Value.Year.ToString() + "-" + FormatChiffre(matchedOS.DClOS.Value.Month) + "-" + FormatChiffre(matchedOS.DClOS.Value.Day);
                 
                    //appel de la methode erp
                    #region arret integration sap

                    //string idPDN = (new VsomSAP()).ClotureOS_1(elts, matchedOS.FOURNISSEUR.CodeFsseur, date, matchedOS.ESCALE.NumEsc.ToString(),
                    //               matchedOS.IdOS.ToString(), matchedOS.LibOS, matchedOS.IdPO.Value);

                    //int resultPDN;
                    //matchedOS.IdPDN = Int32.TryParse(idPDN, out resultPDN) ? resultPDN : -1;

                    //if (matchedOS.IdPO == -1)
                    //{
                    //    throw new ApplicationException("Echec du transfert des données à l'ERP step1. \n " + idPDN);
                    //}

                    //string numFacture = matchedOS.LIGNE_SERVICE.FirstOrDefault<LIGNE_SERVICE>().AILS;

                    //string idPINV = (new VsomSAP()).ClotureOS_2(elts, matchedOS.FOURNISSEUR.CodeFsseur, date, matchedOS.ESCALE.NumEsc.ToString(),
                    //    matchedOS.IdOS.ToString(), numFacture, matchedOS.LibOS, matchedOS.IdPDN.Value);

                    //int resultPINV;
                    //matchedOS.IdPINV = Int32.TryParse(idPINV, out resultPINV) ? resultPINV : -1;

                    //if (matchedOS.IdPINV == -1)
                    //{
                    //    throw new ApplicationException("Echec du transfert des données à l'ERP. \n" + idPINV);
                    //}

                    #endregion

                    List<TRANSACTIONS> listTrans = new List<TRANSACTIONS>();
                    foreach (LigneEcriture le in elts)
                    {
                        listTrans.Add(new TRANSACTIONS
                        {
                            CJ = "300",
                            CMPTAUX = "",
                            CMPTGEN = le.AccountCode,
                            CMPTTYP = "G",
                            CODE_TVA = le.CodeTVA == "TVAEX" ? "D0" : "D4",
                            DATECH = string.Format("{0:ddMMyy}", DateTime.Today.AddDays(30)),
                            DPIECE = string.Format("{0:ddMMyy}", DateTime.Today),
                            LIB = "OS"+matchedOS.IdOS+"-" +matchedOS.ESCALE.NumEsc,
                            MONTANT =(le.PrixUnitaire*le.Qte).ToString() ,
                            PAYMOD = "S",
                            REF = "FF" + matchedOS.IdOS,
                            SENS = "D",
                            TAUX = le.CodeTVA == "TVAEX" ? "0" : "19,25",
                            TPIECE = "FF",
                            TYPE = "N"
                        });
                    }

                    //ajout de la ligne fournisseur
                    listTrans.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = matchedOS.FOURNISSEUR.CodeFsseur,
                        CMPTGEN = "4011100",
                        CMPTTYP = "X",
                        CODE_TVA = null,
                        DATECH = string.Format("{0:ddMMyy}", DateTime.Today.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", DateTime.Today),
                        LIB = "OS" + matchedOS.IdOS + "-" + matchedOS.ESCALE.NumEsc,
                        MONTANT = "0", //sera calculer lors de limportation
                        PAYMOD = "S",
                        REF = "FF" + matchedOS.IdOS,
                        SENS = "C",
                        TAUX = null,
                        TPIECE = "FF",
                        TYPE = "N"
                    });

                    dcAcc.TRANSACTIONS.InsertAllOnSubmit(listTrans);

                    dcAcc.SubmitChanges();
                     
                }
#endregion

                #region four_os ligne
                if (matchedOS.IdEsc.HasValue && !matchedOS.IdBL.HasValue && matchedOS.LIGNE_SERVICE.Count(lg => lg.ARTICLE.CCArticle.StartsWith("7")) == 0 && matchedOS.FOURNISSEUR.CodeFsseur == "FOUR_OS")
                {
                    List<LigneEcriture> elts = (from eltFact in matchedOS.ELEMENT_FACTURATION
                                                select new LigneEcriture
                                                {
                                                    CodeArticle = eltFact.LIGNE_PRIX.CodeArticle.Value,
                                                    AccountCode = eltFact.CCArticle,
                                                    //CodeTVA = eltFact.CodeTVA,
                                                    //PrixUnitaire = Math.Round(eltFact.PUEF.Value, 3),
                                                    Qte = eltFact.QTEEF.Value,
                                                    CodeTVA = eltFact.CodeTVA == "TVADA" ? "TVAEX" : eltFact.CodeTVA,
                                                    PrixUnitaire = Math.Round(eltFact.CodeTVA == "TVADA" ? Convert.ToDouble(eltFact.PUEF.Value * (1 + (eltFact.CODE_TVA.TauxTVA / 100))) : eltFact.PUEF.Value, 3)

                                                }).ToList<LigneEcriture>();

                    List<TRANSACTIONS> listTrans = new List<TRANSACTIONS>();
                    foreach (LigneEcriture le in elts)
                    {
                        listTrans.Add(new TRANSACTIONS
                        {
                            CJ = "300",
                            CMPTAUX = "",
                            CMPTGEN = le.AccountCode,
                            CMPTTYP = "G",
                            CODE_TVA = le.CodeTVA == "TVAEX" ? "D0" : "D4",
                            DATECH =string.Format("{0:ddMMyy}",matchedOS.DClOS.Value.AddDays(30)), //string.Format("{0:ddMMyy}", DateTime.Today.AddDays(30)),
                            DPIECE = string.Format("{0:ddMMyy}", matchedOS.DClOS),  //string.Format("{0:ddMMyy}", DateTime.Today),
                            LIB = "OS" + matchedOS.IdOS + "-" + matchedOS.ESCALE.NumEsc,
                            MONTANT = (le.PrixUnitaire * le.Qte).ToString(),
                            PAYMOD = "S",
                            REF = "FF" + matchedOS.IdOS,
                            SENS = "D",
                            TAUX = le.CodeTVA == "TVAEX" ? "0" : "19,25",
                            TPIECE = "FF",
                            TYPE = "N"
                        });
                    }

                    //ajout de la ligne fournisseur
                    listTrans.Add(new TRANSACTIONS
                    {
                        CJ = "300",
                        CMPTAUX = "",
                        CMPTGEN = "4711100",
                        CMPTTYP = "G",
                        CODE_TVA = null,
                        DATECH =string.Format("{0:ddMMyy}",matchedOS.DClOS.Value.AddDays(30)),  //string.Format("{0:ddMMyy}", DateTime.Today.AddDays(30)),
                        DPIECE = string.Format("{0:ddMMyy}", matchedOS.DClOS), //string.Format("{0:ddMMyy}", DateTime.Today),
                        LIB = "OS" + matchedOS.IdOS + "-" + matchedOS.ESCALE.NumEsc,
                        MONTANT = "0", //sera calculer lors de limportation
                        PAYMOD = "S",
                        REF = "FF" + matchedOS.IdOS,
                        SENS = "C",
                        TAUX = null,
                        TPIECE = "FF",
                        TYPE = "N"
                    });

                    dcAcc.TRANSACTIONS.InsertAllOnSubmit(listTrans);

                    dcAcc.SubmitChanges();

                }
                #endregion

                transaction.Complete();
                return matchedOS;
            }
        }

        
        #endregion
          
        public int GetNumMessageGR()
        {
            PARAMETRE matchedParam = dcAcc.PARAMETRE.FirstOrDefault<PARAMETRE>(p => p.NomAF == "Num Message");
            matchedParam.CodeAF = (short)(matchedParam.CodeAF + 1);
            dcAcc.PARAMETRE.Context.SubmitChanges();

            return matchedParam.CodeAF.Value;
        }

        private static string FormatReference(int entier)
        {
            Int32 i = entier;
            if (i >= 100000)
            {
                return i.ToString();
            }
            else if (i >= 10000)
            {
                return "0" + i.ToString();
            }
            else if (i >= 1000)
            {
                return "00" + i.ToString();
            }
            else if (i >= 100)
            {
                return "000" + i.ToString();
            }
            else if (i >= 10)
            {
                return "0000" + i.ToString();
            }
            else
            {
                return "00000" + i.ToString();
            }
        }

       
        private static string FormatChiffre(int entier)
        {
            Int32 i = entier;
            if (i >= 10)
            {
                return i.ToString();
            }
            else
            {
                return "0" + i.ToString();
            }
        }

        public static int Weekdays(DateTime startDate, DateTime endDate)
        {
            DateTime thisDate = startDate;
            int weekDays = 0;
            while (thisDate != endDate)
            {
                //if (thisDate.DayOfWeek != DayOfWeek.Saturday && thisDate.DayOfWeek != DayOfWeek.Sunday) { weekDays++; }
                if (thisDate.DayOfWeek != DayOfWeek.Sunday) { weekDays++; }
                if (endDate > startDate) { thisDate = thisDate.AddDays(1); } else { thisDate = thisDate.AddDays(-1); }
            }

            /* Determine if value is positive or negative */
            if (endDate > startDate)
            {
                return weekDays;
            }
            else
            {
                return weekDays * -1;
            }
        }

    }
     
}